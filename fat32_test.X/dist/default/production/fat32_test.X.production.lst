

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu Feb 12 13:21:56 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           	psect	idataBANK1
    52  003DC4                     __pidataBANK1:
    53                           	opt stack 0
    54                           
    55                           ;initializer for _temp_buffer
    56  003DC4  54                 	db	84
    57  003DC5  68                 	db	104
    58  003DC6  69                 	db	105
    59  003DC7  73                 	db	115
    60  003DC8  20                 	db	32
    61  003DC9  69                 	db	105
    62  003DCA  73                 	db	115
    63  003DCB  20                 	db	32
    64  003DCC  61                 	db	97
    65  003DCD  20                 	db	32
    66  003DCE  72                 	db	114
    67  003DCF  65                 	db	101
    68  003DD0  63                 	db	99
    69  003DD1  6F                 	db	111
    70  003DD2  72                 	db	114
    71  003DD3  64                 	db	100
    72  003DD4  20                 	db	32
    73  003DD5  61                 	db	97
    74  003DD6  6E                 	db	110
    75  003DD7  64                 	db	100
    76  003DD8  20                 	db	32
    77  003DD9  61                 	db	97
    78  003DDA  20                 	db	32
    79  003DDB  6E                 	db	110
    80  003DDC  75                 	db	117
    81  003DDD  6D                 	db	109
    82  003DDE  62                 	db	98
    83  003DDF  65                 	db	101
    84  003DE0  72                 	db	114
    85  003DE1  20                 	db	32
    86  003DE2  66                 	db	102
    87  003DE3  6F                 	db	111
    88  003DE4  6C                 	db	108
    89  003DE5  6C                 	db	108
    90  003DE6  6F                 	db	111
    91  003DE7  77                 	db	119
    92  003DE8  73                 	db	115
    93  003DE9  20                 	db	32
    94  003DEA  30                 	db	48
    95  003DEB  0D                 	db	13
    96  003DEC  0A                 	db	10
    97  003DED  00                 	db	0
    98                           
    99                           ;initializer for F32_displayMemory@F8237
   100  003DEE  20                 	db	32
   101  003DEF  20                 	db	32
   102  003DF0  20                 	db	32
   103  003DF1  20                 	db	32
   104  003DF2  20                 	db	32
   105  003DF3  20                 	db	32
   106  003DF4  20                 	db	32
   107  003DF5  20                 	db	32
   108  003DF6  20                 	db	32
   109  003DF7  20                 	db	32
   110  003DF8  20                 	db	32
   111  003DF9  20                 	db	32
   112  003DFA  20                 	db	32
   113  003DFB  20                 	db	32
   114  003DFC  42                 	db	66
   115  003DFD  79                 	db	121
   116  003DFE  74                 	db	116
   117  003DFF  65                 	db	101
   118  003E00  73                 	db	115
   119  003E01  00                 	db	0
   120                           
   121                           ;initializer for _fileName
   122  003E02  44                 	db	68
   123  003E03  41                 	db	65
   124  003E04  54                 	db	84
   125  003E05  41                 	db	65
   126  003E06  4C                 	db	76
   127  003E07  4F                 	db	79
   128  003E08  47                 	db	71
   129  003E09  53                 	db	83
   130  003E0A  54                 	db	84
   131  003E0B  58                 	db	88
   132  003E0C  54                 	db	84
   133  003E0D  00                 	db	0
   134                           
   135                           	psect	smallconst
   136  001000                     __psmallconst:
   137                           	opt stack 0
   138  001000  00                 	db	0
   139  001001                     _msg1:
   140                           	opt stack 0
   141  001001  0D                 	db	13
   142  001002  0A                 	db	10
   143  001003  53                 	db	83
   144  001004  74                 	db	116
   145  001005  61                 	db	97
   146  001006  6E                 	db	110
   147  001007  64                 	db	100
   148  001008  61                 	db	97
   149  001009  72                 	db	114
   150  00100A  64                 	db	100
   151  00100B  20                 	db	32
   152  00100C  43                 	db	67
   153  00100D  61                 	db	97
   154  00100E  70                 	db	112
   155  00100F  61                 	db	97
   156  001010  63                 	db	99
   157  001011  69                 	db	105
   158  001012  74                 	db	116
   159  001013  79                 	db	121
   160  001014  20                 	db	32
   161  001015  43                 	db	67
   162  001016  61                 	db	97
   163  001017  72                 	db	114
   164  001018  64                 	db	100
   165  001019  20                 	db	32
   166  00101A  28                 	db	40
   167  00101B  56                 	db	86
   168  00101C  65                 	db	101
   169  00101D  72                 	db	114
   170  00101E  2E                 	db	46
   171  00101F  31                 	db	49
   172  001020  2E                 	db	46
   173  001021  78                 	db	120
   174  001022  29                 	db	41
   175  001023  20                 	db	32
   176  001024  44                 	db	68
   177  001025  65                 	db	101
   178  001026  74                 	db	116
   179  001027  65                 	db	101
   180  001028  63                 	db	99
   181  001029  74                 	db	116
   182  00102A  65                 	db	101
   183  00102B  64                 	db	100
   184  00102C  21                 	db	33
   185  00102D  00                 	db	0
   186  00102E                     __end_of_msg1:
   187                           	opt stack 0
   188  00102E                     _msg3:
   189                           	opt stack 0
   190  00102E  0D                 	db	13
   191  00102F  0A                 	db	10
   192  001030  53                 	db	83
   193  001031  74                 	db	116
   194  001032  61                 	db	97
   195  001033  6E                 	db	110
   196  001034  64                 	db	100
   197  001035  61                 	db	97
   198  001036  72                 	db	114
   199  001037  64                 	db	100
   200  001038  20                 	db	32
   201  001039  43                 	db	67
   202  00103A  61                 	db	97
   203  00103B  70                 	db	112
   204  00103C  61                 	db	97
   205  00103D  63                 	db	99
   206  00103E  69                 	db	105
   207  00103F  74                 	db	116
   208  001040  79                 	db	121
   209  001041  20                 	db	32
   210  001042  43                 	db	67
   211  001043  61                 	db	97
   212  001044  72                 	db	114
   213  001045  64                 	db	100
   214  001046  20                 	db	32
   215  001047  28                 	db	40
   216  001048  56                 	db	86
   217  001049  65                 	db	101
   218  00104A  72                 	db	114
   219  00104B  2E                 	db	46
   220  00104C  32                 	db	50
   221  00104D  2E                 	db	46
   222  00104E  78                 	db	120
   223  00104F  29                 	db	41
   224  001050  20                 	db	32
   225  001051  44                 	db	68
   226  001052  65                 	db	101
   227  001053  74                 	db	116
   228  001054  65                 	db	101
   229  001055  63                 	db	99
   230  001056  74                 	db	116
   231  001057  65                 	db	101
   232  001058  64                 	db	100
   233  001059  21                 	db	33
   234  00105A  00                 	db	0
   235  00105B                     __end_of_msg3:
   236                           	opt stack 0
   237  00105B                     _err2:
   238                           	opt stack 0
   239  00105B  0D                 	db	13
   240  00105C  0A                 	db	10
   241  00105D  43                 	db	67
   242  00105E  61                 	db	97
   243  00105F  72                 	db	114
   244  001060  64                 	db	100
   245  001061  20                 	db	32
   246  001062  49                 	db	73
   247  001063  6E                 	db	110
   248  001064  69                 	db	105
   249  001065  74                 	db	116
   250  001066  69                 	db	105
   251  001067  61                 	db	97
   252  001068  6C                 	db	108
   253  001069  69                 	db	105
   254  00106A  7A                 	db	122
   255  00106B  61                 	db	97
   256  00106C  74                 	db	116
   257  00106D  69                 	db	105
   258  00106E  6F                 	db	111
   259  00106F  6E                 	db	110
   260  001070  20                 	db	32
   261  001071  66                 	db	102
   262  001072  61                 	db	97
   263  001073  69                 	db	105
   264  001074  6C                 	db	108
   265  001075  65                 	db	101
   266  001076  64                 	db	100
   267  001077  2E                 	db	46
   268  001078  2E                 	db	46
   269  001079  00                 	db	0
   270  00107A                     __end_of_err2:
   271                           	opt stack 0
   272  00107A                     _msg2:
   273                           	opt stack 0
   274  00107A  0D                 	db	13
   275  00107B  0A                 	db	10
   276  00107C  48                 	db	72
   277  00107D  69                 	db	105
   278  00107E  67                 	db	103
   279  00107F  68                 	db	104
   280  001080  20                 	db	32
   281  001081  43                 	db	67
   282  001082  61                 	db	97
   283  001083  70                 	db	112
   284  001084  61                 	db	97
   285  001085  63                 	db	99
   286  001086  69                 	db	105
   287  001087  74                 	db	116
   288  001088  79                 	db	121
   289  001089  20                 	db	32
   290  00108A  43                 	db	67
   291  00108B  61                 	db	97
   292  00108C  72                 	db	114
   293  00108D  64                 	db	100
   294  00108E  20                 	db	32
   295  00108F  44                 	db	68
   296  001090  65                 	db	101
   297  001091  74                 	db	116
   298  001092  65                 	db	101
   299  001093  63                 	db	99
   300  001094  74                 	db	116
   301  001095  65                 	db	101
   302  001096  64                 	db	100
   303  001097  21                 	db	33
   304  001098  00                 	db	0
   305  001099                     __end_of_msg2:
   306                           	opt stack 0
   307  001099                     _err4:
   308                           	opt stack 0
   309  001099  0D                 	db	13
   310  00109A  0A                 	db	10
   311  00109B  55                 	db	85
   312  00109C  6E                 	db	110
   313  00109D  6B                 	db	107
   314  00109E  6E                 	db	110
   315  00109F  6F                 	db	111
   316  0010A0  77                 	db	119
   317  0010A1  6E                 	db	110
   318  0010A2  20                 	db	32
   319  0010A3  53                 	db	83
   320  0010A4  44                 	db	68
   321  0010A5  20                 	db	32
   322  0010A6  43                 	db	67
   323  0010A7  61                 	db	97
   324  0010A8  72                 	db	114
   325  0010A9  64                 	db	100
   326  0010AA  20                 	db	32
   327  0010AB  44                 	db	68
   328  0010AC  65                 	db	101
   329  0010AD  74                 	db	116
   330  0010AE  65                 	db	101
   331  0010AF  63                 	db	99
   332  0010B0  74                 	db	116
   333  0010B1  65                 	db	101
   334  0010B2  64                 	db	100
   335  0010B3  21                 	db	33
   336  0010B4  00                 	db	0
   337  0010B5                     __end_of_err4:
   338                           	opt stack 0
   339  0010B5                     _test_start:
   340                           	opt stack 0
   341  0010B5  0D                 	db	13
   342  0010B6  0A                 	db	10
   343  0010B7  53                 	db	83
   344  0010B8  44                 	db	68
   345  0010B9  20                 	db	32
   346  0010BA  43                 	db	67
   347  0010BB  61                 	db	97
   348  0010BC  72                 	db	114
   349  0010BD  64                 	db	100
   350  0010BE  20                 	db	32
   351  0010BF  54                 	db	84
   352  0010C0  65                 	db	101
   353  0010C1  73                 	db	115
   354  0010C2  74                 	db	116
   355  0010C3  20                 	db	32
   356  0010C4  4A                 	db	74
   357  0010C5  75                 	db	117
   358  0010C6  73                 	db	115
   359  0010C7  74                 	db	116
   360  0010C8  20                 	db	32
   361  0010C9  53                 	db	83
   362  0010CA  74                 	db	116
   363  0010CB  61                 	db	97
   364  0010CC  72                 	db	114
   365  0010CD  74                 	db	116
   366  0010CE  65                 	db	101
   367  0010CF  64                 	db	100
   368  0010D0  00                 	db	0
   369  0010D1                     __end_of_test_start:
   370                           	opt stack 0
   371  0010D1                     _err1:
   372                           	opt stack 0
   373  0010D1  0D                 	db	13
   374  0010D2  0A                 	db	10
   375  0010D3  53                 	db	83
   376  0010D4  44                 	db	68
   377  0010D5  20                 	db	32
   378  0010D6  63                 	db	99
   379  0010D7  61                 	db	97
   380  0010D8  72                 	db	114
   381  0010D9  64                 	db	100
   382  0010DA  20                 	db	32
   383  0010DB  6E                 	db	110
   384  0010DC  6F                 	db	111
   385  0010DD  74                 	db	116
   386  0010DE  20                 	db	32
   387  0010DF  64                 	db	100
   388  0010E0  65                 	db	101
   389  0010E1  74                 	db	116
   390  0010E2  65                 	db	101
   391  0010E3  63                 	db	99
   392  0010E4  74                 	db	116
   393  0010E5  65                 	db	101
   394  0010E6  64                 	db	100
   395  0010E7  2E                 	db	46
   396  0010E8  2E                 	db	46
   397  0010E9  00                 	db	0
   398  0010EA                     __end_of_err1:
   399                           	opt stack 0
   400  0010EA                     _err3:
   401                           	opt stack 0
   402  0010EA  0D                 	db	13
   403  0010EB  0A                 	db	10
   404  0010EC  46                 	db	70
   405  0010ED  41                 	db	65
   406  0010EE  54                 	db	84
   407  0010EF  33                 	db	51
   408  0010F0  32                 	db	50
   409  0010F1  20                 	db	32
   410  0010F2  6E                 	db	110
   411  0010F3  6F                 	db	111
   412  0010F4  74                 	db	116
   413  0010F5  20                 	db	32
   414  0010F6  66                 	db	102
   415  0010F7  6F                 	db	111
   416  0010F8  75                 	db	117
   417  0010F9  6E                 	db	110
   418  0010FA  64                 	db	100
   419  0010FB  21                 	db	33
   420  0010FC  00                 	db	0
   421  0010FD                     __end_of_err3:
   422                           	opt stack 0
   423  0000                     _ADCON0	set	4034
   424  0000                     _ADCON1	set	4033
   425  0000                     _ADCON2	set	4032
   426  0000                     _ANSELA	set	3896
   427  0000                     _ANSELB	set	3897
   428  0000                     _ANSELC	set	3898
   429  0000                     _ANSELD	set	3899
   430  0000                     _ANSELE	set	3900
   431  0000                     _BAUDCONbits	set	4024
   432  0000                     _CM1CON0	set	3961
   433  0000                     _CM2CON0	set	3960
   434  0000                     _CM2CON1	set	3959
   435  0000                     _LATBbits	set	3978
   436  0000                     _LATCbits	set	3979
   437  0000                     _PIE1bits	set	3997
   438  0000                     _PIR1bits	set	3998
   439  0000                     _PIR3bits	set	4004
   440  0000                     _RCREG	set	4014
   441  0000                     _RCSTA	set	4011
   442  0000                     _RCSTAbits	set	4011
   443  0000                     _SPBRG	set	4015
   444  0000                     _SPBRGH	set	4016
   445  0000                     _SSP2BUF	set	3951
   446  0000                     _SSP2CON1	set	3948
   447  0000                     _SSP2CON1bits	set	3948
   448  0000                     _SSP2STAT	set	3949
   449  0000                     _SSP2STATbits	set	3949
   450  0000                     _TRISAbits	set	3986
   451  0000                     _TRISBbits	set	3987
   452  0000                     _TRISCbits	set	3988
   453  0000                     _TRISDbits	set	3989
   454  0000                     _TXREG	set	4013
   455  0000                     _TXSTA	set	4012
   456  0000                     _TXSTAbits	set	4012
   457  0010FD  00                 	db	0	; dummy byte at the end
   458  0000                     
   459                           ; #config settings
   460                           
   461                           	psect	cinit
   462  003D14                     __pcinit:
   463                           	opt stack 0
   464  003D14                     start_initialization:
   465                           	opt stack 0
   466  003D14                     __initialization:
   467                           	opt stack 0
   468                           
   469                           ; Clear objects allocated to BIGRAM (512 bytes)
   470  003D14  EE01  F0EE         	lfsr	0,__pbssBIGRAM
   471  003D18  EE12 F000          	lfsr	1,512
   472  003D1C                     clear_0:
   473  003D1C  6AEE               	clrf	postinc0,c
   474  003D1E  50E5               	movf	postdec1,w,c
   475  003D20  50E1               	movf	fsr1l,w,c
   476  003D22  E1FC               	bnz	clear_0
   477  003D24  50E2               	movf	fsr1h,w,c
   478  003D26  E1FA               	bnz	clear_0
   479                           
   480                           ; Clear objects allocated to BANK1 (120 bytes)
   481  003D28  EE01  F000         	lfsr	0,__pbssBANK1
   482  003D2C  0E78               	movlw	120
   483  003D2E                     clear_1:
   484  003D2E  6AEE               	clrf	postinc0,c
   485  003D30  06E8               	decf	wreg,f,c
   486  003D32  E1FD               	bnz	clear_1
   487                           
   488                           ; Clear objects allocated to BANK0 (3 bytes)
   489  003D34  0100               	movlb	0
   490  003D36  6BF0               	clrf	(__pbssBANK0+2)& (0+255),b
   491  003D38  6BEF               	clrf	(__pbssBANK0+1)& (0+255),b
   492  003D3A  6BEE               	clrf	__pbssBANK0& (0+255),b
   493                           
   494                           ; Clear objects allocated to COMRAM (30 bytes)
   495  003D3C  EE00  F023         	lfsr	0,__pbssCOMRAM
   496  003D40  0E1E               	movlw	30
   497  003D42                     clear_2:
   498  003D42  6AEE               	clrf	postinc0,c
   499  003D44  06E8               	decf	wreg,f,c
   500  003D46  E1FD               	bnz	clear_2
   501                           
   502                           ; Initialize objects allocated to BANK1 (74 bytes)
   503                           ; load TBLPTR registers with __pidataBANK1
   504  003D48  0EC4               	movlw	low __pidataBANK1
   505  003D4A  6EF6               	movwf	tblptrl,c
   506  003D4C  0E3D               	movlw	high __pidataBANK1
   507  003D4E  6EF7               	movwf	tblptrh,c
   508  003D50  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   509  003D52  6EF8               	movwf	tblptru,c
   510  003D54  EE01  F078         	lfsr	0,__pdataBANK1
   511  003D58  EE10 F04A          	lfsr	1,74
   512  003D5C                     copy_data0:
   513  003D5C  0009               	tblrd		*+
   514  003D5E  CFF5 FFEE          	movff	tablat,postinc0
   515  003D62  50E5               	movf	postdec1,w,c
   516  003D64  50E1               	movf	fsr1l,w,c
   517  003D66  E1FA               	bnz	copy_data0
   518  003D68                     end_of_initialization:
   519                           	opt stack 0
   520  003D68                     __end_of__initialization:
   521                           	opt stack 0
   522  003D68  0E00               	movlw	low (__Lmediumconst shr (0+16))
   523  003D6A  6EF8               	movwf	tblptru,c
   524  003D6C  0100               	movlb	0
   525  003D6E  EF0E  F013         	goto	_main	;jump to C main() function
   526                           tblptru	equ	0xFF8
   527                           tblptrh	equ	0xFF7
   528                           tblptrl	equ	0xFF6
   529                           tablat	equ	0xFF5
   530                           postinc0	equ	0xFEE
   531                           wreg	equ	0xFE8
   532                           postdec1	equ	0xFE5
   533                           fsr1h	equ	0xFE2
   534                           fsr1l	equ	0xFE1
   535                           
   536                           	psect	bssCOMRAM
   537  000023                     __pbssCOMRAM:
   538                           	opt stack 0
   539  000023                     _SD_startBlock:
   540                           	opt stack 0
   541  000023                     	ds	4
   542  000027                     _fileSize:
   543                           	opt stack 0
   544  000027                     	ds	4
   545  00002B                     _rootCluster:
   546                           	opt stack 0
   547  00002B                     	ds	4
   548  00002F                     _totalClusters:
   549                           	opt stack 0
   550  00002F                     	ds	4
   551  000033                     _unusedSectors:
   552                           	opt stack 0
   553  000033                     	ds	4
   554  000037                     _dateFAT:
   555                           	opt stack 0
   556  000037                     	ds	2
   557  000039                     _reservedSectorCount:
   558                           	opt stack 0
   559  000039                     	ds	2
   560  00003B                     _timeFAT:
   561                           	opt stack 0
   562  00003B                     	ds	2
   563  00003D                     _SDHC_flag:
   564                           	opt stack 0
   565  00003D                     	ds	1
   566  00003E                     _SD_cardType:
   567                           	opt stack 0
   568  00003E                     	ds	1
   569  00003F                     _sectorPerCluster:
   570                           	opt stack 0
   571  00003F                     	ds	2
   572                           tblptru	equ	0xFF8
   573                           tblptrh	equ	0xFF7
   574                           tblptrl	equ	0xFF6
   575                           tablat	equ	0xFF5
   576                           postinc0	equ	0xFEE
   577                           wreg	equ	0xFE8
   578                           postdec1	equ	0xFE5
   579                           fsr1h	equ	0xFE2
   580                           fsr1l	equ	0xFE1
   581                           
   582                           	psect	bssBANK0
   583  0000EE                     __pbssBANK0:
   584                           	opt stack 0
   585  0000EE                     _bytesPerSector:
   586                           	opt stack 0
   587  0000EE                     	ds	2
   588  0000F0                     _freeClusterCountUpdated:
   589                           	opt stack 0
   590  0000F0                     	ds	1
   591                           tblptru	equ	0xFF8
   592                           tblptrh	equ	0xFF7
   593                           tblptrl	equ	0xFF6
   594                           tablat	equ	0xFF5
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           postdec1	equ	0xFE5
   598                           fsr1h	equ	0xFE2
   599                           fsr1l	equ	0xFE1
   600                           
   601                           	psect	bssBANK1
   602  000100                     __pbssBANK1:
   603                           	opt stack 0
   604  000100                     _SD_totalBlocks:
   605                           	opt stack 0
   606  000100                     	ds	4
   607  000104                     _appendFileLocation:
   608                           	opt stack 0
   609  000104                     	ds	4
   610  000108                     _appendFileSector:
   611                           	opt stack 0
   612  000108                     	ds	4
   613  00010C                     _appendStartCluster:
   614                           	opt stack 0
   615  00010C                     	ds	4
   616  000110                     _firstDataSector:
   617                           	opt stack 0
   618  000110                     	ds	4
   619  000114                     _dataString:
   620                           	opt stack 0
   621  000114                     	ds	100
   622                           tblptru	equ	0xFF8
   623                           tblptrh	equ	0xFF7
   624                           tblptrl	equ	0xFF6
   625                           tablat	equ	0xFF5
   626                           postinc0	equ	0xFEE
   627                           wreg	equ	0xFE8
   628                           postdec1	equ	0xFE5
   629                           fsr1h	equ	0xFE2
   630                           fsr1l	equ	0xFE1
   631                           
   632                           	psect	dataBANK1
   633  000178                     __pdataBANK1:
   634                           	opt stack 0
   635  000178                     _temp_buffer:
   636                           	opt stack 0
   637  000178                     	ds	42
   638  0001A2                     F32_displayMemory@F8237:
   639                           	opt stack 0
   640  0001A2                     	ds	20
   641  0001B6                     _fileName:
   642                           	opt stack 0
   643  0001B6                     	ds	12
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           postdec1	equ	0xFE5
   651                           fsr1h	equ	0xFE2
   652                           fsr1l	equ	0xFE1
   653                           
   654                           	psect	bssBIGRAM
   655  0001EE                     __pbssBIGRAM:
   656                           	opt stack 0
   657  0001EE                     _SD_buffer:
   658                           	opt stack 0
   659  0001EE                     	ds	512
   660                           tblptru	equ	0xFF8
   661                           tblptrh	equ	0xFF7
   662                           tblptrl	equ	0xFF6
   663                           tablat	equ	0xFF5
   664                           postinc0	equ	0xFEE
   665                           wreg	equ	0xFE8
   666                           postdec1	equ	0xFE5
   667                           fsr1h	equ	0xFE2
   668                           fsr1l	equ	0xFE1
   669                           
   670                           	psect	cstackBANK1
   671  0001C2                     __pcstackBANK1:
   672                           	opt stack 0
   673  0001C2                     F32_writeFile@extraMemory:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x0
   677  0001C2                     	ds	4
   678  0001C6                     _F32_writeFile$2117:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x4
   682  0001C6                     	ds	4
   683  0001CA                     F32_writeFile@clusterCount:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x8
   687  0001CA                     	ds	4
   688  0001CE                     F32_writeFile@firstClusterHigh:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0xC
   692  0001CE                     	ds	2
   693  0001D0                     F32_writeFile@firstClusterLow:
   694                           	opt stack 0
   695                           
   696                           ; 2 bytes @ 0xE
   697  0001D0                     	ds	2
   698  0001D2                     F32_writeFile@fileCreatedFlag:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x10
   702  0001D2                     	ds	1
   703  0001D3                     F32_writeFile@appendFile:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x11
   707  0001D3                     	ds	1
   708  0001D4                     F32_writeFile@error:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x12
   712  0001D4                     	ds	1
   713  0001D5                     F32_writeFile@start:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x13
   717  0001D5                     	ds	1
   718  0001D6                     F32_writeFile@nextCluster:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x14
   722  0001D6                     	ds	4
   723  0001DA                     F32_writeFile@firstSector:
   724                           	opt stack 0
   725                           
   726                           ; 4 bytes @ 0x18
   727  0001DA                     	ds	4
   728  0001DE                     F32_writeFile@k:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x1C
   732  0001DE                     	ds	1
   733  0001DF                     F32_writeFile@data:
   734                           	opt stack 0
   735                           
   736                           ; 1 bytes @ 0x1D
   737  0001DF                     	ds	1
   738  0001E0                     F32_writeFile@sector:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x1E
   742  0001E0                     	ds	1
   743  0001E1                     F32_writeFile@prevCluster:
   744                           	opt stack 0
   745                           
   746                           ; 4 bytes @ 0x1F
   747  0001E1                     	ds	4
   748  0001E5                     F32_writeFile@i:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x23
   752  0001E5                     	ds	2
   753  0001E7                     F32_writeFile@j:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x25
   757  0001E7                     	ds	1
   758  0001E8                     F32_writeFile@dir:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x26
   762  0001E8                     	ds	2
   763  0001EA                     F32_writeFile@cluster:
   764                           	opt stack 0
   765                           
   766                           ; 4 bytes @ 0x28
   767  0001EA                     	ds	4
   768                           tblptru	equ	0xFF8
   769                           tblptrh	equ	0xFF7
   770                           tblptrl	equ	0xFF6
   771                           tablat	equ	0xFF5
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           postdec1	equ	0xFE5
   775                           fsr1h	equ	0xFE2
   776                           fsr1l	equ	0xFE1
   777                           
   778                           	psect	cstackBANK0
   779  000060                     __pcstackBANK0:
   780                           	opt stack 0
   781  000060                     ?___lmul:
   782                           	opt stack 0
   783  000060                     ?___llmod:
   784                           	opt stack 0
   785  000060                     USART_HW_putstr@c:
   786                           	opt stack 0
   787  000060                     USART_HW_init@usart_div:
   788                           	opt stack 0
   789  000060                     SD_sendCommand@arg:
   790                           	opt stack 0
   791  000060                     ___lmul@multiplier:
   792                           	opt stack 0
   793  000060                     ___llmod@dividend:
   794                           	opt stack 0
   795                           
   796                           ; 4 bytes @ 0x0
   797  000060                     	ds	4
   798  000064                     ??_SD_sendCommand:
   799  000064                     ___lmul@multiplicand:
   800                           	opt stack 0
   801  000064                     ___llmod@divisor:
   802                           	opt stack 0
   803                           
   804                           ; 4 bytes @ 0x4
   805  000064                     	ds	4
   806  000068                     SD_sendCommand@retry:
   807                           	opt stack 0
   808  000068                     ___lmul@product:
   809                           	opt stack 0
   810                           
   811                           ; 4 bytes @ 0x8
   812  000068                     	ds	1
   813  000069                     SD_sendCommand@status:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x9
   817  000069                     	ds	1
   818  00006A                     SD_sendCommand@response:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0xA
   822  00006A                     	ds	1
   823  00006B                     SD_sendCommand@cmd:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0xB
   827  00006B                     	ds	1
   828  00006C                     ?_F32_getFirstSector:
   829                           	opt stack 0
   830  00006C                     ?___lldiv:
   831                           	opt stack 0
   832  00006C                     SD_init@SD_version:
   833                           	opt stack 0
   834  00006C                     SD_readSingleBlock@SD_startBlock:
   835                           	opt stack 0
   836  00006C                     SD_writeSingleBlock@SD_startBlock:
   837                           	opt stack 0
   838  00006C                     F32_getFirstSector@clusterNumber:
   839                           	opt stack 0
   840  00006C                     ___lldiv@dividend:
   841                           	opt stack 0
   842                           
   843                           ; 4 bytes @ 0xC
   844  00006C                     	ds	1
   845  00006D                     SD_init@i:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0xD
   849  00006D                     	ds	1
   850  00006E                     SD_init@response:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0xE
   854  00006E                     	ds	1
   855  00006F                     SD_init@retry:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0xF
   859  00006F                     	ds	1
   860  000070                     ??_F32_getFirstSector:
   861  000070                     SD_readSingleBlock@retry:
   862                           	opt stack 0
   863  000070                     SD_writeSingleBlock@retry:
   864                           	opt stack 0
   865  000070                     ___lldiv@divisor:
   866                           	opt stack 0
   867                           
   868                           ; 4 bytes @ 0x10
   869  000070                     	ds	2
   870  000072                     SD_readSingleBlock@response:
   871                           	opt stack 0
   872  000072                     SD_writeSingleBlock@i:
   873                           	opt stack 0
   874                           
   875                           ; 2 bytes @ 0x12
   876  000072                     	ds	1
   877  000073                     SD_readSingleBlock@i:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x13
   881  000073                     	ds	1
   882  000074                     SD_writeSingleBlock@response:
   883                           	opt stack 0
   884  000074                     ___lldiv@quotient:
   885                           	opt stack 0
   886                           
   887                           ; 4 bytes @ 0x14
   888  000074                     	ds	1
   889  000075                     ?_F32_getSetFreeCluster:
   890                           	opt stack 0
   891  000075                     F32_getSetFreeCluster@get_set:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x15
   895  000075                     	ds	1
   896  000076                     F32_getSetFreeCluster@FSEntry:
   897                           	opt stack 0
   898                           
   899                           ; 4 bytes @ 0x16
   900  000076                     	ds	2
   901  000078                     ___lldiv@counter:
   902                           	opt stack 0
   903                           
   904                           ; 1 bytes @ 0x18
   905  000078                     	ds	1
   906  000079                     ?_F32_getSetNextCluster:
   907                           	opt stack 0
   908  000079                     ?_F32_searchNextFreeCluster:
   909                           	opt stack 0
   910  000079                     F32_getSetNextCluster@clusterNumber:
   911                           	opt stack 0
   912  000079                     F32_displayMemory@memory:
   913                           	opt stack 0
   914  000079                     F32_searchNextFreeCluster@startCluster:
   915                           	opt stack 0
   916                           
   917                           ; 4 bytes @ 0x19
   918  000079                     	ds	1
   919  00007A                     ??_F32_getSetFreeCluster:
   920                           
   921                           ; 0 bytes @ 0x1A
   922  00007A                     	ds	3
   923  00007D                     ??_F32_displayMemory:
   924  00007D                     ??_F32_searchNextFreeCluster:
   925  00007D                     F32_getSetNextCluster@get_set:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x1D
   929  00007D                     	ds	1
   930  00007E                     F32_getSetFreeCluster@totOrNext:
   931                           	opt stack 0
   932  00007E                     F32_getSetNextCluster@clusterEntry:
   933                           	opt stack 0
   934                           
   935                           ; 4 bytes @ 0x1E
   936  00007E                     	ds	1
   937  00007F                     F32_getSetFreeCluster@FS:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x1F
   941  00007F                     	ds	2
   942  000081                     ??_F32_getBootSectorData:
   943  000081                     F32_freeMemoryUpdate@size:
   944                           	opt stack 0
   945                           
   946                           ; 4 bytes @ 0x21
   947  000081                     	ds	1
   948  000082                     ??_F32_getSetNextCluster:
   949                           
   950                           ; 0 bytes @ 0x22
   951  000082                     	ds	3
   952  000085                     ??_F32_freeMemoryUpdate:
   953  000085                     F32_displayMemory@memoryString:
   954                           	opt stack 0
   955                           
   956                           ; 20 bytes @ 0x25
   957  000085                     	ds	4
   958  000089                     F32_freeMemoryUpdate@flag:
   959                           	opt stack 0
   960  000089                     F32_searchNextFreeCluster@sector:
   961                           	opt stack 0
   962                           
   963                           ; 4 bytes @ 0x29
   964  000089                     	ds	1
   965  00008A                     F32_freeMemoryUpdate@freeClusters:
   966                           	opt stack 0
   967                           
   968                           ; 4 bytes @ 0x2A
   969  00008A                     	ds	3
   970  00008D                     F32_searchNextFreeCluster@value:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x2D
   974  00008D                     	ds	1
   975  00008E                     F32_getSetNextCluster@FATEntryOffset:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x2E
   979  00008E                     	ds	1
   980  00008F                     F32_searchNextFreeCluster@cluster:
   981                           	opt stack 0
   982                           
   983                           ; 4 bytes @ 0x2F
   984  00008F                     	ds	1
   985  000090                     F32_getSetNextCluster@retry:
   986                           	opt stack 0
   987  000090                     F32_getBootSectorData@dataSectors:
   988                           	opt stack 0
   989                           
   990                           ; 4 bytes @ 0x30
   991  000090                     	ds	1
   992  000091                     F32_getSetNextCluster@FATEntrySector:
   993                           	opt stack 0
   994                           
   995                           ; 4 bytes @ 0x31
   996  000091                     	ds	2
   997  000093                     F32_searchNextFreeCluster@i:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x33
  1001  000093                     	ds	1
  1002  000094                     F32_getBootSectorData@mbr:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x34
  1006  000094                     	ds	1
  1007  000095                     F32_getSetNextCluster@FATEntryValue:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x35
  1011  000095                     	ds	1
  1012  000096                     F32_getBootSectorData@partition:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x36
  1016  000096                     	ds	2
  1017  000098                     F32_getBootSectorData@bpb:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x38
  1021  000098                     	ds	1
  1022  000099                     F32_displayMemory@flag:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x39
  1026  000099                     	ds	1
  1027  00009A                     F32_displayMemory@i:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x3A
  1031  00009A                     	ds	1
  1032  00009B                     ?_F32_findFiles:
  1033                           	opt stack 0
  1034  00009B                     F32_findFiles@fileName:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x3B
  1038  00009B                     	ds	2
  1039  00009D                     ??_F32_findFiles:
  1040                           
  1041                           ; 0 bytes @ 0x3D
  1042  00009D                     	ds	8
  1043  0000A5                     F32_findFiles@nextCluster:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x45
  1047  0000A5                     	ds	4
  1048  0000A9                     F32_findFiles@firstSector:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x49
  1052  0000A9                     	ds	4
  1053  0000AD                     F32_findFiles@flag:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x4D
  1057  0000AD                     	ds	1
  1058  0000AE                     F32_findFiles@i:
  1059                           	opt stack 0
  1060                           
  1061                           ; 2 bytes @ 0x4E
  1062  0000AE                     	ds	2
  1063  0000B0                     F32_findFiles@sector:
  1064                           	opt stack 0
  1065                           
  1066                           ; 4 bytes @ 0x50
  1067  0000B0                     	ds	4
  1068  0000B4                     F32_findFiles@firstCluster:
  1069                           	opt stack 0
  1070                           
  1071                           ; 4 bytes @ 0x54
  1072  0000B4                     	ds	4
  1073  0000B8                     F32_findFiles@cluster:
  1074                           	opt stack 0
  1075                           
  1076                           ; 4 bytes @ 0x58
  1077  0000B8                     	ds	4
  1078  0000BC                     F32_findFiles@j:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x5C
  1082  0000BC                     	ds	1
  1083  0000BD                     F32_findFiles@dir:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x5D
  1087  0000BD                     	ds	2
  1088  0000BF                     F32_readFile@fileName:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x5F
  1092  0000BF                     	ds	2
  1093  0000C1                     ??_F32_readFile:
  1094                           
  1095                           ; 0 bytes @ 0x61
  1096  0000C1                     	ds	8
  1097  0000C9                     F32_readFile@byteCounter:
  1098                           	opt stack 0
  1099                           
  1100                           ; 4 bytes @ 0x69
  1101  0000C9                     	ds	4
  1102  0000CD                     F32_readFile@fileSize:
  1103                           	opt stack 0
  1104                           
  1105                           ; 4 bytes @ 0x6D
  1106  0000CD                     	ds	4
  1107  0000D1                     F32_readFile@firstSector:
  1108                           	opt stack 0
  1109                           
  1110                           ; 4 bytes @ 0x71
  1111  0000D1                     	ds	4
  1112  0000D5                     F32_readFile@flag:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x75
  1116  0000D5                     	ds	1
  1117  0000D6                     F32_readFile@k:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x76
  1121  0000D6                     	ds	2
  1122  0000D8                     F32_readFile@j:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x78
  1126  0000D8                     	ds	1
  1127  0000D9                     F32_readFile@cluster:
  1128                           	opt stack 0
  1129                           
  1130                           ; 4 bytes @ 0x79
  1131  0000D9                     	ds	4
  1132  0000DD                     F32_readFile@dir:
  1133                           	opt stack 0
  1134                           
  1135                           ; 2 bytes @ 0x7D
  1136  0000DD                     	ds	2
  1137  0000DF                     F32_writeFile@fileName:
  1138                           	opt stack 0
  1139                           
  1140                           ; 2 bytes @ 0x7F
  1141  0000DF                     	ds	2
  1142  0000E1                     F32_writeFile@dataString:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x81
  1146  0000E1                     	ds	2
  1147  0000E3                     ??_F32_writeFile:
  1148                           
  1149                           ; 0 bytes @ 0x83
  1150  0000E3                     	ds	8
  1151  0000EB                     main@mySD_type:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x8B
  1155  0000EB                     	ds	1
  1156  0000EC                     main@i:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x8C
  1160  0000EC                     	ds	1
  1161  0000ED                     main@error:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x8D
  1165  0000ED                     	ds	1
  1166                           tblptru	equ	0xFF8
  1167                           tblptrh	equ	0xFF7
  1168                           tblptrl	equ	0xFF6
  1169                           tablat	equ	0xFF5
  1170                           postinc0	equ	0xFEE
  1171                           wreg	equ	0xFE8
  1172                           postdec1	equ	0xFE5
  1173                           fsr1h	equ	0xFE2
  1174                           fsr1l	equ	0xFE1
  1175                           
  1176                           	psect	cstackCOMRAM
  1177  000001                     __pcstackCOMRAM:
  1178                           	opt stack 0
  1179  000001                     ??_low_isr:
  1180  000001                     
  1181                           ; 1 bytes @ 0x0
  1182  000001                     	ds	17
  1183  000012                     ??_high_isr:
  1184                           
  1185                           ; 0 bytes @ 0x11
  1186  000012                     	ds	14
  1187  000020                     ??_Delay10KTCYx:
  1188  000020                     ??_USART_HW_init:
  1189  000020                     USART_HW_write@data:
  1190                           	opt stack 0
  1191  000020                     SPI2_init@bus_mode:
  1192                           	opt stack 0
  1193  000020                     SPI2_read@TempVar:
  1194                           	opt stack 0
  1195  000020                     SPI2_write@TempVar:
  1196                           	opt stack 0
  1197  000020                     Delay100TCYx@unit:
  1198                           	opt stack 0
  1199  000020                     ___llmod@counter:
  1200                           	opt stack 0
  1201                           
  1202                           ; 1 bytes @ 0x1F
  1203  000020                     	ds	1
  1204  000021                     SPI2_init@smp_phase:
  1205                           	opt stack 0
  1206  000021                     SPI2_write@data_out:
  1207                           	opt stack 0
  1208  000021                     Delay10KTCYx@unit:
  1209                           	opt stack 0
  1210  000021                     USART_HW_putstr@s:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x20
  1214  000021                     	ds	1
  1215  000022                     ??_SD_writeSingleBlock:
  1216  000022                     SPI2_init@spi_rate:
  1217                           	opt stack 0
  1218                           
  1219                           ; 1 bytes @ 0x21
  1220  000022                     	ds	1
  1221  000023                     tblptru	equ	0xFF8
  1222                           tblptrh	equ	0xFF7
  1223                           tblptrl	equ	0xFF6
  1224                           tablat	equ	0xFF5
  1225                           postinc0	equ	0xFEE
  1226                           wreg	equ	0xFE8
  1227                           postdec1	equ	0xFE5
  1228                           fsr1h	equ	0xFE2
  1229                           fsr1l	equ	0xFE1
  1230                           
  1231                           ; 0 bytes @ 0x22
  1232 ;;
  1233 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1234 ;;
  1235 ;; *************** function _main *****************
  1236 ;; Defined at:
  1237 ;;		line 63 in file "main.c"
  1238 ;; Parameters:    Size  Location     Type
  1239 ;;		None
  1240 ;; Auto vars:     Size  Location     Type
  1241 ;;  error           1  141[BANK0 ] unsigned char 
  1242 ;;  i               1  140[BANK0 ] unsigned char 
  1243 ;;  mySD_type       1  139[BANK0 ] unsigned char 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;		None               void
  1246 ;; Registers used:
  1247 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1254 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1256 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;Total ram usage:        3 bytes
  1258 ;; Hardware stack levels required when called:   10
  1259 ;; This function calls:
  1260 ;;		_Delay100TCYx
  1261 ;;		_F32_findFiles
  1262 ;;		_F32_getBootSectorData
  1263 ;;		_F32_writeFile
  1264 ;;		_SD_card_type
  1265 ;;		_SD_init
  1266 ;;		_SPI2_init
  1267 ;;		_USART_HW_init
  1268 ;;		_USART_HW_putstr
  1269 ;;		_blinkErrorLED
  1270 ;; This function is called by:
  1271 ;;		Startup code after reset
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text0
  1276  00261C                     __ptext0:
  1277                           	opt stack 0
  1278  00261C                     _main:
  1279                           	opt stack 21
  1280                           
  1281                           ;main.c: 64: UINT8 error, i, mySD_type;
  1282                           ;main.c: 65: ANSELA=0;ANSELB=0;ANSELC=0;ANSELD=0;ANSELE=0;ADCON0=0;ADCON1=0;ADCON2=0;CM1
      +                          CON0=0;CM2CON0=0;CM2CON1=0;;
  1283                           
  1284                           ;incstack = 0
  1285  00261C  0E00               	movlw	0
  1286  00261E  010F               	movlb	15	; () banked
  1287  002620  6F38               	movwf	56,b	;volatile
  1288  002622  0E00               	movlw	0
  1289  002624  010F               	movlb	15	; () banked
  1290  002626  6F39               	movwf	57,b	;volatile
  1291  002628  0E00               	movlw	0
  1292  00262A  010F               	movlb	15	; () banked
  1293  00262C  6F3A               	movwf	58,b	;volatile
  1294  00262E  0E00               	movlw	0
  1295  002630  010F               	movlb	15	; () banked
  1296  002632  6F3B               	movwf	59,b	;volatile
  1297  002634  0E00               	movlw	0
  1298  002636  010F               	movlb	15	; () banked
  1299  002638  6F3C               	movwf	60,b	;volatile
  1300  00263A  0E00               	movlw	0
  1301  00263C  6EC2               	movwf	4034,c	;volatile
  1302  00263E  0E00               	movlw	0
  1303  002640  6EC1               	movwf	4033,c	;volatile
  1304  002642  0E00               	movlw	0
  1305  002644  6EC0               	movwf	4032,c	;volatile
  1306  002646  0E00               	movlw	0
  1307  002648  6E79               	movwf	3961,c	;volatile
  1308  00264A  0E00               	movlw	0
  1309  00264C  6E78               	movwf	3960,c	;volatile
  1310  00264E  0E00               	movlw	0
  1311  002650  6E77               	movwf	3959,c	;volatile
  1312                           
  1313                           ; BSR set to: 15
  1314                           ;main.c: 67: TRISCbits.RC2 = 0;
  1315  002652  9494               	bcf	3988,2,c	;volatile
  1316                           
  1317                           ; BSR set to: 15
  1318                           ;main.c: 68: TRISAbits.RA4 = 1;
  1319  002654  8892               	bsf	3986,4,c	;volatile
  1320                           
  1321                           ; BSR set to: 15
  1322                           ;main.c: 69: LATCbits.LATC2 = 1;
  1323  002656  848B               	bsf	3979,2,c	;volatile
  1324                           
  1325                           ; BSR set to: 15
  1326                           ;main.c: 73: USART_HW_init();
  1327  002658  EC07  F01F         	call	_USART_HW_init	;wreg free
  1328                           
  1329                           ;main.c: 74: (SSP2CON1 &=0xDF);;SPI2_init(SPI_FOSC_64,MODE_00,SMPEND);;
  1330  00265C  9A6C               	bcf	3948,5,c	;volatile
  1331  00265E  0E00               	movlw	0
  1332  002660  6E20               	movwf	SPI2_init@bus_mode,c
  1333  002662  0E80               	movlw	128
  1334  002664  6E21               	movwf	SPI2_init@smp_phase,c
  1335  002666  0E02               	movlw	2
  1336  002668  ECB9  F01E         	call	_SPI2_init
  1337                           
  1338                           ;main.c: 76: for (i = 0; i < 100; i++) {
  1339  00266C  0E00               	movlw	0
  1340  00266E  0100               	movlb	0	; () banked
  1341  002670  6FEC               	movwf	main@i& (0+255),b
  1342  002672  D00F               	goto	L1
  1343  002674                     l4498:
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;main.c: 78: dataString[i] = 0;
  1347  002674  0100               	movlb	0	; () banked
  1348  002676  51EC               	movf	main@i& (0+255),w,b
  1349  002678  0D01               	mullw	1
  1350  00267A  0101               	movlb	1	; () banked
  1351  00267C  0E14               	movlw	low _dataString	;volatile
  1352  00267E  24F3               	addwf	prodl,w,c
  1353  002680  6ED9               	movwf	fsr2l,c
  1354  002682  0101               	movlb	1	; () banked
  1355  002684  0E01               	movlw	high _dataString	;volatile
  1356  002686  20F4               	addwfc	prodh,w,c
  1357  002688  6EDA               	movwf	fsr2h,c
  1358  00268A  0E00               	movlw	0
  1359  00268C  6EDF               	movwf	indf2,c
  1360                           
  1361                           ; BSR set to: 1
  1362  00268E  0100               	movlb	0	; () banked
  1363  002690  2BEC               	incf	main@i& (0+255),f,b
  1364  002692                     L1:
  1365                           
  1366                           ; BSR set to: 0
  1367  002692  0E63               	movlw	99
  1368  002694  0100               	movlb	0	; () banked
  1369  002696  65EC               	cpfsgt	main@i& (0+255),b
  1370  002698  D7ED               	goto	l4498
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;main.c: 79: }
  1374                           ;main.c: 80: USART_HW_putstr(test_start);
  1375                           
  1376                           ; BSR set to: 0
  1377  00269A  0E10               	movlw	high _test_start
  1378  00269C  6E22               	movwf	USART_HW_putstr@s+1,c
  1379  00269E  0EB5               	movlw	low _test_start
  1380  0026A0  6E21               	movwf	USART_HW_putstr@s,c
  1381  0026A2  EC23  F01F         	call	_USART_HW_putstr	;wreg free
  1382                           
  1383                           ;main.c: 83: for (i = 0; i < 10; i++) {
  1384  0026A6  0E00               	movlw	0
  1385  0026A8  0100               	movlb	0	; () banked
  1386  0026AA  6FEC               	movwf	main@i& (0+255),b
  1387  0026AC  D00A               	goto	L2
  1388  0026AE                     l4512:
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;main.c: 84: error = SD_init();
  1392  0026AE  EC2E  F01A         	call	_SD_init	;wreg free
  1393  0026B2  0100               	movlb	0	; () banked
  1394  0026B4  6FED               	movwf	main@error& (0+255),b
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;main.c: 85: if (!error)
  1398  0026B6  0100               	movlb	0	; () banked
  1399  0026B8  67ED               	tstfsz	main@error& (0+255),b
  1400  0026BA  D001               	goto	l4518
  1401  0026BC  D006               	goto	l4522
  1402  0026BE                     l4518:
  1403                           
  1404                           ; BSR set to: 0
  1405  0026BE  0100               	movlb	0	; () banked
  1406  0026C0  2BEC               	incf	main@i& (0+255),f,b
  1407  0026C2                     L2:
  1408                           
  1409                           ; BSR set to: 0
  1410  0026C2  0E09               	movlw	9
  1411  0026C4  0100               	movlb	0	; () banked
  1412  0026C6  65EC               	cpfsgt	main@i& (0+255),b
  1413  0026C8  D7F2               	goto	l4512
  1414  0026CA                     l4522:
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;main.c: 87: }
  1418                           ;main.c: 89: if (error) {
  1419  0026CA  0100               	movlb	0	; () banked
  1420  0026CC  51ED               	movf	main@error& (0+255),w,b
  1421  0026CE  B4D8               	btfsc	status,2,c
  1422  0026D0  D017               	goto	l4534
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;main.c: 90: if (error == 1)
  1426  0026D2  0100               	movlb	0	; () banked
  1427  0026D4  05ED               	decf	main@error& (0+255),w,b
  1428  0026D6  A4D8               	btfss	status,2,c
  1429  0026D8  D006               	goto	l4528
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;main.c: 91: USART_HW_putstr(err1);
  1433  0026DA  0E10               	movlw	high _err1
  1434  0026DC  6E22               	movwf	USART_HW_putstr@s+1,c
  1435  0026DE  0ED1               	movlw	low _err1
  1436  0026E0  6E21               	movwf	USART_HW_putstr@s,c
  1437  0026E2  EC23  F01F         	call	_USART_HW_putstr	;wreg free
  1438  0026E6                     l4528:
  1439                           
  1440                           ;main.c: 92: if (error == 2)
  1441  0026E6  0100               	movlb	0	; () banked
  1442  0026E8  51ED               	movf	main@error& (0+255),w,b
  1443  0026EA  0A02               	xorlw	2
  1444  0026EC  A4D8               	btfss	status,2,c
  1445  0026EE  D006               	goto	l4532
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;main.c: 93: USART_HW_putstr(err2);
  1449  0026F0  0E10               	movlw	high _err2
  1450  0026F2  6E22               	movwf	USART_HW_putstr@s+1,c
  1451  0026F4  0E5B               	movlw	low _err2
  1452  0026F6  6E21               	movwf	USART_HW_putstr@s,c
  1453  0026F8  EC23  F01F         	call	_USART_HW_putstr	;wreg free
  1454  0026FC                     l4532:
  1455                           
  1456                           ;main.c: 94: blinkErrorLED();
  1457  0026FC  EC64  F01F         	call	_blinkErrorLED	;wreg free
  1458  002700                     l4534:
  1459                           
  1460                           ;main.c: 95: }
  1461                           ;main.c: 97: mySD_type = SD_card_type();
  1462  002700  EC69  F01F         	call	_SD_card_type	;wreg free
  1463  002704  0100               	movlb	0	; () banked
  1464  002706  6FEB               	movwf	main@mySD_type& (0+255),b
  1465                           
  1466                           ;main.c: 98: switch (mySD_type) {
  1467  002708  D01C               	goto	l4546
  1468  00270A                     l4536:
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;main.c: 100: USART_HW_putstr(msg1);
  1472  00270A  0E10               	movlw	high _msg1
  1473  00270C  6E22               	movwf	USART_HW_putstr@s+1,c
  1474  00270E  0E01               	movlw	low _msg1
  1475  002710  6E21               	movwf	USART_HW_putstr@s,c
  1476  002712  EC23  F01F         	call	_USART_HW_putstr	;wreg free
  1477                           
  1478                           ;main.c: 101: break;
  1479  002716  D021               	goto	l4548
  1480  002718                     l4538:
  1481                           
  1482                           ;main.c: 103: USART_HW_putstr(msg2);
  1483  002718  0E10               	movlw	high _msg2
  1484  00271A  6E22               	movwf	USART_HW_putstr@s+1,c
  1485  00271C  0E7A               	movlw	low _msg2
  1486  00271E  6E21               	movwf	USART_HW_putstr@s,c
  1487  002720  EC23  F01F         	call	_USART_HW_putstr	;wreg free
  1488                           
  1489                           ;main.c: 104: break;
  1490  002724  D01A               	goto	l4548
  1491  002726                     l4540:
  1492                           
  1493                           ;main.c: 106: USART_HW_putstr(msg3);
  1494  002726  0E10               	movlw	high _msg3
  1495  002728  6E22               	movwf	USART_HW_putstr@s+1,c
  1496  00272A  0E2E               	movlw	low _msg3
  1497  00272C  6E21               	movwf	USART_HW_putstr@s,c
  1498  00272E  EC23  F01F         	call	_USART_HW_putstr	;wreg free
  1499                           
  1500                           ;main.c: 107: break;
  1501  002732  D013               	goto	l4548
  1502  002734                     l4542:
  1503                           
  1504                           ;main.c: 109: USART_HW_putstr(err4);
  1505  002734  0E10               	movlw	high _err4
  1506  002736  6E22               	movwf	USART_HW_putstr@s+1,c
  1507  002738  0E99               	movlw	low _err4
  1508  00273A  6E21               	movwf	USART_HW_putstr@s,c
  1509  00273C  EC23  F01F         	call	_USART_HW_putstr	;wreg free
  1510                           
  1511                           ;main.c: 110: break;
  1512  002740  D00C               	goto	l4548
  1513  002742                     l4546:
  1514  002742  0100               	movlb	0	; () banked
  1515  002744  51EB               	movf	main@mySD_type& (0+255),w,b
  1516                           
  1517                           ; Switch size 1, requested type "space"
  1518                           ; Number of cases is 3, Range of values is 1 to 3
  1519                           ; switch strategies available:
  1520                           ; Name         Instructions Cycles
  1521                           ; simple_byte           10     6 (average)
  1522                           ;	Chosen strategy is simple_byte
  1523  002746  0A01               	xorlw	1	; case 1
  1524  002748  B4D8               	btfsc	status,2,c
  1525  00274A  D7DF               	goto	l4536
  1526  00274C  0A03               	xorlw	3	; case 2
  1527  00274E  B4D8               	btfsc	status,2,c
  1528  002750  D7E3               	goto	l4538
  1529  002752  0A01               	xorlw	1	; case 3
  1530  002754  B4D8               	btfsc	status,2,c
  1531  002756  D7E7               	goto	l4540
  1532  002758  D7ED               	goto	l4542
  1533  00275A                     l4548:
  1534                           
  1535                           ;main.c: 113: error = F32_getBootSectorData();
  1536  00275A  ECFA  F010         	call	_F32_getBootSectorData	;wreg free
  1537  00275E  0100               	movlb	0	; () banked
  1538  002760  6FED               	movwf	main@error& (0+255),b
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;main.c: 114: if (error) {
  1542  002762  0100               	movlb	0	; () banked
  1543  002764  51ED               	movf	main@error& (0+255),w,b
  1544  002766  B4D8               	btfsc	status,2,c
  1545  002768  D008               	goto	l4556
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;main.c: 115: USART_HW_putstr(err3);
  1549  00276A  0E10               	movlw	high _err3
  1550  00276C  6E22               	movwf	USART_HW_putstr@s+1,c
  1551  00276E  0EEA               	movlw	low _err3
  1552  002770  6E21               	movwf	USART_HW_putstr@s,c
  1553  002772  EC23  F01F         	call	_USART_HW_putstr	;wreg free
  1554                           
  1555                           ;main.c: 117: blinkErrorLED();
  1556  002776  EC64  F01F         	call	_blinkErrorLED	;wreg free
  1557  00277A                     l4556:
  1558                           
  1559                           ;main.c: 118: }
  1560                           ;main.c: 120: (SSP2CON1 &=0xDF);;SPI2_init(SPI_FOSC_4,MODE_00,SMPEND);;
  1561  00277A  9A6C               	bcf	3948,5,c	;volatile
  1562  00277C  0E00               	movlw	0
  1563  00277E  6E20               	movwf	SPI2_init@bus_mode,c
  1564  002780  0E80               	movlw	128
  1565  002782  6E21               	movwf	SPI2_init@smp_phase,c
  1566  002784  0E00               	movlw	0
  1567  002786  ECB9  F01E         	call	_SPI2_init
  1568                           
  1569                           ;main.c: 121: Delay100TCYx(160);
  1570  00278A  0EA0               	movlw	160
  1571  00278C  EC56  F01F         	call	_Delay100TCYx
  1572                           
  1573                           ;main.c: 122: F32_findFiles(0, 0);
  1574  002790  0E00               	movlw	0
  1575  002792  0100               	movlb	0	; () banked
  1576  002794  6F9C               	movwf	(F32_findFiles@fileName+1)& (0+255),b
  1577  002796  0E00               	movlw	0
  1578  002798  0100               	movlb	0	; () banked
  1579  00279A  6F9B               	movwf	F32_findFiles@fileName& (0+255),b
  1580  00279C  0E00               	movlw	0
  1581  00279E  EC00  F00E         	call	_F32_findFiles
  1582                           
  1583                           ;main.c: 124: for (i = 0; i < 41; i++)
  1584  0027A2  0E00               	movlw	0
  1585  0027A4  0100               	movlb	0	; () banked
  1586  0027A6  6FEC               	movwf	main@i& (0+255),b
  1587  0027A8  D01A               	goto	L3
  1588  0027AA                     l4570:
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;main.c: 125: dataString[i] = temp_buffer[i];
  1592  0027AA  0100               	movlb	0	; () banked
  1593  0027AC  51EC               	movf	main@i& (0+255),w,b
  1594  0027AE  0D01               	mullw	1
  1595  0027B0  0101               	movlb	1	; () banked
  1596  0027B2  0E78               	movlw	low _temp_buffer
  1597  0027B4  24F3               	addwf	prodl,w,c
  1598  0027B6  6ED9               	movwf	fsr2l,c
  1599  0027B8  0101               	movlb	1	; () banked
  1600  0027BA  0E01               	movlw	high _temp_buffer
  1601  0027BC  20F4               	addwfc	prodh,w,c
  1602  0027BE  6EDA               	movwf	fsr2h,c
  1603  0027C0  0100               	movlb	0	; () banked
  1604  0027C2  51EC               	movf	main@i& (0+255),w,b
  1605  0027C4  0D01               	mullw	1
  1606  0027C6  0101               	movlb	1	; () banked
  1607  0027C8  0E14               	movlw	low _dataString	;volatile
  1608  0027CA  24F3               	addwf	prodl,w,c
  1609  0027CC  6EE1               	movwf	fsr1l,c
  1610  0027CE  0101               	movlb	1	; () banked
  1611  0027D0  0E01               	movlw	high _dataString	;volatile
  1612  0027D2  20F4               	addwfc	prodh,w,c
  1613  0027D4  6EE2               	movwf	fsr1h,c
  1614  0027D6  CFDF FFE7          	movff	indf2,indf1
  1615                           
  1616                           ; BSR set to: 1
  1617  0027DA  0100               	movlb	0	; () banked
  1618  0027DC  2BEC               	incf	main@i& (0+255),f,b
  1619  0027DE                     L3:
  1620                           
  1621                           ; BSR set to: 0
  1622  0027DE  0E28               	movlw	40
  1623  0027E0  0100               	movlb	0	; () banked
  1624  0027E2  65EC               	cpfsgt	main@i& (0+255),b
  1625  0027E4  D7E2               	goto	l4570
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;main.c: 127: error = F32_writeFile(fileName, (UINT8 *) dataString);
  1629                           
  1630                           ; BSR set to: 0
  1631  0027E6  0101               	movlb	1	; () banked
  1632  0027E8  0E01               	movlw	high _fileName
  1633  0027EA  0100               	movlb	0	; () banked
  1634  0027EC  6FE0               	movwf	(F32_writeFile@fileName+1)& (0+255),b
  1635  0027EE  0101               	movlb	1	; () banked
  1636  0027F0  0EB6               	movlw	low _fileName
  1637  0027F2  0100               	movlb	0	; () banked
  1638  0027F4  6FDF               	movwf	F32_writeFile@fileName& (0+255),b
  1639  0027F6  0101               	movlb	1	; () banked
  1640  0027F8  0E01               	movlw	high _dataString	;volatile
  1641  0027FA  0100               	movlb	0	; () banked
  1642  0027FC  6FE2               	movwf	(F32_writeFile@dataString+1)& (0+255),b
  1643  0027FE  0101               	movlb	1	; () banked
  1644  002800  0E14               	movlw	low _dataString	;volatile
  1645  002802  0100               	movlb	0	; () banked
  1646  002804  6FE1               	movwf	F32_writeFile@dataString& (0+255),b
  1647  002806  EC7F  F008         	call	_F32_writeFile	;wreg free
  1648  00280A  0100               	movlb	0	; () banked
  1649  00280C  6FED               	movwf	main@error& (0+255),b
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;main.c: 128: if (error)
  1653  00280E  0100               	movlb	0	; () banked
  1654  002810  51ED               	movf	main@error& (0+255),w,b
  1655  002812  A4D8               	btfss	status,2,c
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;main.c: 129: blinkErrorLED();
  1659  002814  EC64  F01F         	call	_blinkErrorLED	;wreg free
  1660                           
  1661                           ;main.c: 131: dataString[38] = '1';
  1662  002818  0E31               	movlw	49
  1663  00281A  0101               	movlb	1	; () banked
  1664  00281C  6F3A               	movwf	(_dataString+38)& (0+255),b	;volatile
  1665                           
  1666                           ; BSR set to: 1
  1667                           ;main.c: 133: error = F32_writeFile(fileName, (UINT8 *) dataString);
  1668  00281E  0101               	movlb	1	; () banked
  1669  002820  0E01               	movlw	high _fileName
  1670  002822  0100               	movlb	0	; () banked
  1671  002824  6FE0               	movwf	(F32_writeFile@fileName+1)& (0+255),b
  1672  002826  0101               	movlb	1	; () banked
  1673  002828  0EB6               	movlw	low _fileName
  1674  00282A  0100               	movlb	0	; () banked
  1675  00282C  6FDF               	movwf	F32_writeFile@fileName& (0+255),b
  1676  00282E  0101               	movlb	1	; () banked
  1677  002830  0E01               	movlw	high _dataString	;volatile
  1678  002832  0100               	movlb	0	; () banked
  1679  002834  6FE2               	movwf	(F32_writeFile@dataString+1)& (0+255),b
  1680  002836  0101               	movlb	1	; () banked
  1681  002838  0E14               	movlw	low _dataString	;volatile
  1682  00283A  0100               	movlb	0	; () banked
  1683  00283C  6FE1               	movwf	F32_writeFile@dataString& (0+255),b
  1684  00283E  EC7F  F008         	call	_F32_writeFile	;wreg free
  1685  002842  0100               	movlb	0	; () banked
  1686  002844  6FED               	movwf	main@error& (0+255),b
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;main.c: 134: if (error)
  1690  002846  0100               	movlb	0	; () banked
  1691  002848  51ED               	movf	main@error& (0+255),w,b
  1692  00284A  A4D8               	btfss	status,2,c
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;main.c: 135: blinkErrorLED();
  1696  00284C  EC64  F01F         	call	_blinkErrorLED	;wreg free
  1697                           
  1698                           ;main.c: 137: dataString[38] = '2';
  1699  002850  0E32               	movlw	50
  1700  002852  0101               	movlb	1	; () banked
  1701  002854  6F3A               	movwf	(_dataString+38)& (0+255),b	;volatile
  1702                           
  1703                           ; BSR set to: 1
  1704                           ;main.c: 139: error = F32_writeFile(fileName, (UINT8 *) dataString);
  1705  002856  0101               	movlb	1	; () banked
  1706  002858  0E01               	movlw	high _fileName
  1707  00285A  0100               	movlb	0	; () banked
  1708  00285C  6FE0               	movwf	(F32_writeFile@fileName+1)& (0+255),b
  1709  00285E  0101               	movlb	1	; () banked
  1710  002860  0EB6               	movlw	low _fileName
  1711  002862  0100               	movlb	0	; () banked
  1712  002864  6FDF               	movwf	F32_writeFile@fileName& (0+255),b
  1713  002866  0101               	movlb	1	; () banked
  1714  002868  0E01               	movlw	high _dataString	;volatile
  1715  00286A  0100               	movlb	0	; () banked
  1716  00286C  6FE2               	movwf	(F32_writeFile@dataString+1)& (0+255),b
  1717  00286E  0101               	movlb	1	; () banked
  1718  002870  0E14               	movlw	low _dataString	;volatile
  1719  002872  0100               	movlb	0	; () banked
  1720  002874  6FE1               	movwf	F32_writeFile@dataString& (0+255),b
  1721  002876  EC7F  F008         	call	_F32_writeFile	;wreg free
  1722  00287A  0100               	movlb	0	; () banked
  1723  00287C  6FED               	movwf	main@error& (0+255),b
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;main.c: 140: if (error)
  1727  00287E  0100               	movlb	0	; () banked
  1728  002880  51ED               	movf	main@error& (0+255),w,b
  1729  002882  A4D8               	btfss	status,2,c
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;main.c: 141: blinkErrorLED();
  1733  002884  EC64  F01F         	call	_blinkErrorLED	;wreg free
  1734                           
  1735                           ;main.c: 143: dataString[38] = '3';
  1736  002888  0E33               	movlw	51
  1737  00288A  0101               	movlb	1	; () banked
  1738  00288C  6F3A               	movwf	(_dataString+38)& (0+255),b	;volatile
  1739                           
  1740                           ; BSR set to: 1
  1741                           ;main.c: 145: error = F32_writeFile(fileName, (UINT8 *) dataString);
  1742  00288E  0101               	movlb	1	; () banked
  1743  002890  0E01               	movlw	high _fileName
  1744  002892  0100               	movlb	0	; () banked
  1745  002894  6FE0               	movwf	(F32_writeFile@fileName+1)& (0+255),b
  1746  002896  0101               	movlb	1	; () banked
  1747  002898  0EB6               	movlw	low _fileName
  1748  00289A  0100               	movlb	0	; () banked
  1749  00289C  6FDF               	movwf	F32_writeFile@fileName& (0+255),b
  1750  00289E  0101               	movlb	1	; () banked
  1751  0028A0  0E01               	movlw	high _dataString	;volatile
  1752  0028A2  0100               	movlb	0	; () banked
  1753  0028A4  6FE2               	movwf	(F32_writeFile@dataString+1)& (0+255),b
  1754  0028A6  0101               	movlb	1	; () banked
  1755  0028A8  0E14               	movlw	low _dataString	;volatile
  1756  0028AA  0100               	movlb	0	; () banked
  1757  0028AC  6FE1               	movwf	F32_writeFile@dataString& (0+255),b
  1758  0028AE  EC7F  F008         	call	_F32_writeFile	;wreg free
  1759  0028B2  0100               	movlb	0	; () banked
  1760  0028B4  6FED               	movwf	main@error& (0+255),b
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;main.c: 146: if (error)
  1764  0028B6  0100               	movlb	0	; () banked
  1765  0028B8  51ED               	movf	main@error& (0+255),w,b
  1766  0028BA  A4D8               	btfss	status,2,c
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;main.c: 147: blinkErrorLED();
  1770  0028BC  EC64  F01F         	call	_blinkErrorLED	;wreg free
  1771                           
  1772                           ;main.c: 149: dataString[38] = '4';
  1773  0028C0  0E34               	movlw	52
  1774  0028C2  0101               	movlb	1	; () banked
  1775  0028C4  6F3A               	movwf	(_dataString+38)& (0+255),b	;volatile
  1776                           
  1777                           ; BSR set to: 1
  1778                           ;main.c: 151: error = F32_writeFile(fileName, (UINT8 *) dataString);
  1779  0028C6  0101               	movlb	1	; () banked
  1780  0028C8  0E01               	movlw	high _fileName
  1781  0028CA  0100               	movlb	0	; () banked
  1782  0028CC  6FE0               	movwf	(F32_writeFile@fileName+1)& (0+255),b
  1783  0028CE  0101               	movlb	1	; () banked
  1784  0028D0  0EB6               	movlw	low _fileName
  1785  0028D2  0100               	movlb	0	; () banked
  1786  0028D4  6FDF               	movwf	F32_writeFile@fileName& (0+255),b
  1787  0028D6  0101               	movlb	1	; () banked
  1788  0028D8  0E01               	movlw	high _dataString	;volatile
  1789  0028DA  0100               	movlb	0	; () banked
  1790  0028DC  6FE2               	movwf	(F32_writeFile@dataString+1)& (0+255),b
  1791  0028DE  0101               	movlb	1	; () banked
  1792  0028E0  0E14               	movlw	low _dataString	;volatile
  1793  0028E2  0100               	movlb	0	; () banked
  1794  0028E4  6FE1               	movwf	F32_writeFile@dataString& (0+255),b
  1795  0028E6  EC7F  F008         	call	_F32_writeFile	;wreg free
  1796  0028EA  0100               	movlb	0	; () banked
  1797  0028EC  6FED               	movwf	main@error& (0+255),b
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;main.c: 152: if (error)
  1801  0028EE  0100               	movlb	0	; () banked
  1802  0028F0  51ED               	movf	main@error& (0+255),w,b
  1803  0028F2  A4D8               	btfss	status,2,c
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;main.c: 153: blinkErrorLED();
  1807  0028F4  EC64  F01F         	call	_blinkErrorLED	;wreg free
  1808                           
  1809                           ;main.c: 155: dataString[38] = '5';
  1810  0028F8  0E35               	movlw	53
  1811  0028FA  0101               	movlb	1	; () banked
  1812  0028FC  6F3A               	movwf	(_dataString+38)& (0+255),b	;volatile
  1813                           
  1814                           ; BSR set to: 1
  1815                           ;main.c: 157: error = F32_writeFile(fileName, (UINT8 *) dataString);
  1816  0028FE  0101               	movlb	1	; () banked
  1817  002900  0E01               	movlw	high _fileName
  1818  002902  0100               	movlb	0	; () banked
  1819  002904  6FE0               	movwf	(F32_writeFile@fileName+1)& (0+255),b
  1820  002906  0101               	movlb	1	; () banked
  1821  002908  0EB6               	movlw	low _fileName
  1822  00290A  0100               	movlb	0	; () banked
  1823  00290C  6FDF               	movwf	F32_writeFile@fileName& (0+255),b
  1824  00290E  0101               	movlb	1	; () banked
  1825  002910  0E01               	movlw	high _dataString	;volatile
  1826  002912  0100               	movlb	0	; () banked
  1827  002914  6FE2               	movwf	(F32_writeFile@dataString+1)& (0+255),b
  1828  002916  0101               	movlb	1	; () banked
  1829  002918  0E14               	movlw	low _dataString	;volatile
  1830  00291A  0100               	movlb	0	; () banked
  1831  00291C  6FE1               	movwf	F32_writeFile@dataString& (0+255),b
  1832  00291E  EC7F  F008         	call	_F32_writeFile	;wreg free
  1833  002922  0100               	movlb	0	; () banked
  1834  002924  6FED               	movwf	main@error& (0+255),b
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;main.c: 158: if (error)
  1838  002926  0100               	movlb	0	; () banked
  1839  002928  51ED               	movf	main@error& (0+255),w,b
  1840  00292A  A4D8               	btfss	status,2,c
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;main.c: 159: blinkErrorLED();
  1844  00292C  EC64  F01F         	call	_blinkErrorLED	;wreg free
  1845                           
  1846                           ;main.c: 161: dataString[38] = '6';
  1847  002930  0E36               	movlw	54
  1848  002932  0101               	movlb	1	; () banked
  1849  002934  6F3A               	movwf	(_dataString+38)& (0+255),b	;volatile
  1850                           
  1851                           ; BSR set to: 1
  1852                           ;main.c: 163: error = F32_writeFile(fileName, (UINT8 *) dataString);
  1853  002936  0101               	movlb	1	; () banked
  1854  002938  0E01               	movlw	high _fileName
  1855  00293A  0100               	movlb	0	; () banked
  1856  00293C  6FE0               	movwf	(F32_writeFile@fileName+1)& (0+255),b
  1857  00293E  0101               	movlb	1	; () banked
  1858  002940  0EB6               	movlw	low _fileName
  1859  002942  0100               	movlb	0	; () banked
  1860  002944  6FDF               	movwf	F32_writeFile@fileName& (0+255),b
  1861  002946  0101               	movlb	1	; () banked
  1862  002948  0E01               	movlw	high _dataString	;volatile
  1863  00294A  0100               	movlb	0	; () banked
  1864  00294C  6FE2               	movwf	(F32_writeFile@dataString+1)& (0+255),b
  1865  00294E  0101               	movlb	1	; () banked
  1866  002950  0E14               	movlw	low _dataString	;volatile
  1867  002952  0100               	movlb	0	; () banked
  1868  002954  6FE1               	movwf	F32_writeFile@dataString& (0+255),b
  1869  002956  EC7F  F008         	call	_F32_writeFile	;wreg free
  1870  00295A  0100               	movlb	0	; () banked
  1871  00295C  6FED               	movwf	main@error& (0+255),b
  1872                           
  1873                           ; BSR set to: 0
  1874                           ;main.c: 164: if (error)
  1875  00295E  0100               	movlb	0	; () banked
  1876  002960  51ED               	movf	main@error& (0+255),w,b
  1877  002962  A4D8               	btfss	status,2,c
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;main.c: 165: blinkErrorLED();
  1881  002964  EC64  F01F         	call	_blinkErrorLED	;wreg free
  1882                           
  1883                           ;main.c: 167: dataString[38] = '7';
  1884  002968  0E37               	movlw	55
  1885  00296A  0101               	movlb	1	; () banked
  1886  00296C  6F3A               	movwf	(_dataString+38)& (0+255),b	;volatile
  1887                           
  1888                           ; BSR set to: 1
  1889                           ;main.c: 169: error = F32_writeFile(fileName, (UINT8 *) dataString);
  1890  00296E  0101               	movlb	1	; () banked
  1891  002970  0E01               	movlw	high _fileName
  1892  002972  0100               	movlb	0	; () banked
  1893  002974  6FE0               	movwf	(F32_writeFile@fileName+1)& (0+255),b
  1894  002976  0101               	movlb	1	; () banked
  1895  002978  0EB6               	movlw	low _fileName
  1896  00297A  0100               	movlb	0	; () banked
  1897  00297C  6FDF               	movwf	F32_writeFile@fileName& (0+255),b
  1898  00297E  0101               	movlb	1	; () banked
  1899  002980  0E01               	movlw	high _dataString	;volatile
  1900  002982  0100               	movlb	0	; () banked
  1901  002984  6FE2               	movwf	(F32_writeFile@dataString+1)& (0+255),b
  1902  002986  0101               	movlb	1	; () banked
  1903  002988  0E14               	movlw	low _dataString	;volatile
  1904  00298A  0100               	movlb	0	; () banked
  1905  00298C  6FE1               	movwf	F32_writeFile@dataString& (0+255),b
  1906  00298E  EC7F  F008         	call	_F32_writeFile	;wreg free
  1907  002992  0100               	movlb	0	; () banked
  1908  002994  6FED               	movwf	main@error& (0+255),b
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;main.c: 170: if (error)
  1912  002996  0100               	movlb	0	; () banked
  1913  002998  51ED               	movf	main@error& (0+255),w,b
  1914  00299A  A4D8               	btfss	status,2,c
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;main.c: 171: blinkErrorLED();
  1918  00299C  EC64  F01F         	call	_blinkErrorLED	;wreg free
  1919                           
  1920                           ;main.c: 173: dataString[38] = '8';
  1921  0029A0  0E38               	movlw	56
  1922  0029A2  0101               	movlb	1	; () banked
  1923  0029A4  6F3A               	movwf	(_dataString+38)& (0+255),b	;volatile
  1924                           
  1925                           ; BSR set to: 1
  1926                           ;main.c: 175: error = F32_writeFile(fileName, (UINT8 *) dataString);
  1927  0029A6  0101               	movlb	1	; () banked
  1928  0029A8  0E01               	movlw	high _fileName
  1929  0029AA  0100               	movlb	0	; () banked
  1930  0029AC  6FE0               	movwf	(F32_writeFile@fileName+1)& (0+255),b
  1931  0029AE  0101               	movlb	1	; () banked
  1932  0029B0  0EB6               	movlw	low _fileName
  1933  0029B2  0100               	movlb	0	; () banked
  1934  0029B4  6FDF               	movwf	F32_writeFile@fileName& (0+255),b
  1935  0029B6  0101               	movlb	1	; () banked
  1936  0029B8  0E01               	movlw	high _dataString	;volatile
  1937  0029BA  0100               	movlb	0	; () banked
  1938  0029BC  6FE2               	movwf	(F32_writeFile@dataString+1)& (0+255),b
  1939  0029BE  0101               	movlb	1	; () banked
  1940  0029C0  0E14               	movlw	low _dataString	;volatile
  1941  0029C2  0100               	movlb	0	; () banked
  1942  0029C4  6FE1               	movwf	F32_writeFile@dataString& (0+255),b
  1943  0029C6  EC7F  F008         	call	_F32_writeFile	;wreg free
  1944  0029CA  0100               	movlb	0	; () banked
  1945  0029CC  6FED               	movwf	main@error& (0+255),b
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;main.c: 176: if (error)
  1949  0029CE  0100               	movlb	0	; () banked
  1950  0029D0  51ED               	movf	main@error& (0+255),w,b
  1951  0029D2  A4D8               	btfss	status,2,c
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;main.c: 177: blinkErrorLED();
  1955  0029D4  EC64  F01F         	call	_blinkErrorLED	;wreg free
  1956                           
  1957                           ;main.c: 179: LATCbits.LATC2 = 0;
  1958  0029D8  948B               	bcf	3979,2,c	;volatile
  1959  0029DA                     l475:
  1960  0029DA  D7FF               	goto	l475
  1961  0029DC                     __end_of_main:
  1962                           	opt stack 0
  1963                           tblptru	equ	0xFF8
  1964                           tblptrh	equ	0xFF7
  1965                           tblptrl	equ	0xFF6
  1966                           tablat	equ	0xFF5
  1967                           prodh	equ	0xFF4
  1968                           prodl	equ	0xFF3
  1969                           postinc0	equ	0xFEE
  1970                           wreg	equ	0xFE8
  1971                           indf1	equ	0xFE7
  1972                           postdec1	equ	0xFE5
  1973                           fsr1h	equ	0xFE2
  1974                           fsr1l	equ	0xFE1
  1975                           indf2	equ	0xFDF
  1976                           fsr2h	equ	0xFDA
  1977                           fsr2l	equ	0xFD9
  1978                           status	equ	0xFD8
  1979                           
  1980 ;; *************** function _blinkErrorLED *****************
  1981 ;; Defined at:
  1982 ;;		line 47 in file "main.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;		None
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;		None
  1987 ;; Return value:  Size  Location     Type
  1988 ;;		None               void
  1989 ;; Registers used:
  1990 ;;		wreg, cstack
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2000 ;;Total ram usage:        0 bytes
  2001 ;; Hardware stack levels used:    1
  2002 ;; Hardware stack levels required when called:    3
  2003 ;; This function calls:
  2004 ;;		_Delay10KTCYx
  2005 ;; This function is called by:
  2006 ;;		_main
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text1
  2011  003EC8                     __ptext1:
  2012                           	opt stack 0
  2013  003EC8                     _blinkErrorLED:
  2014                           	opt stack 27
  2015  003EC8                     l443:
  2016                           
  2017                           ;main.c: 49: LATCbits.LATC2 = ~LATCbits.LATC2;
  2018  003EC8  748B               	btg	3979,2,c	;volatile
  2019                           
  2020                           ;main.c: 50: Delay10KTCYx(160);
  2021  003ECA  0EA0               	movlw	160
  2022  003ECC  EC42  F01F         	call	_Delay10KTCYx
  2023  003ED0  D7FB               	goto	l443
  2024  003ED2                     __end_of_blinkErrorLED:
  2025                           	opt stack 0
  2026                           tblptru	equ	0xFF8
  2027                           tblptrh	equ	0xFF7
  2028                           tblptrl	equ	0xFF6
  2029                           tablat	equ	0xFF5
  2030                           prodh	equ	0xFF4
  2031                           prodl	equ	0xFF3
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           indf1	equ	0xFE7
  2035                           postdec1	equ	0xFE5
  2036                           fsr1h	equ	0xFE2
  2037                           fsr1l	equ	0xFE1
  2038                           indf2	equ	0xFDF
  2039                           fsr2h	equ	0xFDA
  2040                           fsr2l	equ	0xFD9
  2041                           status	equ	0xFD8
  2042                           
  2043 ;; *************** function _Delay10KTCYx *****************
  2044 ;; Defined at:
  2045 ;;		line 8 in file "/opt/microchip/xc8/v1.33/sources/pic18/d10ktcyx.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;  unit            1    wreg     unsigned char 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;  unit            1   32[COMRAM] unsigned char 
  2050 ;; Return value:  Size  Location     Type
  2051 ;;		None               void
  2052 ;; Registers used:
  2053 ;;		wreg
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2060 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2061 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2062 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;Total ram usage:        2 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    2
  2066 ;; This function calls:
  2067 ;;		Nothing
  2068 ;; This function is called by:
  2069 ;;		_blinkErrorLED
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text2
  2074  003E84                     __ptext2:
  2075                           	opt stack 0
  2076  003E84                     _Delay10KTCYx:
  2077                           	opt stack 27
  2078                           
  2079                           ;incstack = 0
  2080                           ;Delay10KTCYx@unit stored from wreg
  2081  003E84  6E21               	movwf	Delay10KTCYx@unit,c
  2082  003E86                     l717:
  2083  003E86  0E0D               	movlw	13
  2084  003E88  6E20               	movwf	??_Delay10KTCYx& (0+255),c
  2085  003E8A  0EFC               	movlw	252
  2086  003E8C                     u5157:
  2087  003E8C  2EE8               	decfsz	wreg,f,c
  2088  003E8E  D7FE               	goto	u5157
  2089  003E90  2E20               	decfsz	??_Delay10KTCYx& (0+255),f,c
  2090  003E92  D7FC               	goto	u5157
  2091  003E94  2E21               	decfsz	Delay10KTCYx@unit,f,c
  2092  003E96  D7F7               	goto	l717
  2093  003E98  0012               	return	
  2094  003E9A                     __end_of_Delay10KTCYx:
  2095                           	opt stack 0
  2096                           tblptru	equ	0xFF8
  2097                           tblptrh	equ	0xFF7
  2098                           tblptrl	equ	0xFF6
  2099                           tablat	equ	0xFF5
  2100                           prodh	equ	0xFF4
  2101                           prodl	equ	0xFF3
  2102                           postinc0	equ	0xFEE
  2103                           wreg	equ	0xFE8
  2104                           indf1	equ	0xFE7
  2105                           postdec1	equ	0xFE5
  2106                           fsr1h	equ	0xFE2
  2107                           fsr1l	equ	0xFE1
  2108                           indf2	equ	0xFDF
  2109                           fsr2h	equ	0xFDA
  2110                           fsr2l	equ	0xFD9
  2111                           status	equ	0xFD8
  2112                           
  2113 ;; *************** function _USART_HW_putstr *****************
  2114 ;; Defined at:
  2115 ;;		line 55 in file "../my_lib.X/rosso_hwserial.h"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;  s               2   32[COMRAM] PTR unsigned char 
  2118 ;;		 -> err3(19), err4(28), msg3(45), msg2(31), 
  2119 ;;		 -> msg1(45), err2(31), err1(25), test_start(28), 
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;  c               1    0[BANK0 ] unsigned char 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;		None               void
  2124 ;; Registers used:
  2125 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2131 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2132 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;Total ram usage:        3 bytes
  2136 ;; Hardware stack levels used:    1
  2137 ;; Hardware stack levels required when called:    3
  2138 ;; This function calls:
  2139 ;;		_USART_HW_write
  2140 ;; This function is called by:
  2141 ;;		_main
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text3
  2146  003E46                     __ptext3:
  2147                           	opt stack 0
  2148  003E46                     _USART_HW_putstr:
  2149                           	opt stack 27
  2150                           
  2151                           ;rosso_hwserial.h: 56: UINT8 c;
  2152                           ;rosso_hwserial.h: 57: while ((c = *s++))
  2153                           
  2154                           ;incstack = 0
  2155  003E46  D004               	goto	l4100
  2156  003E48                     l4098:
  2157                           
  2158                           ;rosso_hwserial.h: 58: USART_HW_write(c);
  2159  003E48  0100               	movlb	0	; () banked
  2160  003E4A  5160               	movf	USART_HW_putstr@c& (0+255),w,b
  2161  003E4C  EC5E  F01F         	call	_USART_HW_write
  2162  003E50                     l4100:
  2163  003E50  C021  FFF6         	movff	USART_HW_putstr@s,tblptrl
  2164  003E54  C022  FFF7         	movff	USART_HW_putstr@s+1,tblptrh
  2165  003E58  4A21               	infsnz	USART_HW_putstr@s,f,c
  2166  003E5A  2A22               	incf	USART_HW_putstr@s+1,f,c
  2167  003E5C                     	if	0	;tblptru may be non-zero
  2168  003E5C                     	endif
  2169  003E5C                     	if	0	;tblptru may be non-zero
  2170  003E5C                     	endif
  2171  003E5C  0008               	tblrd		*
  2172  003E5E  0100               	movlb	0	; () banked
  2173  003E60  CFF5 F060          	movff	tablat,USART_HW_putstr@c
  2174  003E64  0100               	movlb	0	; () banked
  2175  003E66  6760               	tstfsz	USART_HW_putstr@c& (0+255),b
  2176  003E68  D7EF               	goto	l4098
  2177  003E6A  0012               	return	
  2178  003E6C                     __end_of_USART_HW_putstr:
  2179                           	opt stack 0
  2180                           tblptru	equ	0xFF8
  2181                           tblptrh	equ	0xFF7
  2182                           tblptrl	equ	0xFF6
  2183                           tablat	equ	0xFF5
  2184                           prodh	equ	0xFF4
  2185                           prodl	equ	0xFF3
  2186                           postinc0	equ	0xFEE
  2187                           wreg	equ	0xFE8
  2188                           indf1	equ	0xFE7
  2189                           postdec1	equ	0xFE5
  2190                           fsr1h	equ	0xFE2
  2191                           fsr1l	equ	0xFE1
  2192                           indf2	equ	0xFDF
  2193                           fsr2h	equ	0xFDA
  2194                           fsr2l	equ	0xFD9
  2195                           status	equ	0xFD8
  2196                           
  2197 ;; *************** function _USART_HW_write *****************
  2198 ;; Defined at:
  2199 ;;		line 50 in file "../my_lib.X/rosso_hwserial.h"
  2200 ;; Parameters:    Size  Location     Type
  2201 ;;  data            1    wreg     unsigned char 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  data            1   31[COMRAM] unsigned char 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;		None               void
  2206 ;; Registers used:
  2207 ;;		wreg
  2208 ;; Tracked objects:
  2209 ;;		On entry : 0/0
  2210 ;;		On exit  : 0/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2217 ;;Total ram usage:        1 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; Hardware stack levels required when called:    2
  2220 ;; This function calls:
  2221 ;;		Nothing
  2222 ;; This function is called by:
  2223 ;;		_USART_HW_putstr
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text4
  2228  003EBC                     __ptext4:
  2229                           	opt stack 0
  2230  003EBC                     _USART_HW_write:
  2231                           	opt stack 27
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;incstack = 0
  2235                           ;USART_HW_write@data stored from wreg
  2236  003EBC  6E20               	movwf	USART_HW_write@data,c
  2237  003EBE                     l98:
  2238  003EBE  A89E               	btfss	3998,4,c	;volatile
  2239  003EC0  D7FE               	goto	l98
  2240                           
  2241                           ;rosso_hwserial.h: 52: TXREG = data;
  2242  003EC2  C020  FFAD         	movff	USART_HW_write@data,4013	;volatile
  2243  003EC6  0012               	return	
  2244  003EC8                     __end_of_USART_HW_write:
  2245                           	opt stack 0
  2246                           tblptru	equ	0xFF8
  2247                           tblptrh	equ	0xFF7
  2248                           tblptrl	equ	0xFF6
  2249                           tablat	equ	0xFF5
  2250                           prodh	equ	0xFF4
  2251                           prodl	equ	0xFF3
  2252                           postinc0	equ	0xFEE
  2253                           wreg	equ	0xFE8
  2254                           indf1	equ	0xFE7
  2255                           postdec1	equ	0xFE5
  2256                           fsr1h	equ	0xFE2
  2257                           fsr1l	equ	0xFE1
  2258                           indf2	equ	0xFDF
  2259                           fsr2h	equ	0xFDA
  2260                           fsr2l	equ	0xFD9
  2261                           status	equ	0xFD8
  2262                           
  2263 ;; *************** function _USART_HW_init *****************
  2264 ;; Defined at:
  2265 ;;		line 22 in file "../my_lib.X/rosso_hwserial.h"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;		None
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;  usart_div       2    0[BANK0 ] unsigned short 
  2270 ;; Return value:  Size  Location     Type
  2271 ;;		None               void
  2272 ;; Registers used:
  2273 ;;		wreg, status,2
  2274 ;; Tracked objects:
  2275 ;;		On entry : 0/0
  2276 ;;		On exit  : 0/0
  2277 ;;		Unchanged: 0/0
  2278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2280 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2281 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2282 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2283 ;;Total ram usage:        5 bytes
  2284 ;; Hardware stack levels used:    1
  2285 ;; Hardware stack levels required when called:    2
  2286 ;; This function calls:
  2287 ;;		Nothing
  2288 ;; This function is called by:
  2289 ;;		_main
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           	psect	text5
  2294  003E0E                     __ptext5:
  2295                           	opt stack 0
  2296  003E0E                     _USART_HW_init:
  2297                           	opt stack 28
  2298                           
  2299                           ;rosso_hwserial.h: 23: UINT16 usart_div = ((64000000 / 19200) / 4) - 1;
  2300                           
  2301                           ;incstack = 0
  2302  003E0E  0E03               	movlw	3
  2303  003E10  0100               	movlb	0	; () banked
  2304  003E12  6F61               	movwf	(USART_HW_init@usart_div+1)& (0+255),b
  2305  003E14  0E40               	movlw	64
  2306  003E16  0100               	movlb	0	; () banked
  2307  003E18  6F60               	movwf	USART_HW_init@usart_div& (0+255),b
  2308                           
  2309                           ;rosso_hwserial.h: 24: TXSTA = 0b00000000;
  2310  003E1A  0E00               	movlw	0
  2311  003E1C  6EAC               	movwf	4012,c	;volatile
  2312                           
  2313                           ;rosso_hwserial.h: 25: RCSTA = 0b00000000;
  2314  003E1E  0E00               	movlw	0
  2315  003E20  6EAB               	movwf	4011,c	;volatile
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;rosso_hwserial.h: 27: BAUDCONbits.BRG16 = TRUE;
  2319  003E22  86B8               	bsf	4024,3,c	;volatile
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;rosso_hwserial.h: 28: TXSTAbits.BRGH = TRUE;
  2323  003E24  84AC               	bsf	4012,2,c	;volatile
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;rosso_hwserial.h: 29: SPBRG = (UINT8) usart_div;
  2327  003E26  C060  FFAF         	movff	USART_HW_init@usart_div,4015	;volatile
  2328                           
  2329                           ;rosso_hwserial.h: 30: SPBRGH = (UINT8) (usart_div >> 8);
  2330  003E2A  0100               	movlb	0	; () banked
  2331  003E2C  C061  F020         	movff	USART_HW_init@usart_div+1,??_USART_HW_init
  2332  003E30  C020  F021         	movff	??_USART_HW_init,??_USART_HW_init+1
  2333  003E34  6A22               	clrf	(??_USART_HW_init+2)& (0+255),c
  2334  003E36  5021               	movf	??_USART_HW_init+1,w,c
  2335  003E38  6EB0               	movwf	4016,c	;volatile
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;rosso_hwserial.h: 33: PIE1bits.RCIE = FALSE;
  2339  003E3A  9A9D               	bcf	3997,5,c	;volatile
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;rosso_hwserial.h: 34: PIE1bits.TXIE = FALSE;
  2343  003E3C  989D               	bcf	3997,4,c	;volatile
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;rosso_hwserial.h: 37: TXSTAbits.TXEN = TRUE;
  2347  003E3E  8AAC               	bsf	4012,5,c	;volatile
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;rosso_hwserial.h: 39: RCSTAbits.SPEN = 1;
  2351  003E40  8EAB               	bsf	4011,7,c	;volatile
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;rosso_hwserial.h: 40: RCSTAbits.CREN = 1;
  2355  003E42  88AB               	bsf	4011,4,c	;volatile
  2356                           
  2357                           ; BSR set to: 0
  2358  003E44  0012               	return	
  2359  003E46                     __end_of_USART_HW_init:
  2360                           	opt stack 0
  2361                           tblptru	equ	0xFF8
  2362                           tblptrh	equ	0xFF7
  2363                           tblptrl	equ	0xFF6
  2364                           tablat	equ	0xFF5
  2365                           prodh	equ	0xFF4
  2366                           prodl	equ	0xFF3
  2367                           postinc0	equ	0xFEE
  2368                           wreg	equ	0xFE8
  2369                           indf1	equ	0xFE7
  2370                           postdec1	equ	0xFE5
  2371                           fsr1h	equ	0xFE2
  2372                           fsr1l	equ	0xFE1
  2373                           indf2	equ	0xFDF
  2374                           fsr2h	equ	0xFDA
  2375                           fsr2l	equ	0xFD9
  2376                           status	equ	0xFD8
  2377                           
  2378 ;; *************** function _SPI2_init *****************
  2379 ;; Defined at:
  2380 ;;		line 51 in file "../my_lib.X/rosso_hwspi2.h"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;  spi_rate        1    wreg     enum E8073
  2383 ;;  bus_mode        1   31[COMRAM] enum E8067
  2384 ;;  smp_phase       1   32[COMRAM] enum E8063
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;  spi_rate        1   33[COMRAM] enum E8073
  2387 ;; Return value:  Size  Location     Type
  2388 ;;		None               void
  2389 ;; Registers used:
  2390 ;;		wreg, status,2, status,0
  2391 ;; Tracked objects:
  2392 ;;		On entry : 0/0
  2393 ;;		On exit  : 0/0
  2394 ;;		Unchanged: 0/0
  2395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2396 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2397 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;Total ram usage:        3 bytes
  2401 ;; Hardware stack levels used:    1
  2402 ;; Hardware stack levels required when called:    2
  2403 ;; This function calls:
  2404 ;;		Nothing
  2405 ;; This function is called by:
  2406 ;;		_main
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           	psect	text6
  2411  003D72                     __ptext6:
  2412                           	opt stack 0
  2413  003D72                     _SPI2_init:
  2414                           	opt stack 28
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;incstack = 0
  2418                           ;SPI2_init@spi_rate stored from wreg
  2419  003D72  6E22               	movwf	SPI2_init@spi_rate,c
  2420                           
  2421                           ;rosso_hwspi2.h: 52: SSP2STAT &= 0x3F;
  2422  003D74  0E3F               	movlw	63
  2423  003D76  166D               	andwf	3949,f,c	;volatile
  2424                           
  2425                           ;rosso_hwspi2.h: 53: SSP2CON1 = 0x00;
  2426  003D78  0E00               	movlw	0
  2427  003D7A  6E6C               	movwf	3948,c	;volatile
  2428                           
  2429                           ;rosso_hwspi2.h: 54: SSP2CON1 |= spi_rate;
  2430  003D7C  5022               	movf	SPI2_init@spi_rate,w,c
  2431  003D7E  126C               	iorwf	3948,f,c	;volatile
  2432                           
  2433                           ;rosso_hwspi2.h: 55: SSP2STAT |= smp_phase;
  2434  003D80  5021               	movf	SPI2_init@smp_phase,w,c
  2435  003D82  126D               	iorwf	3949,f,c	;volatile
  2436                           
  2437                           ;rosso_hwspi2.h: 57: if(bus_mode == 0) SSP2STATbits.CKE = 1;
  2438  003D84  6620               	tstfsz	SPI2_init@bus_mode,c
  2439  003D86  D002               	goto	l2924
  2440  003D88  8C6D               	bsf	3949,6,c	;volatile
  2441  003D8A  D00A               	goto	l2932
  2442  003D8C                     l2924:
  2443                           
  2444                           ;rosso_hwspi2.h: 58: else if(bus_mode == 2){
  2445  003D8C  5020               	movf	SPI2_init@bus_mode,w,c
  2446  003D8E  0A02               	xorlw	2
  2447  003D90  A4D8               	btfss	status,2,c
  2448  003D92  D002               	goto	l2928
  2449                           
  2450                           ;rosso_hwspi2.h: 59: SSP2STATbits.CKE = 1;
  2451  003D94  8C6D               	bsf	3949,6,c	;volatile
  2452  003D96  D003               	goto	u2770
  2453  003D98                     l2928:
  2454                           
  2455                           ;rosso_hwspi2.h: 62: else if(bus_mode == 3) SSP2CON1bits.CKP = 1;
  2456  003D98  5020               	movf	SPI2_init@bus_mode,w,c
  2457  003D9A  0A03               	xorlw	3
  2458  003D9C  B4D8               	btfsc	status,2,c
  2459  003D9E                     u2770:
  2460  003D9E  886C               	bsf	3948,4,c	;volatile
  2461  003DA0                     l2932:
  2462                           
  2463                           ;rosso_hwspi2.h: 64: if(spi_rate == SLV_SSON){
  2464  003DA0  5022               	movf	SPI2_init@spi_rate,w,c
  2465  003DA2  0A04               	xorlw	4
  2466  003DA4  A4D8               	btfss	status,2,c
  2467  003DA6  D003               	goto	l2936
  2468                           
  2469                           ;rosso_hwspi2.h: 65: TRISDbits.RD0 = 1;
  2470  003DA8  8095               	bsf	3989,0,c	;volatile
  2471                           
  2472                           ;rosso_hwspi2.h: 66: TRISDbits.RD3 = 1;
  2473  003DAA  8695               	bsf	3989,3,c	;volatile
  2474                           
  2475                           ;rosso_hwspi2.h: 67: }
  2476  003DAC  D007               	goto	l122
  2477  003DAE                     l2936:
  2478                           
  2479                           ;rosso_hwspi2.h: 68: else if(spi_rate == SLV_SSOFF) TRISDbits.RD0 = 1;
  2480  003DAE  5022               	movf	SPI2_init@spi_rate,w,c
  2481  003DB0  0A05               	xorlw	5
  2482  003DB2  A4D8               	btfss	status,2,c
  2483  003DB4  D002               	goto	l123
  2484  003DB6  8095               	bsf	3989,0,c	;volatile
  2485  003DB8  D001               	goto	l122
  2486  003DBA                     l123:
  2487                           
  2488                           ;rosso_hwspi2.h: 69: else TRISDbits.RD0 = 0;
  2489  003DBA  9095               	bcf	3989,0,c	;volatile
  2490  003DBC                     l122:
  2491                           
  2492                           ;rosso_hwspi2.h: 70: TRISDbits.RD2 = 0;
  2493  003DBC  9495               	bcf	3989,2,c	;volatile
  2494                           
  2495                           ;rosso_hwspi2.h: 71: TRISDbits.RD1 = 1;
  2496  003DBE  8295               	bsf	3989,1,c	;volatile
  2497                           
  2498                           ;rosso_hwspi2.h: 72: SSP2CON1 |= 0b00100000;
  2499  003DC0  8A6C               	bsf	3948,5,c	;volatile
  2500  003DC2  0012               	return	
  2501  003DC4                     __end_of_SPI2_init:
  2502                           	opt stack 0
  2503                           tblptru	equ	0xFF8
  2504                           tblptrh	equ	0xFF7
  2505                           tblptrl	equ	0xFF6
  2506                           tablat	equ	0xFF5
  2507                           prodh	equ	0xFF4
  2508                           prodl	equ	0xFF3
  2509                           postinc0	equ	0xFEE
  2510                           wreg	equ	0xFE8
  2511                           indf1	equ	0xFE7
  2512                           postdec1	equ	0xFE5
  2513                           fsr1h	equ	0xFE2
  2514                           fsr1l	equ	0xFE1
  2515                           indf2	equ	0xFDF
  2516                           fsr2h	equ	0xFDA
  2517                           fsr2l	equ	0xFD9
  2518                           status	equ	0xFD8
  2519                           
  2520 ;; *************** function _SD_init *****************
  2521 ;; Defined at:
  2522 ;;		line 115 in file "../my_lib.X/rosso_sdcard.h"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;		None
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;  retry           2   15[BANK0 ] unsigned short 
  2527 ;;  response        1   14[BANK0 ] unsigned char 
  2528 ;;  i               1   13[BANK0 ] unsigned char 
  2529 ;;  SD_version      1   12[BANK0 ] unsigned char 
  2530 ;; Return value:  Size  Location     Type
  2531 ;;                  1    wreg      unsigned char 
  2532 ;; Registers used:
  2533 ;;		wreg, status,2, status,0, cstack
  2534 ;; Tracked objects:
  2535 ;;		On entry : 0/0
  2536 ;;		On exit  : 0/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2540 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;Total ram usage:        5 bytes
  2544 ;; Hardware stack levels used:    1
  2545 ;; Hardware stack levels required when called:    4
  2546 ;; This function calls:
  2547 ;;		_SD_sendCommand
  2548 ;;		_SPI2_write
  2549 ;; This function is called by:
  2550 ;;		_main
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text7
  2555  00345C                     __ptext7:
  2556                           	opt stack 0
  2557  00345C                     _SD_init:
  2558                           	opt stack 26
  2559                           
  2560                           ;rosso_sdcard.h: 116: UINT8 i, response, SD_version;
  2561                           ;rosso_sdcard.h: 117: UINT16 retry = 0;
  2562                           
  2563                           ;incstack = 0
  2564  00345C  0E00               	movlw	0
  2565  00345E  0100               	movlb	0	; () banked
  2566  003460  6F70               	movwf	(SD_init@retry+1)& (0+255),b
  2567  003462  0E00               	movlw	0
  2568  003464  0100               	movlb	0	; () banked
  2569  003466  6F6F               	movwf	SD_init@retry& (0+255),b
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;rosso_sdcard.h: 120: TRISBbits.RB0 = 0;
  2573  003468  9093               	bcf	3987,0,c	;volatile
  2574                           
  2575                           ;rosso_sdcard.h: 121: SD_cardType = 0;
  2576  00346A  0E00               	movlw	0
  2577  00346C  6E3E               	movwf	_SD_cardType,c	;volatile
  2578                           
  2579                           ;rosso_sdcard.h: 122: for (i = 0; i < 10; i++)
  2580  00346E  0E00               	movlw	0
  2581  003470  0100               	movlb	0	; () banked
  2582  003472  6F6D               	movwf	SD_init@i& (0+255),b
  2583  003474  D005               	goto	L5
  2584  003476                     l4110:
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;rosso_sdcard.h: 123: SPI2_write(0xff);
  2588  003476  0EFF               	movlw	255
  2589  003478  EC36  F01F         	call	_SPI2_write
  2590  00347C  0100               	movlb	0	; () banked
  2591  00347E  2B6D               	incf	SD_init@i& (0+255),f,b
  2592  003480                     L5:
  2593                           
  2594                           ; BSR set to: 0
  2595  003480  0E09               	movlw	9
  2596  003482  0100               	movlb	0	; () banked
  2597  003484  656D               	cpfsgt	SD_init@i& (0+255),b
  2598  003486  D7F7               	goto	l4110
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;rosso_sdcard.h: 124: {LATBbits.LATB0=0;};
  2602  003488  908A               	bcf	3978,0,c	;volatile
  2603  00348A                     l4116:
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;rosso_sdcard.h: 127: response = SD_sendCommand(0, 0);
  2607  00348A  0E00               	movlw	0
  2608  00348C  0100               	movlb	0	; () banked
  2609  00348E  6F60               	movwf	SD_sendCommand@arg& (0+255),b
  2610  003490  0E00               	movlw	0
  2611  003492  0100               	movlb	0	; () banked
  2612  003494  6F61               	movwf	(SD_sendCommand@arg+1)& (0+255),b
  2613  003496  0E00               	movlw	0
  2614  003498  0100               	movlb	0	; () banked
  2615  00349A  6F62               	movwf	(SD_sendCommand@arg+2)& (0+255),b
  2616  00349C  0E00               	movlw	0
  2617  00349E  0100               	movlb	0	; () banked
  2618  0034A0  6F63               	movwf	(SD_sendCommand@arg+3)& (0+255),b
  2619  0034A2  0E00               	movlw	0
  2620  0034A4  ECB6  F01B         	call	_SD_sendCommand
  2621  0034A8  0100               	movlb	0	; () banked
  2622  0034AA  6F6E               	movwf	SD_init@response& (0+255),b
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;rosso_sdcard.h: 128: retry++;
  2626  0034AC  0100               	movlb	0	; () banked
  2627  0034AE  4B6F               	infsnz	SD_init@retry& (0+255),f,b
  2628  0034B0  2B70               	incf	(SD_init@retry+1)& (0+255),f,b
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;rosso_sdcard.h: 129: if (retry > 0x20)
  2632  0034B2  0E21               	movlw	33
  2633  0034B4  0100               	movlb	0	; () banked
  2634  0034B6  5D6F               	subwf	SD_init@retry& (0+255),w,b
  2635  0034B8  0E00               	movlw	0
  2636  0034BA  0100               	movlb	0	; () banked
  2637  0034BC  5970               	subwfb	(SD_init@retry+1)& (0+255),w,b
  2638  0034BE  A0D8               	btfss	status,0,c
  2639  0034C0  D002               	goto	l4126
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;rosso_sdcard.h: 130: return 1;
  2643  0034C2  0E01               	movlw	1
  2644  0034C4  0012               	return	
  2645  0034C6                     l4126:
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;rosso_sdcard.h: 132: } while (response != 0x01);
  2649  0034C6  0100               	movlb	0	; () banked
  2650  0034C8  056E               	decf	SD_init@response& (0+255),w,b
  2651  0034CA  A4D8               	btfss	status,2,c
  2652  0034CC  D7DE               	goto	l4116
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;rosso_sdcard.h: 134: {LATBbits.LATB0=1;};
  2656  0034CE  808A               	bsf	3978,0,c	;volatile
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;rosso_sdcard.h: 135: SPI2_write(0xff);
  2660  0034D0  0EFF               	movlw	255
  2661  0034D2  EC36  F01F         	call	_SPI2_write
  2662                           
  2663                           ;rosso_sdcard.h: 136: SPI2_write(0xff);
  2664  0034D6  0EFF               	movlw	255
  2665  0034D8  EC36  F01F         	call	_SPI2_write
  2666                           
  2667                           ;rosso_sdcard.h: 138: retry = 0;
  2668  0034DC  0E00               	movlw	0
  2669  0034DE  0100               	movlb	0	; () banked
  2670  0034E0  6F70               	movwf	(SD_init@retry+1)& (0+255),b
  2671  0034E2  0E00               	movlw	0
  2672  0034E4  0100               	movlb	0	; () banked
  2673  0034E6  6F6F               	movwf	SD_init@retry& (0+255),b
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;rosso_sdcard.h: 140: SD_version = 2;
  2677  0034E8  0E02               	movlw	2
  2678  0034EA  0100               	movlb	0	; () banked
  2679  0034EC  6F6C               	movwf	SD_init@SD_version& (0+255),b
  2680  0034EE                     l4134:
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;rosso_sdcard.h: 143: response = SD_sendCommand(8, 0x000001AA);
  2684  0034EE  0EAA               	movlw	170
  2685  0034F0  0100               	movlb	0	; () banked
  2686  0034F2  6F60               	movwf	SD_sendCommand@arg& (0+255),b
  2687  0034F4  0E01               	movlw	1
  2688  0034F6  0100               	movlb	0	; () banked
  2689  0034F8  6F61               	movwf	(SD_sendCommand@arg+1)& (0+255),b
  2690  0034FA  0E00               	movlw	0
  2691  0034FC  0100               	movlb	0	; () banked
  2692  0034FE  6F62               	movwf	(SD_sendCommand@arg+2)& (0+255),b
  2693  003500  0E00               	movlw	0
  2694  003502  0100               	movlb	0	; () banked
  2695  003504  6F63               	movwf	(SD_sendCommand@arg+3)& (0+255),b
  2696  003506  0E08               	movlw	8
  2697  003508  ECB6  F01B         	call	_SD_sendCommand
  2698  00350C  0100               	movlb	0	; () banked
  2699  00350E  6F6E               	movwf	SD_init@response& (0+255),b
  2700                           
  2701                           ;rosso_sdcard.h: 144: retry++;
  2702  003510  0100               	movlb	0	; () banked
  2703  003512  4B6F               	infsnz	SD_init@retry& (0+255),f,b
  2704  003514  2B70               	incf	(SD_init@retry+1)& (0+255),f,b
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;rosso_sdcard.h: 145: if (retry > 0xfe) {
  2708  003516  0EFF               	movlw	255
  2709  003518  0100               	movlb	0	; () banked
  2710  00351A  5D6F               	subwf	SD_init@retry& (0+255),w,b
  2711  00351C  0E00               	movlw	0
  2712  00351E  0100               	movlb	0	; () banked
  2713  003520  5970               	subwfb	(SD_init@retry+1)& (0+255),w,b
  2714  003522  A0D8               	btfss	status,0,c
  2715  003524  D006               	goto	l4140
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;rosso_sdcard.h: 147: SD_version = 1;
  2719  003526  0E01               	movlw	1
  2720  003528  0100               	movlb	0	; () banked
  2721  00352A  6F6C               	movwf	SD_init@SD_version& (0+255),b
  2722                           
  2723                           ;rosso_sdcard.h: 148: SD_cardType = 1;
  2724  00352C  0E01               	movlw	1
  2725  00352E  6E3E               	movwf	_SD_cardType,c	;volatile
  2726                           
  2727                           ;rosso_sdcard.h: 149: break;
  2728  003530  D004               	goto	l4142
  2729  003532                     l4140:
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;rosso_sdcard.h: 150: }
  2733                           ;rosso_sdcard.h: 152: } while (response != 0x01);
  2734  003532  0100               	movlb	0	; () banked
  2735  003534  056E               	decf	SD_init@response& (0+255),w,b
  2736  003536  A4D8               	btfss	status,2,c
  2737  003538  D7DA               	goto	l4134
  2738  00353A                     l4142:
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;rosso_sdcard.h: 154: retry = 0;
  2742  00353A  0E00               	movlw	0
  2743  00353C  0100               	movlb	0	; () banked
  2744  00353E  6F70               	movwf	(SD_init@retry+1)& (0+255),b
  2745  003540  0E00               	movlw	0
  2746  003542  0100               	movlb	0	; () banked
  2747  003544  6F6F               	movwf	SD_init@retry& (0+255),b
  2748  003546                     l4144:
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;rosso_sdcard.h: 157: response = SD_sendCommand(55, 0);
  2752  003546  0E00               	movlw	0
  2753  003548  0100               	movlb	0	; () banked
  2754  00354A  6F60               	movwf	SD_sendCommand@arg& (0+255),b
  2755  00354C  0E00               	movlw	0
  2756  00354E  0100               	movlb	0	; () banked
  2757  003550  6F61               	movwf	(SD_sendCommand@arg+1)& (0+255),b
  2758  003552  0E00               	movlw	0
  2759  003554  0100               	movlb	0	; () banked
  2760  003556  6F62               	movwf	(SD_sendCommand@arg+2)& (0+255),b
  2761  003558  0E00               	movlw	0
  2762  00355A  0100               	movlb	0	; () banked
  2763  00355C  6F63               	movwf	(SD_sendCommand@arg+3)& (0+255),b
  2764  00355E  0E37               	movlw	55
  2765  003560  ECB6  F01B         	call	_SD_sendCommand
  2766  003564  0100               	movlb	0	; () banked
  2767  003566  6F6E               	movwf	SD_init@response& (0+255),b
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;rosso_sdcard.h: 158: response = SD_sendCommand(41, 0x40000000);
  2771  003568  0E00               	movlw	0
  2772  00356A  0100               	movlb	0	; () banked
  2773  00356C  6F60               	movwf	SD_sendCommand@arg& (0+255),b
  2774  00356E  0E00               	movlw	0
  2775  003570  0100               	movlb	0	; () banked
  2776  003572  6F61               	movwf	(SD_sendCommand@arg+1)& (0+255),b
  2777  003574  0E00               	movlw	0
  2778  003576  0100               	movlb	0	; () banked
  2779  003578  6F62               	movwf	(SD_sendCommand@arg+2)& (0+255),b
  2780  00357A  0E40               	movlw	64
  2781  00357C  0100               	movlb	0	; () banked
  2782  00357E  6F63               	movwf	(SD_sendCommand@arg+3)& (0+255),b
  2783  003580  0E29               	movlw	41
  2784  003582  ECB6  F01B         	call	_SD_sendCommand
  2785  003586  0100               	movlb	0	; () banked
  2786  003588  6F6E               	movwf	SD_init@response& (0+255),b
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;rosso_sdcard.h: 160: retry++;
  2790  00358A  0100               	movlb	0	; () banked
  2791  00358C  4B6F               	infsnz	SD_init@retry& (0+255),f,b
  2792  00358E  2B70               	incf	(SD_init@retry+1)& (0+255),f,b
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;rosso_sdcard.h: 161: if (retry > 0xfe) {
  2796  003590  0EFF               	movlw	255
  2797  003592  0100               	movlb	0	; () banked
  2798  003594  5D6F               	subwf	SD_init@retry& (0+255),w,b
  2799  003596  0E00               	movlw	0
  2800  003598  0100               	movlb	0	; () banked
  2801  00359A  5970               	subwfb	(SD_init@retry+1)& (0+255),w,b
  2802  00359C  A0D8               	btfss	status,0,c
  2803  00359E  D002               	goto	l178
  2804                           
  2805                           ; BSR set to: 0
  2806                           ;rosso_sdcard.h: 163: return 2;
  2807  0035A0  0E02               	movlw	2
  2808  0035A2  0012               	return	
  2809  0035A4                     l178:
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;rosso_sdcard.h: 164: }
  2813                           ;rosso_sdcard.h: 166: } while (response != 0x00);
  2814  0035A4  0100               	movlb	0	; () banked
  2815  0035A6  676E               	tstfsz	SD_init@response& (0+255),b
  2816  0035A8  D7CE               	goto	l4144
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;rosso_sdcard.h: 168: retry = 0;
  2820                           
  2821                           ; BSR set to: 0
  2822  0035AA  0E00               	movlw	0
  2823  0035AC  0100               	movlb	0	; () banked
  2824  0035AE  6F70               	movwf	(SD_init@retry+1)& (0+255),b
  2825  0035B0  0E00               	movlw	0
  2826  0035B2  0100               	movlb	0	; () banked
  2827  0035B4  6F6F               	movwf	SD_init@retry& (0+255),b
  2828                           
  2829                           ;rosso_sdcard.h: 169: SDHC_flag = 0;
  2830  0035B6  0E00               	movlw	0
  2831  0035B8  6E3D               	movwf	_SDHC_flag,c	;volatile
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;rosso_sdcard.h: 171: if (SD_version == 2) {
  2835  0035BA  0100               	movlb	0	; () banked
  2836  0035BC  516C               	movf	SD_init@SD_version& (0+255),w,b
  2837  0035BE  0A02               	xorlw	2
  2838  0035C0  A4D8               	btfss	status,2,c
  2839  0035C2  D029               	goto	l4174
  2840  0035C4                     l4160:
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;rosso_sdcard.h: 173: response = SD_sendCommand(58, 0);
  2844  0035C4  0E00               	movlw	0
  2845  0035C6  0100               	movlb	0	; () banked
  2846  0035C8  6F60               	movwf	SD_sendCommand@arg& (0+255),b
  2847  0035CA  0E00               	movlw	0
  2848  0035CC  0100               	movlb	0	; () banked
  2849  0035CE  6F61               	movwf	(SD_sendCommand@arg+1)& (0+255),b
  2850  0035D0  0E00               	movlw	0
  2851  0035D2  0100               	movlb	0	; () banked
  2852  0035D4  6F62               	movwf	(SD_sendCommand@arg+2)& (0+255),b
  2853  0035D6  0E00               	movlw	0
  2854  0035D8  0100               	movlb	0	; () banked
  2855  0035DA  6F63               	movwf	(SD_sendCommand@arg+3)& (0+255),b
  2856  0035DC  0E3A               	movlw	58
  2857  0035DE  ECB6  F01B         	call	_SD_sendCommand
  2858  0035E2  0100               	movlb	0	; () banked
  2859  0035E4  6F6E               	movwf	SD_init@response& (0+255),b
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;rosso_sdcard.h: 174: retry++;
  2863  0035E6  0100               	movlb	0	; () banked
  2864  0035E8  4B6F               	infsnz	SD_init@retry& (0+255),f,b
  2865  0035EA  2B70               	incf	(SD_init@retry+1)& (0+255),f,b
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;rosso_sdcard.h: 175: if (retry > 0xfe) {
  2869  0035EC  0EFF               	movlw	255
  2870  0035EE  0100               	movlb	0	; () banked
  2871  0035F0  5D6F               	subwf	SD_init@retry& (0+255),w,b
  2872  0035F2  0E00               	movlw	0
  2873  0035F4  0100               	movlb	0	; () banked
  2874  0035F6  5970               	subwfb	(SD_init@retry+1)& (0+255),w,b
  2875  0035F8  A0D8               	btfss	status,0,c
  2876  0035FA  D003               	goto	l182
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;rosso_sdcard.h: 177: SD_cardType = 0;
  2880  0035FC  0E00               	movlw	0
  2881  0035FE  6E3E               	movwf	_SD_cardType,c	;volatile
  2882                           
  2883                           ;rosso_sdcard.h: 178: break;
  2884  003600  D003               	goto	l4168
  2885  003602                     l182:
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;rosso_sdcard.h: 179: }
  2889                           ;rosso_sdcard.h: 181: } while (response != 0x00);
  2890  003602  0100               	movlb	0	; () banked
  2891  003604  676E               	tstfsz	SD_init@response& (0+255),b
  2892  003606  D7DE               	goto	l4160
  2893  003608                     l4168:
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;rosso_sdcard.h: 183: if (SDHC_flag == 1)
  2897  003608  043D               	decf	_SDHC_flag,w,c	;volatile
  2898  00360A  A4D8               	btfss	status,2,c
  2899  00360C  D002               	goto	l4172
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;rosso_sdcard.h: 184: SD_cardType = 2;
  2903  00360E  0E02               	movlw	2
  2904  003610  D001               	goto	L4
  2905  003612                     l4172:
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;rosso_sdcard.h: 185: else
  2909                           ;rosso_sdcard.h: 186: SD_cardType = 3;
  2910  003612  0E03               	movlw	3
  2911  003614                     L4:
  2912  003614  6E3E               	movwf	_SD_cardType,c	;volatile
  2913  003616                     l4174:
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;rosso_sdcard.h: 187: }
  2917                           ;rosso_sdcard.h: 192: return 0;
  2918  003616  0E00               	movlw	0
  2919  003618  0012               	return	
  2920  00361A                     __end_of_SD_init:
  2921                           	opt stack 0
  2922                           tblptru	equ	0xFF8
  2923                           tblptrh	equ	0xFF7
  2924                           tblptrl	equ	0xFF6
  2925                           tablat	equ	0xFF5
  2926                           prodh	equ	0xFF4
  2927                           prodl	equ	0xFF3
  2928                           postinc0	equ	0xFEE
  2929                           wreg	equ	0xFE8
  2930                           indf1	equ	0xFE7
  2931                           postdec1	equ	0xFE5
  2932                           fsr1h	equ	0xFE2
  2933                           fsr1l	equ	0xFE1
  2934                           indf2	equ	0xFDF
  2935                           fsr2h	equ	0xFDA
  2936                           fsr2l	equ	0xFD9
  2937                           status	equ	0xFD8
  2938                           
  2939 ;; *************** function _SD_card_type *****************
  2940 ;; Defined at:
  2941 ;;		line 196 in file "../my_lib.X/rosso_sdcard.h"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;		None
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;		None
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      unsigned char 
  2948 ;; Registers used:
  2949 ;;		wreg, status,2
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2959 ;;Total ram usage:        0 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; Hardware stack levels required when called:    2
  2962 ;; This function calls:
  2963 ;;		Nothing
  2964 ;; This function is called by:
  2965 ;;		_main
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           	psect	text8
  2970  003ED2                     __ptext8:
  2971                           	opt stack 0
  2972  003ED2                     _SD_card_type:
  2973                           	opt stack 28
  2974                           
  2975                           ;rosso_sdcard.h: 197: return SD_cardType;
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;incstack = 0
  2979  003ED2  503E               	movf	_SD_cardType,w,c	;volatile
  2980  003ED4  0012               	return	
  2981  003ED6                     __end_of_SD_card_type:
  2982                           	opt stack 0
  2983                           tblptru	equ	0xFF8
  2984                           tblptrh	equ	0xFF7
  2985                           tblptrl	equ	0xFF6
  2986                           tablat	equ	0xFF5
  2987                           prodh	equ	0xFF4
  2988                           prodl	equ	0xFF3
  2989                           postinc0	equ	0xFEE
  2990                           wreg	equ	0xFE8
  2991                           indf1	equ	0xFE7
  2992                           postdec1	equ	0xFE5
  2993                           fsr1h	equ	0xFE2
  2994                           fsr1l	equ	0xFE1
  2995                           indf2	equ	0xFDF
  2996                           fsr2h	equ	0xFDA
  2997                           fsr2l	equ	0xFD9
  2998                           status	equ	0xFD8
  2999                           
  3000 ;; *************** function _F32_writeFile *****************
  3001 ;; Defined at:
  3002 ;;		line 509 in file "../my_lib.X/rosso_f32.h"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;  fileName        2  127[BANK0 ] PTR unsigned char 
  3005 ;;		 -> fileName(12), 
  3006 ;;  dataString      2  129[BANK0 ] PTR unsigned char 
  3007 ;;		 -> dataString(100), 
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;  cluster         4   40[BANK1 ] unsigned long 
  3010 ;;  prevCluster     4   31[BANK1 ] unsigned long 
  3011 ;;  firstSector     4   24[BANK1 ] unsigned long 
  3012 ;;  nextCluster     4   20[BANK1 ] unsigned long 
  3013 ;;  clusterCount    4    8[BANK1 ] unsigned long 
  3014 ;;  extraMemory     4    0[BANK1 ] unsigned long 
  3015 ;;  dir             2   38[BANK1 ] PTR struct dir_Structure
  3016 ;;		 -> SD_buffer(512), 
  3017 ;;  i               2   35[BANK1 ] unsigned short 
  3018 ;;  firstCluster    2   14[BANK1 ] unsigned short 
  3019 ;;  firstCluster    2   12[BANK1 ] unsigned short 
  3020 ;;  j               1   37[BANK1 ] unsigned char 
  3021 ;;  sector          1   30[BANK1 ] unsigned char 
  3022 ;;  data            1   29[BANK1 ] unsigned char 
  3023 ;;  k               1   28[BANK1 ] unsigned char 
  3024 ;;  start           1   19[BANK1 ] unsigned char 
  3025 ;;  error           1   18[BANK1 ] unsigned char 
  3026 ;;  appendFile      1   17[BANK1 ] unsigned char 
  3027 ;;  fileCreatedF    1   16[BANK1 ] unsigned char 
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      unsigned char 
  3030 ;; Registers used:
  3031 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3037 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;      Locals:         0       0      44       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3039 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3040 ;;      Totals:         0      12      44       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3041 ;;Total ram usage:       56 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    9
  3044 ;; This function calls:
  3045 ;;		_F32_freeMemoryUpdate
  3046 ;;		_F32_getFirstSector
  3047 ;;		_F32_getSetFreeCluster
  3048 ;;		_F32_getSetNextCluster
  3049 ;;		_F32_readFile
  3050 ;;		_F32_searchNextFreeCluster
  3051 ;;		_SD_readSingleBlock
  3052 ;;		_SD_writeSingleBlock
  3053 ;;		___lldiv
  3054 ;;		___llmod
  3055 ;;		___lmul
  3056 ;;		_getDateTime_FAT
  3057 ;; This function is called by:
  3058 ;;		_main
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           	psect	text9
  3063  0010FE                     __ptext9:
  3064                           	opt stack 0
  3065  0010FE                     _F32_writeFile:
  3066                           	opt stack 21
  3067                           
  3068                           ;rosso_f32.h: 510: UINT8 j, k, data = 0, error, fileCreatedFlag = 0, start = 0, appendFi
      +                          le =
  3069                           
  3070                           ;incstack = 0
  3071  0010FE  0E00               	movlw	0
  3072  001100  0101               	movlb	1	; () banked
  3073  001102  6FDF               	movwf	F32_writeFile@data& (0+255),b
  3074  001104  0E00               	movlw	0
  3075  001106  0101               	movlb	1	; () banked
  3076  001108  6FD2               	movwf	F32_writeFile@fileCreatedFlag& (0+255),b
  3077  00110A  0E00               	movlw	0
  3078  00110C  0101               	movlb	1	; () banked
  3079  00110E  6FD5               	movwf	F32_writeFile@start& (0+255),b
  3080                           
  3081                           ;rosso_f32.h: 511: 0, sector = 0;
  3082  001110  0E00               	movlw	0
  3083  001112  0101               	movlb	1	; () banked
  3084  001114  6FD3               	movwf	F32_writeFile@appendFile& (0+255),b
  3085  001116  0E00               	movlw	0
  3086  001118  0101               	movlb	1	; () banked
  3087  00111A  6FE0               	movwf	F32_writeFile@sector& (0+255),b
  3088                           
  3089                           ;rosso_f32.h: 512: UINT16 i, firstClusterHigh = 0, firstClusterLow = 0;
  3090  00111C  0E00               	movlw	0
  3091  00111E  0101               	movlb	1	; () banked
  3092  001120  6FCF               	movwf	(F32_writeFile@firstClusterHigh+1)& (0+255),b
  3093  001122  0E00               	movlw	0
  3094  001124  0101               	movlb	1	; () banked
  3095  001126  6FCE               	movwf	F32_writeFile@firstClusterHigh& (0+255),b
  3096  001128  0E00               	movlw	0
  3097  00112A  0101               	movlb	1	; () banked
  3098  00112C  6FD1               	movwf	(F32_writeFile@firstClusterLow+1)& (0+255),b
  3099  00112E  0E00               	movlw	0
  3100  001130  0101               	movlb	1	; () banked
  3101  001132  6FD0               	movwf	F32_writeFile@firstClusterLow& (0+255),b
  3102                           
  3103                           ; BSR set to: 1
  3104                           ;rosso_f32.h: 513: struct dir_Structure *dir;
  3105                           ;rosso_f32.h: 514: UINT32 cluster, nextCluster, prevCluster, firstSector, clusterCount,
  3106                           ;rosso_f32.h: 515: extraMemory;
  3107                           ;rosso_f32.h: 517: j = F32_readFile(1, fileName);
  3108  001134  0100               	movlb	0	; () banked
  3109  001136  C0E0  F0C0         	movff	F32_writeFile@fileName+1,F32_readFile@fileName+1
  3110  00113A  0100               	movlb	0	; () banked
  3111  00113C  C0DF  F0BF         	movff	F32_writeFile@fileName,F32_readFile@fileName
  3112  001140  0E01               	movlw	1
  3113  001142  EC2D  F016         	call	_F32_readFile
  3114  001146  0101               	movlb	1	; () banked
  3115  001148  6FE7               	movwf	F32_writeFile@j& (0+255),b
  3116                           
  3117                           ; BSR set to: 1
  3118                           ;rosso_f32.h: 519: if (j == 1) {
  3119  00114A  0101               	movlb	1	; () banked
  3120  00114C  05E7               	decf	F32_writeFile@j& (0+255),w,b
  3121  00114E  A4D8               	btfss	status,2,c
  3122  001150  D0C8               	goto	l4252
  3123                           
  3124                           ; BSR set to: 1
  3125                           ;rosso_f32.h: 523: appendFile = 1;
  3126  001152  0E01               	movlw	1
  3127  001154  0101               	movlb	1	; () banked
  3128  001156  6FD3               	movwf	F32_writeFile@appendFile& (0+255),b
  3129                           
  3130                           ; BSR set to: 1
  3131                           ;rosso_f32.h: 524: cluster = appendStartCluster;
  3132  001158  C10C  F1EA         	movff	_appendStartCluster,F32_writeFile@cluster
  3133  00115C  C10D  F1EB         	movff	_appendStartCluster+1,F32_writeFile@cluster+1
  3134  001160  C10E  F1EC         	movff	_appendStartCluster+2,F32_writeFile@cluster+2
  3135  001164  C10F  F1ED         	movff	_appendStartCluster+3,F32_writeFile@cluster+3
  3136                           
  3137                           ;rosso_f32.h: 525: clusterCount = 0;
  3138  001168  0E00               	movlw	0
  3139  00116A  0101               	movlb	1	; () banked
  3140  00116C  6FCA               	movwf	F32_writeFile@clusterCount& (0+255),b
  3141  00116E  0E00               	movlw	0
  3142  001170  0101               	movlb	1	; () banked
  3143  001172  6FCB               	movwf	(F32_writeFile@clusterCount+1)& (0+255),b
  3144  001174  0E00               	movlw	0
  3145  001176  0101               	movlb	1	; () banked
  3146  001178  6FCC               	movwf	(F32_writeFile@clusterCount+2)& (0+255),b
  3147  00117A  0E00               	movlw	0
  3148  00117C  0101               	movlb	1	; () banked
  3149  00117E  6FCD               	movwf	(F32_writeFile@clusterCount+3)& (0+255),b
  3150  001180                     l4240:
  3151                           
  3152                           ; BSR set to: 1
  3153                           ;rosso_f32.h: 527: nextCluster = F32_getSetNextCluster(cluster, 0, 0);
  3154  001180  C1EA  F079         	movff	F32_writeFile@cluster,F32_getSetNextCluster@clusterNumber
  3155  001184  C1EB  F07A         	movff	F32_writeFile@cluster+1,F32_getSetNextCluster@clusterNumber+1
  3156  001188  C1EC  F07B         	movff	F32_writeFile@cluster+2,F32_getSetNextCluster@clusterNumber+2
  3157  00118C  C1ED  F07C         	movff	F32_writeFile@cluster+3,F32_getSetNextCluster@clusterNumber+3
  3158  001190  0E00               	movlw	0
  3159  001192  0100               	movlb	0	; () banked
  3160  001194  6F7D               	movwf	F32_getSetNextCluster@get_set& (0+255),b
  3161  001196  0E00               	movlw	0
  3162  001198  0100               	movlb	0	; () banked
  3163  00119A  6F7E               	movwf	F32_getSetNextCluster@clusterEntry& (0+255),b
  3164  00119C  0E00               	movlw	0
  3165  00119E  0100               	movlb	0	; () banked
  3166  0011A0  6F7F               	movwf	(F32_getSetNextCluster@clusterEntry+1)& (0+255),b
  3167  0011A2  0E00               	movlw	0
  3168  0011A4  0100               	movlb	0	; () banked
  3169  0011A6  6F80               	movwf	(F32_getSetNextCluster@clusterEntry+2)& (0+255),b
  3170  0011A8  0E00               	movlw	0
  3171  0011AA  0100               	movlb	0	; () banked
  3172  0011AC  6F81               	movwf	(F32_getSetNextCluster@clusterEntry+3)& (0+255),b
  3173  0011AE  EC57  F018         	call	_F32_getSetNextCluster	;wreg free
  3174  0011B2  C079  F1D6         	movff	?_F32_getSetNextCluster,F32_writeFile@nextCluster
  3175  0011B6  C07A  F1D7         	movff	?_F32_getSetNextCluster+1,F32_writeFile@nextCluster+1
  3176  0011BA  C07B  F1D8         	movff	?_F32_getSetNextCluster+2,F32_writeFile@nextCluster+2
  3177  0011BE  C07C  F1D9         	movff	?_F32_getSetNextCluster+3,F32_writeFile@nextCluster+3
  3178                           
  3179                           ;rosso_f32.h: 528: if (nextCluster == 0x0fffffff)
  3180  0011C2  0101               	movlb	1	; () banked
  3181  0011C4  29D6               	incf	F32_writeFile@nextCluster& (0+255),w,b
  3182  0011C6  B4D8               	btfsc	status,2,c
  3183  0011C8  29D7               	incf	(F32_writeFile@nextCluster+1)& (0+255),w,b
  3184  0011CA  B4D8               	btfsc	status,2,c
  3185  0011CC  29D8               	incf	(F32_writeFile@nextCluster+2)& (0+255),w,b
  3186  0011CE  0E0F               	movlw	15
  3187  0011D0  B4D8               	btfsc	status,2,c
  3188  0011D2  19D9               	xorwf	(F32_writeFile@nextCluster+3)& (0+255),w,b
  3189  0011D4  B4D8               	btfsc	status,2,c
  3190  0011D6  D013               	goto	l4248
  3191                           
  3192                           ; BSR set to: 1
  3193                           ;rosso_f32.h: 530: cluster = nextCluster;
  3194                           
  3195                           ; BSR set to: 1
  3196                           ;rosso_f32.h: 529: break;
  3197  0011D8  C1D6  F1EA         	movff	F32_writeFile@nextCluster,F32_writeFile@cluster
  3198  0011DC  C1D7  F1EB         	movff	F32_writeFile@nextCluster+1,F32_writeFile@cluster+1
  3199  0011E0  C1D8  F1EC         	movff	F32_writeFile@nextCluster+2,F32_writeFile@cluster+2
  3200  0011E4  C1D9  F1ED         	movff	F32_writeFile@nextCluster+3,F32_writeFile@cluster+3
  3201                           
  3202                           ; BSR set to: 1
  3203                           ;rosso_f32.h: 531: clusterCount++;
  3204  0011E8  0E01               	movlw	1
  3205  0011EA  0101               	movlb	1	; () banked
  3206  0011EC  27CA               	addwf	F32_writeFile@clusterCount& (0+255),f,b
  3207  0011EE  0E00               	movlw	0
  3208  0011F0  0101               	movlb	1	; () banked
  3209  0011F2  23CB               	addwfc	(F32_writeFile@clusterCount+1)& (0+255),f,b
  3210  0011F4  0101               	movlb	1	; () banked
  3211  0011F6  23CC               	addwfc	(F32_writeFile@clusterCount+2)& (0+255),f,b
  3212  0011F8  0101               	movlb	1	; () banked
  3213  0011FA  23CD               	addwfc	(F32_writeFile@clusterCount+3)& (0+255),f,b
  3214  0011FC  D7C1               	goto	l4240
  3215  0011FE                     l4248:
  3216                           
  3217                           ; BSR set to: 1
  3218                           ;rosso_f32.h: 532: }
  3219                           ;rosso_f32.h: 534: sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSecto
      +                          r))
  3220                           ;rosso_f32.h: 535: / bytesPerSector;
  3221  0011FE  0100               	movlb	0	; () banked
  3222  001200  C03F  F060         	movff	_sectorPerCluster,___lmul@multiplier	;volatile
  3223  001204  0100               	movlb	0	; () banked
  3224  001206  C040  F061         	movff	_sectorPerCluster+1,___lmul@multiplier+1	;volatile
  3225  00120A  0100               	movlb	0	; () banked
  3226  00120C  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  3227  00120E  0100               	movlb	0	; () banked
  3228  001210  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  3229  001212  0100               	movlb	0	; () banked
  3230  001214  C0EE  F064         	movff	_bytesPerSector,___lmul@multiplicand	;volatile
  3231  001218  0100               	movlb	0	; () banked
  3232  00121A  C0EF  F065         	movff	_bytesPerSector+1,___lmul@multiplicand+1	;volatile
  3233  00121E  0100               	movlb	0	; () banked
  3234  001220  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  3235  001222  0100               	movlb	0	; () banked
  3236  001224  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  3237  001226  ECD3  F01D         	call	___lmul	;wreg free
  3238  00122A  C060  F1C6         	movff	?___lmul,_F32_writeFile$2117
  3239  00122E  C061  F1C7         	movff	?___lmul+1,_F32_writeFile$2117+1
  3240  001232  C062  F1C8         	movff	?___lmul+2,_F32_writeFile$2117+2
  3241  001236  C063  F1C9         	movff	?___lmul+3,_F32_writeFile$2117+3
  3242                           
  3243                           ;rosso_f32.h: 532: }
  3244                           ;rosso_f32.h: 534: sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSecto
      +                          r))
  3245                           ;rosso_f32.h: 535: / bytesPerSector;
  3246  00123A  C1C6  F060         	movff	_F32_writeFile$2117,___lmul@multiplier
  3247  00123E  C1C7  F061         	movff	_F32_writeFile$2117+1,___lmul@multiplier+1
  3248  001242  C1C8  F062         	movff	_F32_writeFile$2117+2,___lmul@multiplier+2
  3249  001246  C1C9  F063         	movff	_F32_writeFile$2117+3,___lmul@multiplier+3
  3250  00124A  C1CA  F064         	movff	F32_writeFile@clusterCount,___lmul@multiplicand
  3251  00124E  C1CB  F065         	movff	F32_writeFile@clusterCount+1,___lmul@multiplicand+1
  3252  001252  C1CC  F066         	movff	F32_writeFile@clusterCount+2,___lmul@multiplicand+2
  3253  001256  C1CD  F067         	movff	F32_writeFile@clusterCount+3,___lmul@multiplicand+3
  3254  00125A  ECD3  F01D         	call	___lmul	;wreg free
  3255  00125E  C060  F0E3         	movff	?___lmul,??_F32_writeFile
  3256  001262  C061  F0E4         	movff	?___lmul+1,??_F32_writeFile+1
  3257  001266  C062  F0E5         	movff	?___lmul+2,??_F32_writeFile+2
  3258  00126A  C063  F0E6         	movff	?___lmul+3,??_F32_writeFile+3
  3259  00126E  0100               	movlb	0	; () banked
  3260  001270  1FE3               	comf	??_F32_writeFile& (0+255),f,b
  3261  001272  1FE4               	comf	(??_F32_writeFile+1)& (0+255),f,b
  3262  001274  1FE5               	comf	(??_F32_writeFile+2)& (0+255),f,b
  3263  001276  1FE6               	comf	(??_F32_writeFile+3)& (0+255),f,b
  3264  001278  2BE3               	incf	??_F32_writeFile& (0+255),f,b
  3265  00127A  0E00               	movlw	0
  3266  00127C  23E4               	addwfc	(??_F32_writeFile+1)& (0+255),f,b
  3267  00127E  23E5               	addwfc	(??_F32_writeFile+2)& (0+255),f,b
  3268  001280  23E6               	addwfc	(??_F32_writeFile+3)& (0+255),f,b
  3269  001282  5027               	movf	_fileSize,w,c
  3270  001284  0100               	movlb	0	; () banked
  3271  001286  25E3               	addwf	??_F32_writeFile& (0+255),w,b
  3272  001288  0100               	movlb	0	; () banked
  3273  00128A  6F6C               	movwf	___lldiv@dividend& (0+255),b
  3274  00128C  5028               	movf	_fileSize+1,w,c
  3275  00128E  0100               	movlb	0	; () banked
  3276  001290  21E4               	addwfc	(??_F32_writeFile+1)& (0+255),w,b
  3277  001292  0100               	movlb	0	; () banked
  3278  001294  6F6D               	movwf	(___lldiv@dividend+1)& (0+255),b
  3279  001296  5029               	movf	_fileSize+2,w,c
  3280  001298  0100               	movlb	0	; () banked
  3281  00129A  21E5               	addwfc	(??_F32_writeFile+2)& (0+255),w,b
  3282  00129C  0100               	movlb	0	; () banked
  3283  00129E  6F6E               	movwf	(___lldiv@dividend+2)& (0+255),b
  3284  0012A0  502A               	movf	_fileSize+3,w,c
  3285  0012A2  0100               	movlb	0	; () banked
  3286  0012A4  21E6               	addwfc	(??_F32_writeFile+3)& (0+255),w,b
  3287  0012A6  0100               	movlb	0	; () banked
  3288  0012A8  6F6F               	movwf	(___lldiv@dividend+3)& (0+255),b
  3289  0012AA  0100               	movlb	0	; () banked
  3290  0012AC  C0EE  F070         	movff	_bytesPerSector,___lldiv@divisor	;volatile
  3291  0012B0  0100               	movlb	0	; () banked
  3292  0012B2  C0EF  F071         	movff	_bytesPerSector+1,___lldiv@divisor+1	;volatile
  3293  0012B6  0100               	movlb	0	; () banked
  3294  0012B8  6B72               	clrf	(___lldiv@divisor+2)& (0+255),b
  3295  0012BA  0100               	movlb	0	; () banked
  3296  0012BC  6B73               	clrf	(___lldiv@divisor+3)& (0+255),b
  3297  0012BE  ECC2  F01C         	call	___lldiv	;wreg free
  3298  0012C2  C06C  F0E7         	movff	?___lldiv,??_F32_writeFile+4
  3299  0012C6  C06D  F0E8         	movff	?___lldiv+1,??_F32_writeFile+5
  3300  0012CA  C06E  F0E9         	movff	?___lldiv+2,??_F32_writeFile+6
  3301  0012CE  C06F  F0EA         	movff	?___lldiv+3,??_F32_writeFile+7
  3302  0012D2  0100               	movlb	0	; () banked
  3303  0012D4  51E7               	movf	(??_F32_writeFile+4)& (0+255),w,b
  3304  0012D6  0101               	movlb	1	; () banked
  3305  0012D8  6FE0               	movwf	F32_writeFile@sector& (0+255),b
  3306                           
  3307                           ; BSR set to: 1
  3308                           ;rosso_f32.h: 536: start = 1;
  3309  0012DA  0E01               	movlw	1
  3310  0012DC  0101               	movlb	1	; () banked
  3311  0012DE  6FD5               	movwf	F32_writeFile@start& (0+255),b
  3312                           
  3313                           ;rosso_f32.h: 537: } else if (j == 2)
  3314  0012E0  D099               	goto	l4282
  3315  0012E2                     l4252:
  3316                           
  3317                           ; BSR set to: 1
  3318  0012E2  0101               	movlb	1	; () banked
  3319  0012E4  51E7               	movf	F32_writeFile@j& (0+255),w,b
  3320  0012E6  0A02               	xorlw	2
  3321  0012E8  A4D8               	btfss	status,2,c
  3322  0012EA  D002               	goto	l4260
  3323                           
  3324                           ; BSR set to: 1
  3325                           ;rosso_f32.h: 538: return 1;
  3326  0012EC  0E01               	movlw	1
  3327  0012EE  0012               	return	
  3328  0012F0                     l4260:
  3329                           
  3330                           ; BSR set to: 1
  3331                           ;rosso_f32.h: 540: else {
  3332                           ;rosso_f32.h: 545: cluster = F32_getSetFreeCluster(2, 0, 0);
  3333  0012F0  0E00               	movlw	0
  3334  0012F2  0100               	movlb	0	; () banked
  3335  0012F4  6F75               	movwf	F32_getSetFreeCluster@get_set& (0+255),b
  3336  0012F6  0E00               	movlw	0
  3337  0012F8  0100               	movlb	0	; () banked
  3338  0012FA  6F76               	movwf	F32_getSetFreeCluster@FSEntry& (0+255),b
  3339  0012FC  0E00               	movlw	0
  3340  0012FE  0100               	movlb	0	; () banked
  3341  001300  6F77               	movwf	(F32_getSetFreeCluster@FSEntry+1)& (0+255),b
  3342  001302  0E00               	movlw	0
  3343  001304  0100               	movlb	0	; () banked
  3344  001306  6F78               	movwf	(F32_getSetFreeCluster@FSEntry+2)& (0+255),b
  3345  001308  0E00               	movlw	0
  3346  00130A  0100               	movlb	0	; () banked
  3347  00130C  6F79               	movwf	(F32_getSetFreeCluster@FSEntry+3)& (0+255),b
  3348  00130E  0E02               	movlw	2
  3349  001310  EC4C  F019         	call	_F32_getSetFreeCluster
  3350  001314  C075  F1EA         	movff	?_F32_getSetFreeCluster,F32_writeFile@cluster
  3351  001318  C076  F1EB         	movff	?_F32_getSetFreeCluster+1,F32_writeFile@cluster+1
  3352  00131C  C077  F1EC         	movff	?_F32_getSetFreeCluster+2,F32_writeFile@cluster+2
  3353  001320  C078  F1ED         	movff	?_F32_getSetFreeCluster+3,F32_writeFile@cluster+3
  3354                           
  3355                           ;rosso_f32.h: 546: if (cluster > totalClusters)
  3356  001324  0101               	movlb	1	; () banked
  3357  001326  51EA               	movf	F32_writeFile@cluster& (0+255),w,b
  3358  001328  5C2F               	subwf	_totalClusters,w,c	;volatile
  3359  00132A  0101               	movlb	1	; () banked
  3360  00132C  51EB               	movf	(F32_writeFile@cluster+1)& (0+255),w,b
  3361  00132E  5830               	subwfb	_totalClusters+1,w,c	;volatile
  3362  001330  0101               	movlb	1	; () banked
  3363  001332  51EC               	movf	(F32_writeFile@cluster+2)& (0+255),w,b
  3364  001334  5831               	subwfb	_totalClusters+2,w,c	;volatile
  3365  001336  0101               	movlb	1	; () banked
  3366  001338  51ED               	movf	(F32_writeFile@cluster+3)& (0+255),w,b
  3367  00133A  5832               	subwfb	_totalClusters+3,w,c	;volatile
  3368  00133C  B0D8               	btfsc	status,0,c
  3369  00133E  D008               	goto	l4266
  3370                           
  3371                           ; BSR set to: 1
  3372                           ;rosso_f32.h: 547: cluster = rootCluster;
  3373  001340  C02B  F1EA         	movff	_rootCluster,F32_writeFile@cluster	;volatile
  3374  001344  C02C  F1EB         	movff	_rootCluster+1,F32_writeFile@cluster+1	;volatile
  3375  001348  C02D  F1EC         	movff	_rootCluster+2,F32_writeFile@cluster+2	;volatile
  3376  00134C  C02E  F1ED         	movff	_rootCluster+3,F32_writeFile@cluster+3	;volatile
  3377  001350                     l4266:
  3378                           
  3379                           ; BSR set to: 1
  3380                           ;rosso_f32.h: 549: cluster = F32_searchNextFreeCluster(cluster);
  3381  001350  C1EA  F079         	movff	F32_writeFile@cluster,F32_searchNextFreeCluster@startCluster
  3382  001354  C1EB  F07A         	movff	F32_writeFile@cluster+1,F32_searchNextFreeCluster@startCluster+1
  3383  001358  C1EC  F07B         	movff	F32_writeFile@cluster+2,F32_searchNextFreeCluster@startCluster+2
  3384  00135C  C1ED  F07C         	movff	F32_writeFile@cluster+3,F32_searchNextFreeCluster@startCluster+3
  3385  001360  EC55  F017         	call	_F32_searchNextFreeCluster	;wreg free
  3386  001364  C079  F1EA         	movff	?_F32_searchNextFreeCluster,F32_writeFile@cluster
  3387  001368  C07A  F1EB         	movff	?_F32_searchNextFreeCluster+1,F32_writeFile@cluster+1
  3388  00136C  C07B  F1EC         	movff	?_F32_searchNextFreeCluster+2,F32_writeFile@cluster+2
  3389  001370  C07C  F1ED         	movff	?_F32_searchNextFreeCluster+3,F32_writeFile@cluster+3
  3390                           
  3391                           ;rosso_f32.h: 550: if (cluster == 0) {
  3392  001374  0101               	movlb	1	; () banked
  3393  001376  51ED               	movf	(F32_writeFile@cluster+3)& (0+255),w,b
  3394  001378  11EA               	iorwf	F32_writeFile@cluster& (0+255),w,b
  3395  00137A  11EB               	iorwf	(F32_writeFile@cluster+1)& (0+255),w,b
  3396  00137C  11EC               	iorwf	(F32_writeFile@cluster+2)& (0+255),w,b
  3397  00137E  A4D8               	btfss	status,2,c
  3398  001380  D002               	goto	l4274
  3399                           
  3400                           ; BSR set to: 1
  3401                           ;rosso_f32.h: 555: return 1;
  3402  001382  0E01               	movlw	1
  3403  001384  0012               	return	
  3404  001386                     l4274:
  3405                           
  3406                           ; BSR set to: 1
  3407                           ;rosso_f32.h: 556: }
  3408                           ;rosso_f32.h: 557: F32_getSetNextCluster(cluster, 1, 0x0fffffff);
  3409  001386  C1EA  F079         	movff	F32_writeFile@cluster,F32_getSetNextCluster@clusterNumber
  3410  00138A  C1EB  F07A         	movff	F32_writeFile@cluster+1,F32_getSetNextCluster@clusterNumber+1
  3411  00138E  C1EC  F07B         	movff	F32_writeFile@cluster+2,F32_getSetNextCluster@clusterNumber+2
  3412  001392  C1ED  F07C         	movff	F32_writeFile@cluster+3,F32_getSetNextCluster@clusterNumber+3
  3413  001396  0E01               	movlw	1
  3414  001398  0100               	movlb	0	; () banked
  3415  00139A  6F7D               	movwf	F32_getSetNextCluster@get_set& (0+255),b
  3416  00139C  0EFF               	movlw	255
  3417  00139E  0100               	movlb	0	; () banked
  3418  0013A0  6F7E               	movwf	F32_getSetNextCluster@clusterEntry& (0+255),b
  3419  0013A2  0EFF               	movlw	255
  3420  0013A4  0100               	movlb	0	; () banked
  3421  0013A6  6F7F               	movwf	(F32_getSetNextCluster@clusterEntry+1)& (0+255),b
  3422  0013A8  0EFF               	movlw	255
  3423  0013AA  0100               	movlb	0	; () banked
  3424  0013AC  6F80               	movwf	(F32_getSetNextCluster@clusterEntry+2)& (0+255),b
  3425  0013AE  0E0F               	movlw	15
  3426  0013B0  0100               	movlb	0	; () banked
  3427  0013B2  6F81               	movwf	(F32_getSetNextCluster@clusterEntry+3)& (0+255),b
  3428  0013B4  EC57  F018         	call	_F32_getSetNextCluster	;wreg free
  3429                           
  3430                           ;rosso_f32.h: 559: firstClusterHigh = (UINT16) ((cluster & 0xffff0000) >> 16);
  3431  0013B8  0E00               	movlw	0
  3432  0013BA  0101               	movlb	1	; () banked
  3433  0013BC  15EA               	andwf	F32_writeFile@cluster& (0+255),w,b
  3434  0013BE  0100               	movlb	0	; () banked
  3435  0013C0  6FE3               	movwf	??_F32_writeFile& (0+255),b
  3436  0013C2  0E00               	movlw	0
  3437  0013C4  0101               	movlb	1	; () banked
  3438  0013C6  15EB               	andwf	(F32_writeFile@cluster+1)& (0+255),w,b
  3439  0013C8  0100               	movlb	0	; () banked
  3440  0013CA  6FE4               	movwf	(??_F32_writeFile+1)& (0+255),b
  3441  0013CC  0EFF               	movlw	255
  3442  0013CE  0101               	movlb	1	; () banked
  3443  0013D0  15EC               	andwf	(F32_writeFile@cluster+2)& (0+255),w,b
  3444  0013D2  0100               	movlb	0	; () banked
  3445  0013D4  6FE5               	movwf	(??_F32_writeFile+2)& (0+255),b
  3446  0013D6  0EFF               	movlw	255
  3447  0013D8  0101               	movlb	1	; () banked
  3448  0013DA  15ED               	andwf	(F32_writeFile@cluster+3)& (0+255),w,b
  3449  0013DC  0100               	movlb	0	; () banked
  3450  0013DE  6FE6               	movwf	(??_F32_writeFile+3)& (0+255),b
  3451  0013E0  0E11               	movlw	17
  3452  0013E2  D006               	goto	u4700
  3453  0013E4                     u4705:
  3454  0013E4  0100               	movlb	0	; () banked
  3455  0013E6  90D8               	bcf	status,0,c
  3456  0013E8  33E6               	rrcf	(??_F32_writeFile+3)& (0+255),f,b
  3457  0013EA  33E5               	rrcf	(??_F32_writeFile+2)& (0+255),f,b
  3458  0013EC  33E4               	rrcf	(??_F32_writeFile+1)& (0+255),f,b
  3459  0013EE  33E3               	rrcf	??_F32_writeFile& (0+255),f,b
  3460  0013F0                     u4700:
  3461  0013F0  2EE8               	decfsz	wreg,f,c
  3462  0013F2  D7F8               	goto	u4705
  3463  0013F4  C0E3  F1CE         	movff	??_F32_writeFile,F32_writeFile@firstClusterHigh
  3464  0013F8  C0E4  F1CF         	movff	??_F32_writeFile+1,F32_writeFile@firstClusterHigh+1
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;rosso_f32.h: 560: firstClusterLow = (UINT16) (cluster & 0x0000ffff);
  3468  0013FC  C1EA  F1D0         	movff	F32_writeFile@cluster,F32_writeFile@firstClusterLow
  3469  001400  C1EB  F1D1         	movff	F32_writeFile@cluster+1,F32_writeFile@firstClusterLow+1
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;rosso_f32.h: 561: fileSize = 0;
  3473  001404  0E00               	movlw	0
  3474  001406  6E27               	movwf	_fileSize,c
  3475  001408  0E00               	movlw	0
  3476  00140A  6E28               	movwf	_fileSize+1,c
  3477  00140C  0E00               	movlw	0
  3478  00140E  6E29               	movwf	_fileSize+2,c
  3479  001410  0E00               	movlw	0
  3480  001412  6E2A               	movwf	_fileSize+3,c
  3481  001414                     l4282:
  3482                           
  3483                           ;rosso_f32.h: 562: }
  3484                           ;rosso_f32.h: 564: k = 0;
  3485  001414  0E00               	movlw	0
  3486  001416  0101               	movlb	1	; () banked
  3487  001418  6FDE               	movwf	F32_writeFile@k& (0+255),b
  3488  00141A                     l4284:
  3489                           
  3490                           ;rosso_f32.h: 567: if (start) {
  3491  00141A  0101               	movlb	1	; () banked
  3492  00141C  51D5               	movf	F32_writeFile@start& (0+255),w,b
  3493  00141E  B4D8               	btfsc	status,2,c
  3494  001420  D053               	goto	l4296
  3495                           
  3496                           ; BSR set to: 1
  3497                           ;rosso_f32.h: 568: start = 0;
  3498  001422  0E00               	movlw	0
  3499  001424  0101               	movlb	1	; () banked
  3500  001426  6FD5               	movwf	F32_writeFile@start& (0+255),b
  3501                           
  3502                           ; BSR set to: 1
  3503                           ;rosso_f32.h: 569: SD_startBlock = F32_getFirstSector(cluster) + sector;
  3504  001428  C1EA  F06C         	movff	F32_writeFile@cluster,F32_getFirstSector@clusterNumber
  3505  00142C  C1EB  F06D         	movff	F32_writeFile@cluster+1,F32_getFirstSector@clusterNumber+1
  3506  001430  C1EC  F06E         	movff	F32_writeFile@cluster+2,F32_getFirstSector@clusterNumber+2
  3507  001434  C1ED  F06F         	movff	F32_writeFile@cluster+3,F32_getFirstSector@clusterNumber+3
  3508  001438  EC16  F01E         	call	_F32_getFirstSector	;wreg free
  3509  00143C  C06C  F0E3         	movff	?_F32_getFirstSector,??_F32_writeFile
  3510  001440  C06D  F0E4         	movff	?_F32_getFirstSector+1,??_F32_writeFile+1
  3511  001444  C06E  F0E5         	movff	?_F32_getFirstSector+2,??_F32_writeFile+2
  3512  001448  C06F  F0E6         	movff	?_F32_getFirstSector+3,??_F32_writeFile+3
  3513  00144C  0101               	movlb	1	; () banked
  3514  00144E  51E0               	movf	F32_writeFile@sector& (0+255),w,b
  3515  001450  0100               	movlb	0	; () banked
  3516  001452  25E3               	addwf	??_F32_writeFile& (0+255),w,b
  3517  001454  6E23               	movwf	_SD_startBlock,c	;volatile
  3518  001456  0E00               	movlw	0
  3519  001458  0100               	movlb	0	; () banked
  3520  00145A  21E4               	addwfc	(??_F32_writeFile+1)& (0+255),w,b
  3521  00145C  6E24               	movwf	_SD_startBlock+1,c	;volatile
  3522  00145E  0E00               	movlw	0
  3523  001460  0100               	movlb	0	; () banked
  3524  001462  21E5               	addwfc	(??_F32_writeFile+2)& (0+255),w,b
  3525  001464  6E25               	movwf	_SD_startBlock+2,c	;volatile
  3526  001466  0E00               	movlw	0
  3527  001468  0100               	movlb	0	; () banked
  3528  00146A  21E6               	addwfc	(??_F32_writeFile+3)& (0+255),w,b
  3529  00146C  6E26               	movwf	_SD_startBlock+3,c	;volatile
  3530                           
  3531                           ; BSR set to: 0
  3532                           ;rosso_f32.h: 570: SD_readSingleBlock(SD_startBlock);
  3533  00146E  C023  F06C         	movff	_SD_startBlock,SD_readSingleBlock@SD_startBlock	;volatile
  3534  001472  C024  F06D         	movff	_SD_startBlock+1,SD_readSingleBlock@SD_startBlock+1	;volatile
  3535  001476  C025  F06E         	movff	_SD_startBlock+2,SD_readSingleBlock@SD_startBlock+2	;volatile
  3536  00147A  C026  F06F         	movff	_SD_startBlock+3,SD_readSingleBlock@SD_startBlock+3	;volatile
  3537  00147E  EC2C  F01D         	call	_SD_readSingleBlock	;wreg free
  3538                           
  3539                           ;rosso_f32.h: 571: i = fileSize % bytesPerSector;
  3540  001482  C027  F060         	movff	_fileSize,___llmod@dividend
  3541  001486  C028  F061         	movff	_fileSize+1,___llmod@dividend+1
  3542  00148A  C029  F062         	movff	_fileSize+2,___llmod@dividend+2
  3543  00148E  C02A  F063         	movff	_fileSize+3,___llmod@dividend+3
  3544  001492  0100               	movlb	0	; () banked
  3545  001494  C0EE  F064         	movff	_bytesPerSector,___llmod@divisor	;volatile
  3546  001498  0100               	movlb	0	; () banked
  3547  00149A  C0EF  F065         	movff	_bytesPerSector+1,___llmod@divisor+1	;volatile
  3548  00149E  0100               	movlb	0	; () banked
  3549  0014A0  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
  3550  0014A2  0100               	movlb	0	; () banked
  3551  0014A4  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
  3552  0014A6  EC84  F01D         	call	___llmod	;wreg free
  3553  0014AA  C060  F0E3         	movff	?___llmod,??_F32_writeFile
  3554  0014AE  C061  F0E4         	movff	?___llmod+1,??_F32_writeFile+1
  3555  0014B2  C062  F0E5         	movff	?___llmod+2,??_F32_writeFile+2
  3556  0014B6  C063  F0E6         	movff	?___llmod+3,??_F32_writeFile+3
  3557  0014BA  C0E3  F1E5         	movff	??_F32_writeFile,F32_writeFile@i
  3558  0014BE  C0E4  F1E6         	movff	??_F32_writeFile+1,F32_writeFile@i+1
  3559                           
  3560                           ;rosso_f32.h: 572: j = sector;
  3561  0014C2  C1E0  F1E7         	movff	F32_writeFile@sector,F32_writeFile@j
  3562                           
  3563                           ;rosso_f32.h: 573: } else {
  3564  0014C6  D01B               	goto	l4302
  3565  0014C8                     l4296:
  3566                           
  3567                           ;rosso_f32.h: 574: SD_startBlock = F32_getFirstSector(cluster);
  3568  0014C8  C1EA  F06C         	movff	F32_writeFile@cluster,F32_getFirstSector@clusterNumber
  3569  0014CC  C1EB  F06D         	movff	F32_writeFile@cluster+1,F32_getFirstSector@clusterNumber+1
  3570  0014D0  C1EC  F06E         	movff	F32_writeFile@cluster+2,F32_getFirstSector@clusterNumber+2
  3571  0014D4  C1ED  F06F         	movff	F32_writeFile@cluster+3,F32_getFirstSector@clusterNumber+3
  3572  0014D8  EC16  F01E         	call	_F32_getFirstSector	;wreg free
  3573  0014DC  C06C  F023         	movff	?_F32_getFirstSector,_SD_startBlock	;volatile
  3574  0014E0  C06D  F024         	movff	?_F32_getFirstSector+1,_SD_startBlock+1	;volatile
  3575  0014E4  C06E  F025         	movff	?_F32_getFirstSector+2,_SD_startBlock+2	;volatile
  3576  0014E8  C06F  F026         	movff	?_F32_getFirstSector+3,_SD_startBlock+3	;volatile
  3577                           
  3578                           ;rosso_f32.h: 575: i = 0;
  3579  0014EC  0E00               	movlw	0
  3580  0014EE  0101               	movlb	1	; () banked
  3581  0014F0  6FE6               	movwf	(F32_writeFile@i+1)& (0+255),b
  3582  0014F2  0E00               	movlw	0
  3583  0014F4  0101               	movlb	1	; () banked
  3584  0014F6  6FE5               	movwf	F32_writeFile@i& (0+255),b
  3585                           
  3586                           ; BSR set to: 1
  3587                           ;rosso_f32.h: 576: j = 0;
  3588  0014F8  0E00               	movlw	0
  3589  0014FA  0101               	movlb	1	; () banked
  3590  0014FC  6FE7               	movwf	F32_writeFile@j& (0+255),b
  3591  0014FE                     l4302:
  3592                           
  3593                           ;rosso_f32.h: 580: data = dataString[k++];
  3594  0014FE  0101               	movlb	1	; () banked
  3595  001500  51DE               	movf	F32_writeFile@k& (0+255),w,b
  3596  001502  0D01               	mullw	1
  3597  001504  50F3               	movf	prodl,w,c
  3598  001506  0100               	movlb	0	; () banked
  3599  001508  25E1               	addwf	F32_writeFile@dataString& (0+255),w,b
  3600  00150A  6ED9               	movwf	fsr2l,c
  3601  00150C  50F4               	movf	prodh,w,c
  3602  00150E  0100               	movlb	0	; () banked
  3603  001510  21E2               	addwfc	(F32_writeFile@dataString+1)& (0+255),w,b
  3604  001512  6EDA               	movwf	fsr2h,c
  3605  001514  50DF               	movf	indf2,w,c
  3606  001516  0101               	movlb	1	; () banked
  3607  001518  6FDF               	movwf	F32_writeFile@data& (0+255),b
  3608                           
  3609                           ; BSR set to: 1
  3610  00151A  0101               	movlb	1	; () banked
  3611  00151C  2BDE               	incf	F32_writeFile@k& (0+255),f,b
  3612                           
  3613                           ; BSR set to: 1
  3614                           ;rosso_f32.h: 584: SD_buffer[i++] = data;
  3615  00151E  0EEE               	movlw	low _SD_buffer
  3616  001520  0101               	movlb	1	; () banked
  3617  001522  25E5               	addwf	F32_writeFile@i& (0+255),w,b
  3618  001524  6ED9               	movwf	fsr2l,c
  3619  001526  0E01               	movlw	high _SD_buffer
  3620  001528  0101               	movlb	1	; () banked
  3621  00152A  21E6               	addwfc	(F32_writeFile@i+1)& (0+255),w,b
  3622  00152C  6EDA               	movwf	fsr2h,c
  3623  00152E  0101               	movlb	1	; () banked
  3624  001530  C1DF  FFDF         	movff	F32_writeFile@data,indf2
  3625                           
  3626                           ; BSR set to: 1
  3627  001534  0101               	movlb	1	; () banked
  3628  001536  4BE5               	infsnz	F32_writeFile@i& (0+255),f,b
  3629  001538  2BE6               	incf	(F32_writeFile@i+1)& (0+255),f,b
  3630                           
  3631                           ; BSR set to: 1
  3632                           ;rosso_f32.h: 585: fileSize++;
  3633  00153A  0E01               	movlw	1
  3634  00153C  2627               	addwf	_fileSize,f,c
  3635  00153E  0E00               	movlw	0
  3636  001540  2228               	addwfc	_fileSize+1,f,c
  3637  001542  2229               	addwfc	_fileSize+2,f,c
  3638  001544  222A               	addwfc	_fileSize+3,f,c
  3639                           
  3640                           ; BSR set to: 1
  3641                           ;rosso_f32.h: 587: if (i >= 512)
  3642  001546  0E00               	movlw	0
  3643  001548  0101               	movlb	1	; () banked
  3644  00154A  5DE5               	subwf	F32_writeFile@i& (0+255),w,b
  3645  00154C  0E02               	movlw	2
  3646  00154E  0101               	movlb	1	; () banked
  3647  001550  59E6               	subwfb	(F32_writeFile@i+1)& (0+255),w,b
  3648  001552  A0D8               	btfss	status,0,c
  3649  001554  D02C               	goto	l384
  3650                           
  3651                           ; BSR set to: 1
  3652                           ;rosso_f32.h: 588: {
  3653                           ;rosso_f32.h: 589: i = 0;
  3654  001556  0E00               	movlw	0
  3655  001558  0101               	movlb	1	; () banked
  3656  00155A  6FE6               	movwf	(F32_writeFile@i+1)& (0+255),b
  3657  00155C  0E00               	movlw	0
  3658  00155E  0101               	movlb	1	; () banked
  3659  001560  6FE5               	movwf	F32_writeFile@i& (0+255),b
  3660                           
  3661                           ; BSR set to: 1
  3662                           ;rosso_f32.h: 590: error = SD_writeSingleBlock(SD_startBlock);
  3663  001562  C023  F06C         	movff	_SD_startBlock,SD_writeSingleBlock@SD_startBlock	;volatile
  3664  001566  C024  F06D         	movff	_SD_startBlock+1,SD_writeSingleBlock@SD_startBlock+1	;volatile
  3665  00156A  C025  F06E         	movff	_SD_startBlock+2,SD_writeSingleBlock@SD_startBlock+2	;volatile
  3666  00156E  C026  F06F         	movff	_SD_startBlock+3,SD_writeSingleBlock@SD_startBlock+3	;volatile
  3667  001572  EC48  F01C         	call	_SD_writeSingleBlock	;wreg free
  3668  001576  0101               	movlb	1	; () banked
  3669  001578  6FD4               	movwf	F32_writeFile@error& (0+255),b
  3670                           
  3671                           ; BSR set to: 1
  3672                           ;rosso_f32.h: 591: j++;
  3673  00157A  0101               	movlb	1	; () banked
  3674  00157C  2BE7               	incf	F32_writeFile@j& (0+255),f,b
  3675                           
  3676                           ; BSR set to: 1
  3677                           ;rosso_f32.h: 592: if (j == sectorPerCluster) {
  3678  00157E  0101               	movlb	1	; () banked
  3679  001580  51E7               	movf	F32_writeFile@j& (0+255),w,b
  3680  001582  0100               	movlb	0	; () banked
  3681  001584  6FE3               	movwf	??_F32_writeFile& (0+255),b
  3682  001586  6BE4               	clrf	(??_F32_writeFile+1)& (0+255),b
  3683  001588  5040               	movf	_sectorPerCluster+1,w,c	;volatile
  3684  00158A  0100               	movlb	0	; () banked
  3685  00158C  19E4               	xorwf	(??_F32_writeFile+1)& (0+255),w,b
  3686  00158E  E103               	bnz	u4735
  3687  001590  503F               	movf	_sectorPerCluster,w,c	;volatile
  3688  001592  0100               	movlb	0	; () banked
  3689  001594  19E3               	xorwf	??_F32_writeFile& (0+255),w,b
  3690  001596                     u4735:
  3691  001596  A4D8               	btfss	status,2,c
  3692  001598  D004               	goto	l4324
  3693                           
  3694                           ; BSR set to: 0
  3695                           ;rosso_f32.h: 593: j = 0;
  3696  00159A  0E00               	movlw	0
  3697  00159C  0101               	movlb	1	; () banked
  3698  00159E  6FE7               	movwf	F32_writeFile@j& (0+255),b
  3699                           
  3700                           ;rosso_f32.h: 594: break;
  3701  0015A0  D00F               	goto	l4328
  3702  0015A2                     l4324:
  3703                           
  3704                           ;rosso_f32.h: 595: }
  3705                           ;rosso_f32.h: 596: SD_startBlock++;
  3706  0015A2  0E01               	movlw	1
  3707  0015A4  2623               	addwf	_SD_startBlock,f,c	;volatile
  3708  0015A6  0E00               	movlw	0
  3709  0015A8  2224               	addwfc	_SD_startBlock+1,f,c	;volatile
  3710  0015AA  2225               	addwfc	_SD_startBlock+2,f,c	;volatile
  3711  0015AC  2226               	addwfc	_SD_startBlock+3,f,c	;volatile
  3712  0015AE                     l384:
  3713                           
  3714                           ;rosso_f32.h: 597: }
  3715                           ;rosso_f32.h: 598: } while ((data != '\n') && (k < 100));
  3716  0015AE  0101               	movlb	1	; () banked
  3717  0015B0  51DF               	movf	F32_writeFile@data& (0+255),w,b
  3718  0015B2  0A0A               	xorlw	10
  3719  0015B4  B4D8               	btfsc	status,2,c
  3720  0015B6  D004               	goto	l4328
  3721                           
  3722                           ; BSR set to: 1
  3723  0015B8  0E63               	movlw	99
  3724  0015BA  0101               	movlb	1	; () banked
  3725  0015BC  65DE               	cpfsgt	F32_writeFile@k& (0+255),b
  3726  0015BE  D79F               	goto	l4302
  3727  0015C0                     l4328:
  3728                           
  3729                           ; BSR set to: 1
  3730                           ;rosso_f32.h: 601: if ((data == '\n') || (k >= 100)) {
  3731  0015C0  0101               	movlb	1	; () banked
  3732  0015C2  51DF               	movf	F32_writeFile@data& (0+255),w,b
  3733  0015C4  0A0A               	xorlw	10
  3734  0015C6  B4D8               	btfsc	status,2,c
  3735  0015C8  D004               	goto	l4332
  3736                           
  3737                           ; BSR set to: 1
  3738  0015CA  0E63               	movlw	99
  3739  0015CC  0101               	movlb	1	; () banked
  3740  0015CE  65DE               	cpfsgt	F32_writeFile@k& (0+255),b
  3741  0015D0  D023               	goto	l389
  3742  0015D2                     l4332:
  3743                           
  3744                           ; BSR set to: 1
  3745                           ;rosso_f32.h: 602: for (; i < 512; i++)
  3746  0015D2  0E00               	movlw	0
  3747  0015D4  0101               	movlb	1	; () banked
  3748  0015D6  5DE5               	subwf	F32_writeFile@i& (0+255),w,b
  3749  0015D8  0E02               	movlw	2
  3750  0015DA  0101               	movlb	1	; () banked
  3751  0015DC  59E6               	subwfb	(F32_writeFile@i+1)& (0+255),w,b
  3752  0015DE  B0D8               	btfsc	status,0,c
  3753  0015E0  D00E               	goto	l4342
  3754                           
  3755                           ; BSR set to: 1
  3756                           ;rosso_f32.h: 603: SD_buffer[i] = 0x00;
  3757                           
  3758                           ; BSR set to: 1
  3759                           
  3760                           ; BSR set to: 1
  3761  0015E2  0EEE               	movlw	low _SD_buffer
  3762  0015E4  0101               	movlb	1	; () banked
  3763  0015E6  25E5               	addwf	F32_writeFile@i& (0+255),w,b
  3764  0015E8  6ED9               	movwf	fsr2l,c
  3765  0015EA  0E01               	movlw	high _SD_buffer
  3766  0015EC  0101               	movlb	1	; () banked
  3767  0015EE  21E6               	addwfc	(F32_writeFile@i+1)& (0+255),w,b
  3768  0015F0  6EDA               	movwf	fsr2h,c
  3769  0015F2  0E00               	movlw	0
  3770  0015F4  6EDF               	movwf	indf2,c
  3771                           
  3772                           ; BSR set to: 1
  3773  0015F6  0101               	movlb	1	; () banked
  3774  0015F8  4BE5               	infsnz	F32_writeFile@i& (0+255),f,b
  3775  0015FA  2BE6               	incf	(F32_writeFile@i+1)& (0+255),f,b
  3776  0015FC  D7EA               	goto	l4332
  3777  0015FE                     l4342:
  3778                           
  3779                           ; BSR set to: 1
  3780                           ;rosso_f32.h: 604: error = SD_writeSingleBlock(SD_startBlock);
  3781  0015FE  C023  F06C         	movff	_SD_startBlock,SD_writeSingleBlock@SD_startBlock	;volatile
  3782  001602  C024  F06D         	movff	_SD_startBlock+1,SD_writeSingleBlock@SD_startBlock+1	;volatile
  3783  001606  C025  F06E         	movff	_SD_startBlock+2,SD_writeSingleBlock@SD_startBlock+2	;volatile
  3784  00160A  C026  F06F         	movff	_SD_startBlock+3,SD_writeSingleBlock@SD_startBlock+3	;volatile
  3785  00160E  EC48  F01C         	call	_SD_writeSingleBlock	;wreg free
  3786  001612  0101               	movlb	1	; () banked
  3787  001614  6FD4               	movwf	F32_writeFile@error& (0+255),b
  3788                           
  3789                           ;rosso_f32.h: 606: break;
  3790  001616  D052               	goto	l4354
  3791  001618                     l389:
  3792                           
  3793                           ; BSR set to: 1
  3794                           ;rosso_f32.h: 607: }
  3795                           ;rosso_f32.h: 609: prevCluster = cluster;
  3796  001618  C1EA  F1E1         	movff	F32_writeFile@cluster,F32_writeFile@prevCluster
  3797  00161C  C1EB  F1E2         	movff	F32_writeFile@cluster+1,F32_writeFile@prevCluster+1
  3798  001620  C1EC  F1E3         	movff	F32_writeFile@cluster+2,F32_writeFile@prevCluster+2
  3799  001624  C1ED  F1E4         	movff	F32_writeFile@cluster+3,F32_writeFile@prevCluster+3
  3800                           
  3801                           ; BSR set to: 1
  3802                           ;rosso_f32.h: 611: cluster = F32_searchNextFreeCluster(prevCluster);
  3803  001628  C1E1  F079         	movff	F32_writeFile@prevCluster,F32_searchNextFreeCluster@startCluster
  3804  00162C  C1E2  F07A         	movff	F32_writeFile@prevCluster+1,F32_searchNextFreeCluster@startCluster+1
  3805  001630  C1E3  F07B         	movff	F32_writeFile@prevCluster+2,F32_searchNextFreeCluster@startCluster+2
  3806  001634  C1E4  F07C         	movff	F32_writeFile@prevCluster+3,F32_searchNextFreeCluster@startCluster+3
  3807  001638  EC55  F017         	call	_F32_searchNextFreeCluster	;wreg free
  3808  00163C  C079  F1EA         	movff	?_F32_searchNextFreeCluster,F32_writeFile@cluster
  3809  001640  C07A  F1EB         	movff	?_F32_searchNextFreeCluster+1,F32_writeFile@cluster+1
  3810  001644  C07B  F1EC         	movff	?_F32_searchNextFreeCluster+2,F32_writeFile@cluster+2
  3811  001648  C07C  F1ED         	movff	?_F32_searchNextFreeCluster+3,F32_writeFile@cluster+3
  3812                           
  3813                           ;rosso_f32.h: 613: if (cluster == 0) {
  3814  00164C  0101               	movlb	1	; () banked
  3815  00164E  51ED               	movf	(F32_writeFile@cluster+3)& (0+255),w,b
  3816  001650  11EA               	iorwf	F32_writeFile@cluster& (0+255),w,b
  3817  001652  11EB               	iorwf	(F32_writeFile@cluster+1)& (0+255),w,b
  3818  001654  11EC               	iorwf	(F32_writeFile@cluster+2)& (0+255),w,b
  3819  001656  A4D8               	btfss	status,2,c
  3820  001658  D002               	goto	l4352
  3821                           
  3822                           ; BSR set to: 1
  3823                           ;rosso_f32.h: 618: return 1;
  3824  00165A  0E01               	movlw	1
  3825  00165C  0012               	return	
  3826  00165E                     l4352:
  3827                           
  3828                           ; BSR set to: 1
  3829                           ;rosso_f32.h: 619: }
  3830                           ;rosso_f32.h: 621: F32_getSetNextCluster(prevCluster, 1, cluster);
  3831  00165E  C1E1  F079         	movff	F32_writeFile@prevCluster,F32_getSetNextCluster@clusterNumber
  3832  001662  C1E2  F07A         	movff	F32_writeFile@prevCluster+1,F32_getSetNextCluster@clusterNumber+1
  3833  001666  C1E3  F07B         	movff	F32_writeFile@prevCluster+2,F32_getSetNextCluster@clusterNumber+2
  3834  00166A  C1E4  F07C         	movff	F32_writeFile@prevCluster+3,F32_getSetNextCluster@clusterNumber+3
  3835  00166E  0E01               	movlw	1
  3836  001670  0100               	movlb	0	; () banked
  3837  001672  6F7D               	movwf	F32_getSetNextCluster@get_set& (0+255),b
  3838  001674  C1EA  F07E         	movff	F32_writeFile@cluster,F32_getSetNextCluster@clusterEntry
  3839  001678  C1EB  F07F         	movff	F32_writeFile@cluster+1,F32_getSetNextCluster@clusterEntry+1
  3840  00167C  C1EC  F080         	movff	F32_writeFile@cluster+2,F32_getSetNextCluster@clusterEntry+2
  3841  001680  C1ED  F081         	movff	F32_writeFile@cluster+3,F32_getSetNextCluster@clusterEntry+3
  3842  001684  EC57  F018         	call	_F32_getSetNextCluster	;wreg free
  3843                           
  3844                           ;rosso_f32.h: 622: F32_getSetNextCluster(cluster, 1, 0x0fffffff);
  3845  001688  C1EA  F079         	movff	F32_writeFile@cluster,F32_getSetNextCluster@clusterNumber
  3846  00168C  C1EB  F07A         	movff	F32_writeFile@cluster+1,F32_getSetNextCluster@clusterNumber+1
  3847  001690  C1EC  F07B         	movff	F32_writeFile@cluster+2,F32_getSetNextCluster@clusterNumber+2
  3848  001694  C1ED  F07C         	movff	F32_writeFile@cluster+3,F32_getSetNextCluster@clusterNumber+3
  3849  001698  0E01               	movlw	1
  3850  00169A  0100               	movlb	0	; () banked
  3851  00169C  6F7D               	movwf	F32_getSetNextCluster@get_set& (0+255),b
  3852  00169E  0EFF               	movlw	255
  3853  0016A0  0100               	movlb	0	; () banked
  3854  0016A2  6F7E               	movwf	F32_getSetNextCluster@clusterEntry& (0+255),b
  3855  0016A4  0EFF               	movlw	255
  3856  0016A6  0100               	movlb	0	; () banked
  3857  0016A8  6F7F               	movwf	(F32_getSetNextCluster@clusterEntry+1)& (0+255),b
  3858  0016AA  0EFF               	movlw	255
  3859  0016AC  0100               	movlb	0	; () banked
  3860  0016AE  6F80               	movwf	(F32_getSetNextCluster@clusterEntry+2)& (0+255),b
  3861  0016B0  0E0F               	movlw	15
  3862  0016B2  0100               	movlb	0	; () banked
  3863  0016B4  6F81               	movwf	(F32_getSetNextCluster@clusterEntry+3)& (0+255),b
  3864  0016B6  EC57  F018         	call	_F32_getSetNextCluster	;wreg free
  3865  0016BA  D6AF               	goto	l4284
  3866  0016BC                     l4354:
  3867                           
  3868                           ;rosso_f32.h: 623: }
  3869                           ;rosso_f32.h: 625: F32_getSetFreeCluster(2, 1, cluster);
  3870  0016BC  0E01               	movlw	1
  3871  0016BE  0100               	movlb	0	; () banked
  3872  0016C0  6F75               	movwf	F32_getSetFreeCluster@get_set& (0+255),b
  3873  0016C2  C1EA  F076         	movff	F32_writeFile@cluster,F32_getSetFreeCluster@FSEntry
  3874  0016C6  C1EB  F077         	movff	F32_writeFile@cluster+1,F32_getSetFreeCluster@FSEntry+1
  3875  0016CA  C1EC  F078         	movff	F32_writeFile@cluster+2,F32_getSetFreeCluster@FSEntry+2
  3876  0016CE  C1ED  F079         	movff	F32_writeFile@cluster+3,F32_getSetFreeCluster@FSEntry+3
  3877  0016D2  0E02               	movlw	2
  3878  0016D4  EC4C  F019         	call	_F32_getSetFreeCluster
  3879                           
  3880                           ;rosso_f32.h: 627: error = getDateTime_FAT();
  3881  0016D8  EC6B  F01F         	call	_getDateTime_FAT	;wreg free
  3882  0016DC  0101               	movlb	1	; () banked
  3883  0016DE  6FD4               	movwf	F32_writeFile@error& (0+255),b
  3884                           
  3885                           ; BSR set to: 1
  3886                           ;rosso_f32.h: 628: if (error) {
  3887  0016E0  0101               	movlb	1	; () banked
  3888  0016E2  51D4               	movf	F32_writeFile@error& (0+255),w,b
  3889  0016E4  B4D8               	btfsc	status,2,c
  3890  0016E6  D008               	goto	l397
  3891                           
  3892                           ; BSR set to: 1
  3893                           ;rosso_f32.h: 629: dateFAT = 0;
  3894  0016E8  0E00               	movlw	0
  3895  0016EA  6E38               	movwf	_dateFAT+1,c
  3896  0016EC  0E00               	movlw	0
  3897  0016EE  6E37               	movwf	_dateFAT,c
  3898                           
  3899                           ;rosso_f32.h: 630: timeFAT = 0;
  3900  0016F0  0E00               	movlw	0
  3901  0016F2  6E3C               	movwf	_timeFAT+1,c
  3902  0016F4  0E00               	movlw	0
  3903  0016F6  6E3B               	movwf	_timeFAT,c
  3904  0016F8                     l397:
  3905                           
  3906                           ; BSR set to: 1
  3907                           ;rosso_f32.h: 631: }
  3908                           ;rosso_f32.h: 633: if (appendFile)
  3909  0016F8  0101               	movlb	1	; () banked
  3910  0016FA  51D3               	movf	F32_writeFile@appendFile& (0+255),w,b
  3911  0016FC  B4D8               	btfsc	status,2,c
  3912  0016FE  D099               	goto	l398
  3913                           
  3914                           ; BSR set to: 1
  3915                           ;rosso_f32.h: 634: {
  3916                           ;rosso_f32.h: 635: SD_readSingleBlock(appendFileSector);
  3917  001700  C108  F06C         	movff	_appendFileSector,SD_readSingleBlock@SD_startBlock
  3918  001704  C109  F06D         	movff	_appendFileSector+1,SD_readSingleBlock@SD_startBlock+1
  3919  001708  C10A  F06E         	movff	_appendFileSector+2,SD_readSingleBlock@SD_startBlock+2
  3920  00170C  C10B  F06F         	movff	_appendFileSector+3,SD_readSingleBlock@SD_startBlock+3
  3921  001710  EC2C  F01D         	call	_SD_readSingleBlock	;wreg free
  3922                           
  3923                           ;rosso_f32.h: 636: dir = (struct dir_Structure *) &SD_buffer[appendFileLocation];
  3924  001714  0EEE               	movlw	low _SD_buffer
  3925  001716  0100               	movlb	0	; () banked
  3926  001718  6FE3               	movwf	??_F32_writeFile& (0+255),b
  3927  00171A  0E01               	movlw	high _SD_buffer
  3928  00171C  6FE4               	movwf	(??_F32_writeFile+1)& (0+255),b
  3929  00171E  0101               	movlb	1	; () banked
  3930  001720  5104               	movf	_appendFileLocation& (0+255),w,b
  3931  001722  0100               	movlb	0	; () banked
  3932  001724  27E3               	addwf	??_F32_writeFile& (0+255),f,b
  3933  001726  0101               	movlb	1	; () banked
  3934  001728  5105               	movf	(_appendFileLocation+1)& (0+255),w,b
  3935  00172A  0100               	movlb	0	; () banked
  3936  00172C  23E4               	addwfc	(??_F32_writeFile+1)& (0+255),f,b
  3937  00172E  C0E3  F1E8         	movff	??_F32_writeFile,F32_writeFile@dir
  3938  001732  C0E4  F1E9         	movff	??_F32_writeFile+1,F32_writeFile@dir+1
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;rosso_f32.h: 638: dir->lastAccessDate = 0;
  3942  001736  0101               	movlb	1	; () banked
  3943  001738  EE20 F012          	lfsr	2,18
  3944  00173C  0101               	movlb	1	; () banked
  3945  00173E  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  3946  001740  26D9               	addwf	fsr2l,f,c
  3947  001742  0101               	movlb	1	; () banked
  3948  001744  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  3949  001746  22DA               	addwfc	fsr2h,f,c
  3950  001748  0E00               	movlw	0
  3951  00174A  6EDE               	movwf	postinc2,c
  3952  00174C  0E00               	movlw	0
  3953  00174E  6EDD               	movwf	postdec2,c
  3954                           
  3955                           ; BSR set to: 1
  3956                           ;rosso_f32.h: 639: dir->writeTime = timeFAT;
  3957  001750  0101               	movlb	1	; () banked
  3958  001752  EE20 F016          	lfsr	2,22
  3959  001756  0101               	movlb	1	; () banked
  3960  001758  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  3961  00175A  26D9               	addwf	fsr2l,f,c
  3962  00175C  0101               	movlb	1	; () banked
  3963  00175E  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  3964  001760  22DA               	addwfc	fsr2h,f,c
  3965  001762  C03B  FFDE         	movff	_timeFAT,postinc2
  3966  001766  C03C  FFDD         	movff	_timeFAT+1,postdec2
  3967                           
  3968                           ; BSR set to: 1
  3969                           ;rosso_f32.h: 640: dir->writeDate = dateFAT;
  3970  00176A  0101               	movlb	1	; () banked
  3971  00176C  EE20 F018          	lfsr	2,24
  3972  001770  0101               	movlb	1	; () banked
  3973  001772  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  3974  001774  26D9               	addwf	fsr2l,f,c
  3975  001776  0101               	movlb	1	; () banked
  3976  001778  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  3977  00177A  22DA               	addwfc	fsr2h,f,c
  3978  00177C  C037  FFDE         	movff	_dateFAT,postinc2
  3979  001780  C038  FFDD         	movff	_dateFAT+1,postdec2
  3980                           
  3981                           ; BSR set to: 1
  3982                           ;rosso_f32.h: 641: extraMemory = fileSize - dir->fileSize;
  3983  001784  0101               	movlb	1	; () banked
  3984  001786  EE20 F01C          	lfsr	2,28
  3985  00178A  0101               	movlb	1	; () banked
  3986  00178C  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  3987  00178E  26D9               	addwf	fsr2l,f,c
  3988  001790  0101               	movlb	1	; () banked
  3989  001792  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  3990  001794  22DA               	addwfc	fsr2h,f,c
  3991  001796  CFDE F0E3          	movff	postinc2,??_F32_writeFile
  3992  00179A  CFDE F0E4          	movff	postinc2,??_F32_writeFile+1
  3993  00179E  CFDE F0E5          	movff	postinc2,??_F32_writeFile+2
  3994  0017A2  CFDE F0E6          	movff	postinc2,??_F32_writeFile+3
  3995  0017A6  0100               	movlb	0	; () banked
  3996  0017A8  1FE3               	comf	??_F32_writeFile& (0+255),f,b
  3997  0017AA  1FE4               	comf	(??_F32_writeFile+1)& (0+255),f,b
  3998  0017AC  1FE5               	comf	(??_F32_writeFile+2)& (0+255),f,b
  3999  0017AE  1FE6               	comf	(??_F32_writeFile+3)& (0+255),f,b
  4000  0017B0  2BE3               	incf	??_F32_writeFile& (0+255),f,b
  4001  0017B2  0E00               	movlw	0
  4002  0017B4  23E4               	addwfc	(??_F32_writeFile+1)& (0+255),f,b
  4003  0017B6  23E5               	addwfc	(??_F32_writeFile+2)& (0+255),f,b
  4004  0017B8  23E6               	addwfc	(??_F32_writeFile+3)& (0+255),f,b
  4005  0017BA  5027               	movf	_fileSize,w,c
  4006  0017BC  0100               	movlb	0	; () banked
  4007  0017BE  25E3               	addwf	??_F32_writeFile& (0+255),w,b
  4008  0017C0  0101               	movlb	1	; () banked
  4009  0017C2  6FC2               	movwf	F32_writeFile@extraMemory& (0+255),b
  4010  0017C4  5028               	movf	_fileSize+1,w,c
  4011  0017C6  0100               	movlb	0	; () banked
  4012  0017C8  21E4               	addwfc	(??_F32_writeFile+1)& (0+255),w,b
  4013  0017CA  0101               	movlb	1	; () banked
  4014  0017CC  6FC3               	movwf	(F32_writeFile@extraMemory+1)& (0+255),b
  4015  0017CE  5029               	movf	_fileSize+2,w,c
  4016  0017D0  0100               	movlb	0	; () banked
  4017  0017D2  21E5               	addwfc	(??_F32_writeFile+2)& (0+255),w,b
  4018  0017D4  0101               	movlb	1	; () banked
  4019  0017D6  6FC4               	movwf	(F32_writeFile@extraMemory+2)& (0+255),b
  4020  0017D8  502A               	movf	_fileSize+3,w,c
  4021  0017DA  0100               	movlb	0	; () banked
  4022  0017DC  21E6               	addwfc	(??_F32_writeFile+3)& (0+255),w,b
  4023  0017DE  0101               	movlb	1	; () banked
  4024  0017E0  6FC5               	movwf	(F32_writeFile@extraMemory+3)& (0+255),b
  4025                           
  4026                           ; BSR set to: 1
  4027                           ;rosso_f32.h: 642: dir->fileSize = fileSize;
  4028  0017E2  0101               	movlb	1	; () banked
  4029  0017E4  EE20 F01C          	lfsr	2,28
  4030  0017E8  0101               	movlb	1	; () banked
  4031  0017EA  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  4032  0017EC  26D9               	addwf	fsr2l,f,c
  4033  0017EE  0101               	movlb	1	; () banked
  4034  0017F0  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  4035  0017F2  22DA               	addwfc	fsr2h,f,c
  4036  0017F4  C027  FFDE         	movff	_fileSize,postinc2
  4037  0017F8  C028  FFDE         	movff	_fileSize+1,postinc2
  4038  0017FC  C029  FFDE         	movff	_fileSize+2,postinc2
  4039  001800  C02A  FFDE         	movff	_fileSize+3,postinc2
  4040                           
  4041                           ; BSR set to: 1
  4042                           ;rosso_f32.h: 643: SD_writeSingleBlock(appendFileSector);
  4043  001804  C108  F06C         	movff	_appendFileSector,SD_writeSingleBlock@SD_startBlock
  4044  001808  C109  F06D         	movff	_appendFileSector+1,SD_writeSingleBlock@SD_startBlock+1
  4045  00180C  C10A  F06E         	movff	_appendFileSector+2,SD_writeSingleBlock@SD_startBlock+2
  4046  001810  C10B  F06F         	movff	_appendFileSector+3,SD_writeSingleBlock@SD_startBlock+3
  4047  001814  EC48  F01C         	call	_SD_writeSingleBlock	;wreg free
  4048                           
  4049                           ;rosso_f32.h: 644: F32_freeMemoryUpdate(1, extraMemory);
  4050  001818  C1C2  F081         	movff	F32_writeFile@extraMemory,F32_freeMemoryUpdate@size
  4051  00181C  C1C3  F082         	movff	F32_writeFile@extraMemory+1,F32_freeMemoryUpdate@size+1
  4052  001820  C1C4  F083         	movff	F32_writeFile@extraMemory+2,F32_freeMemoryUpdate@size+2
  4053  001824  C1C5  F084         	movff	F32_writeFile@extraMemory+3,F32_freeMemoryUpdate@size+3
  4054  001828  0E01               	movlw	1
  4055  00182A  ECEE  F014         	call	_F32_freeMemoryUpdate
  4056                           
  4057                           ;rosso_f32.h: 650: return 0;
  4058  00182E  0E00               	movlw	0
  4059  001830  0012               	return	
  4060  001832                     l398:
  4061                           
  4062                           ; BSR set to: 1
  4063                           ;rosso_f32.h: 651: }
  4064                           ;rosso_f32.h: 655: prevCluster = rootCluster;
  4065  001832  C02B  F1E1         	movff	_rootCluster,F32_writeFile@prevCluster	;volatile
  4066  001836  C02C  F1E2         	movff	_rootCluster+1,F32_writeFile@prevCluster+1	;volatile
  4067  00183A  C02D  F1E3         	movff	_rootCluster+2,F32_writeFile@prevCluster+2	;volatile
  4068  00183E  C02E  F1E4         	movff	_rootCluster+3,F32_writeFile@prevCluster+3	;volatile
  4069  001842                     l4384:
  4070                           
  4071                           ; BSR set to: 1
  4072                           ;rosso_f32.h: 658: firstSector = F32_getFirstSector(prevCluster);
  4073  001842  C1E1  F06C         	movff	F32_writeFile@prevCluster,F32_getFirstSector@clusterNumber
  4074  001846  C1E2  F06D         	movff	F32_writeFile@prevCluster+1,F32_getFirstSector@clusterNumber+1
  4075  00184A  C1E3  F06E         	movff	F32_writeFile@prevCluster+2,F32_getFirstSector@clusterNumber+2
  4076  00184E  C1E4  F06F         	movff	F32_writeFile@prevCluster+3,F32_getFirstSector@clusterNumber+3
  4077  001852  EC16  F01E         	call	_F32_getFirstSector	;wreg free
  4078  001856  C06C  F1DA         	movff	?_F32_getFirstSector,F32_writeFile@firstSector
  4079  00185A  C06D  F1DB         	movff	?_F32_getFirstSector+1,F32_writeFile@firstSector+1
  4080  00185E  C06E  F1DC         	movff	?_F32_getFirstSector+2,F32_writeFile@firstSector+2
  4081  001862  C06F  F1DD         	movff	?_F32_getFirstSector+3,F32_writeFile@firstSector+3
  4082                           
  4083                           ;rosso_f32.h: 660: for (sector = 0; sector < sectorPerCluster; sector++) {
  4084  001866  0E00               	movlw	0
  4085  001868  0101               	movlb	1	; () banked
  4086  00186A  6FE0               	movwf	F32_writeFile@sector& (0+255),b
  4087  00186C  D12D               	goto	l4430
  4088  00186E                     l4388:
  4089                           
  4090                           ;rosso_f32.h: 661: SD_readSingleBlock(firstSector + sector);
  4091  00186E  0101               	movlb	1	; () banked
  4092  001870  51E0               	movf	F32_writeFile@sector& (0+255),w,b
  4093  001872  0101               	movlb	1	; () banked
  4094  001874  25DA               	addwf	F32_writeFile@firstSector& (0+255),w,b
  4095  001876  0100               	movlb	0	; () banked
  4096  001878  6F6C               	movwf	SD_readSingleBlock@SD_startBlock& (0+255),b
  4097  00187A  0E00               	movlw	0
  4098  00187C  0101               	movlb	1	; () banked
  4099  00187E  21DB               	addwfc	(F32_writeFile@firstSector+1)& (0+255),w,b
  4100  001880  0100               	movlb	0	; () banked
  4101  001882  6F6D               	movwf	(SD_readSingleBlock@SD_startBlock+1)& (0+255),b
  4102  001884  0E00               	movlw	0
  4103  001886  0101               	movlb	1	; () banked
  4104  001888  21DC               	addwfc	(F32_writeFile@firstSector+2)& (0+255),w,b
  4105  00188A  0100               	movlb	0	; () banked
  4106  00188C  6F6E               	movwf	(SD_readSingleBlock@SD_startBlock+2)& (0+255),b
  4107  00188E  0E00               	movlw	0
  4108  001890  0101               	movlb	1	; () banked
  4109  001892  21DD               	addwfc	(F32_writeFile@firstSector+3)& (0+255),w,b
  4110  001894  0100               	movlb	0	; () banked
  4111  001896  6F6F               	movwf	(SD_readSingleBlock@SD_startBlock+3)& (0+255),b
  4112  001898  EC2C  F01D         	call	_SD_readSingleBlock	;wreg free
  4113                           
  4114                           ;rosso_f32.h: 663: for (i = 0; i < bytesPerSector; i += 32) {
  4115  00189C  0E00               	movlw	0
  4116  00189E  0101               	movlb	1	; () banked
  4117  0018A0  6FE6               	movwf	(F32_writeFile@i+1)& (0+255),b
  4118  0018A2  0E00               	movlw	0
  4119  0018A4  0101               	movlb	1	; () banked
  4120  0018A6  6FE5               	movwf	F32_writeFile@i& (0+255),b
  4121  0018A8  D103               	goto	l4426
  4122  0018AA                     l4392:
  4123                           
  4124                           ; BSR set to: 1
  4125                           ;rosso_f32.h: 664: dir = (struct dir_Structure *) &SD_buffer[i];
  4126  0018AA  0EEE               	movlw	low _SD_buffer
  4127  0018AC  0100               	movlb	0	; () banked
  4128  0018AE  6FE3               	movwf	??_F32_writeFile& (0+255),b
  4129  0018B0  0E01               	movlw	high _SD_buffer
  4130  0018B2  6FE4               	movwf	(??_F32_writeFile+1)& (0+255),b
  4131  0018B4  0101               	movlb	1	; () banked
  4132  0018B6  51E5               	movf	F32_writeFile@i& (0+255),w,b
  4133  0018B8  0100               	movlb	0	; () banked
  4134  0018BA  27E3               	addwf	??_F32_writeFile& (0+255),f,b
  4135  0018BC  0101               	movlb	1	; () banked
  4136  0018BE  51E6               	movf	(F32_writeFile@i+1)& (0+255),w,b
  4137  0018C0  0100               	movlb	0	; () banked
  4138  0018C2  23E4               	addwfc	(??_F32_writeFile+1)& (0+255),f,b
  4139  0018C4  C0E3  F1E8         	movff	??_F32_writeFile,F32_writeFile@dir
  4140  0018C8  C0E4  F1E9         	movff	??_F32_writeFile+1,F32_writeFile@dir+1
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;rosso_f32.h: 666: if (fileCreatedFlag)
  4144  0018CC  0101               	movlb	1	; () banked
  4145  0018CE  51D2               	movf	F32_writeFile@fileCreatedFlag& (0+255),w,b
  4146  0018D0  B4D8               	btfsc	status,2,c
  4147  0018D2  D002               	goto	l4400
  4148                           
  4149                           ; BSR set to: 1
  4150                           ;rosso_f32.h: 667: {
  4151                           ;rosso_f32.h: 670: return 0;
  4152  0018D4  0E00               	movlw	0
  4153  0018D6  0012               	return	
  4154  0018D8                     l4400:
  4155                           
  4156                           ; BSR set to: 1
  4157                           ;rosso_f32.h: 671: }
  4158                           ;rosso_f32.h: 673: if ((dir->name[0] == 0x00) || (dir->name[0] == 0xe5))
  4159  0018D8  C1E8  FFD9         	movff	F32_writeFile@dir,fsr2l
  4160  0018DC  C1E9  FFDA         	movff	F32_writeFile@dir+1,fsr2h
  4161  0018E0  50DF               	movf	indf2,w,c
  4162  0018E2  B4D8               	btfsc	status,2,c
  4163  0018E4  D007               	goto	l4404
  4164                           
  4165                           ; BSR set to: 1
  4166  0018E6  0EE5               	movlw	229
  4167  0018E8  C1E8  FFD9         	movff	F32_writeFile@dir,fsr2l
  4168  0018EC  C1E9  FFDA         	movff	F32_writeFile@dir+1,fsr2h
  4169  0018F0  62DF               	cpfseq	indf2,c
  4170  0018F2  D0D8               	goto	l4424
  4171  0018F4                     l4404:
  4172                           
  4173                           ; BSR set to: 1
  4174                           ;rosso_f32.h: 674: {
  4175                           ;rosso_f32.h: 675: for (j = 0; j < 11; j++)
  4176  0018F4  0E00               	movlw	0
  4177  0018F6  0101               	movlb	1	; () banked
  4178  0018F8  6FE7               	movwf	F32_writeFile@j& (0+255),b
  4179  0018FA  D01A               	goto	L6
  4180  0018FC                     l4410:
  4181                           
  4182                           ; BSR set to: 1
  4183                           ;rosso_f32.h: 676: dir->name[j] = fileName[j];
  4184  0018FC  0101               	movlb	1	; () banked
  4185  0018FE  51E7               	movf	F32_writeFile@j& (0+255),w,b
  4186  001900  0D01               	mullw	1
  4187  001902  50F3               	movf	prodl,w,c
  4188  001904  0100               	movlb	0	; () banked
  4189  001906  25DF               	addwf	F32_writeFile@fileName& (0+255),w,b
  4190  001908  6ED9               	movwf	fsr2l,c
  4191  00190A  50F4               	movf	prodh,w,c
  4192  00190C  0100               	movlb	0	; () banked
  4193  00190E  21E0               	addwfc	(F32_writeFile@fileName+1)& (0+255),w,b
  4194  001910  6EDA               	movwf	fsr2h,c
  4195  001912  0101               	movlb	1	; () banked
  4196  001914  51E7               	movf	F32_writeFile@j& (0+255),w,b
  4197  001916  0D01               	mullw	1
  4198  001918  50F3               	movf	prodl,w,c
  4199  00191A  0101               	movlb	1	; () banked
  4200  00191C  25E8               	addwf	F32_writeFile@dir& (0+255),w,b
  4201  00191E  6EE1               	movwf	fsr1l,c
  4202  001920  50F4               	movf	prodh,w,c
  4203  001922  0101               	movlb	1	; () banked
  4204  001924  21E9               	addwfc	(F32_writeFile@dir+1)& (0+255),w,b
  4205  001926  6EE2               	movwf	fsr1h,c
  4206  001928  CFDF FFE7          	movff	indf2,indf1
  4207                           
  4208                           ; BSR set to: 1
  4209  00192C  0101               	movlb	1	; () banked
  4210  00192E  2BE7               	incf	F32_writeFile@j& (0+255),f,b
  4211  001930                     L6:
  4212                           
  4213                           ; BSR set to: 1
  4214  001930  0E0A               	movlw	10
  4215  001932  0101               	movlb	1	; () banked
  4216  001934  65E7               	cpfsgt	F32_writeFile@j& (0+255),b
  4217  001936  D7E2               	goto	l4410
  4218                           
  4219                           ; BSR set to: 1
  4220                           ;rosso_f32.h: 677: dir->attrib = 0x20;
  4221                           
  4222                           ; BSR set to: 1
  4223  001938  0101               	movlb	1	; () banked
  4224  00193A  EE20 F00B          	lfsr	2,11
  4225  00193E  0101               	movlb	1	; () banked
  4226  001940  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  4227  001942  26D9               	addwf	fsr2l,f,c
  4228  001944  0101               	movlb	1	; () banked
  4229  001946  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  4230  001948  22DA               	addwfc	fsr2h,f,c
  4231  00194A  0E20               	movlw	32
  4232  00194C  6EDF               	movwf	indf2,c
  4233                           
  4234                           ;rosso_f32.h: 678: dir->NTreserved = 0;
  4235  00194E  0101               	movlb	1	; () banked
  4236  001950  EE20 F00C          	lfsr	2,12
  4237  001954  0101               	movlb	1	; () banked
  4238  001956  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  4239  001958  26D9               	addwf	fsr2l,f,c
  4240  00195A  0101               	movlb	1	; () banked
  4241  00195C  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  4242  00195E  22DA               	addwfc	fsr2h,f,c
  4243  001960  0E00               	movlw	0
  4244  001962  6EDF               	movwf	indf2,c
  4245                           
  4246                           ;rosso_f32.h: 679: dir->timeTenth = 0;
  4247  001964  0101               	movlb	1	; () banked
  4248  001966  EE20 F00D          	lfsr	2,13
  4249  00196A  0101               	movlb	1	; () banked
  4250  00196C  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  4251  00196E  26D9               	addwf	fsr2l,f,c
  4252  001970  0101               	movlb	1	; () banked
  4253  001972  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  4254  001974  22DA               	addwfc	fsr2h,f,c
  4255  001976  0E00               	movlw	0
  4256  001978  6EDF               	movwf	indf2,c
  4257                           
  4258                           ;rosso_f32.h: 680: dir->createTime = timeFAT;
  4259  00197A  0101               	movlb	1	; () banked
  4260  00197C  EE20 F00E          	lfsr	2,14
  4261  001980  0101               	movlb	1	; () banked
  4262  001982  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  4263  001984  26D9               	addwf	fsr2l,f,c
  4264  001986  0101               	movlb	1	; () banked
  4265  001988  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  4266  00198A  22DA               	addwfc	fsr2h,f,c
  4267  00198C  C03B  FFDE         	movff	_timeFAT,postinc2
  4268  001990  C03C  FFDD         	movff	_timeFAT+1,postdec2
  4269                           
  4270                           ;rosso_f32.h: 681: dir->createDate = dateFAT;
  4271  001994  0101               	movlb	1	; () banked
  4272  001996  EE20 F010          	lfsr	2,16
  4273  00199A  0101               	movlb	1	; () banked
  4274  00199C  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  4275  00199E  26D9               	addwf	fsr2l,f,c
  4276  0019A0  0101               	movlb	1	; () banked
  4277  0019A2  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  4278  0019A4  22DA               	addwfc	fsr2h,f,c
  4279  0019A6  C037  FFDE         	movff	_dateFAT,postinc2
  4280  0019AA  C038  FFDD         	movff	_dateFAT+1,postdec2
  4281                           
  4282                           ;rosso_f32.h: 682: dir->lastAccessDate = 0;
  4283  0019AE  0101               	movlb	1	; () banked
  4284  0019B0  EE20 F012          	lfsr	2,18
  4285  0019B4  0101               	movlb	1	; () banked
  4286  0019B6  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  4287  0019B8  26D9               	addwf	fsr2l,f,c
  4288  0019BA  0101               	movlb	1	; () banked
  4289  0019BC  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  4290  0019BE  22DA               	addwfc	fsr2h,f,c
  4291  0019C0  0E00               	movlw	0
  4292  0019C2  6EDE               	movwf	postinc2,c
  4293  0019C4  0E00               	movlw	0
  4294  0019C6  6EDD               	movwf	postdec2,c
  4295                           
  4296                           ;rosso_f32.h: 683: dir->writeTime = timeFAT;
  4297  0019C8  0101               	movlb	1	; () banked
  4298  0019CA  EE20 F016          	lfsr	2,22
  4299  0019CE  0101               	movlb	1	; () banked
  4300  0019D0  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  4301  0019D2  26D9               	addwf	fsr2l,f,c
  4302  0019D4  0101               	movlb	1	; () banked
  4303  0019D6  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  4304  0019D8  22DA               	addwfc	fsr2h,f,c
  4305  0019DA  C03B  FFDE         	movff	_timeFAT,postinc2
  4306  0019DE  C03C  FFDD         	movff	_timeFAT+1,postdec2
  4307                           
  4308                           ;rosso_f32.h: 684: dir->writeDate = dateFAT;
  4309  0019E2  0101               	movlb	1	; () banked
  4310  0019E4  EE20 F018          	lfsr	2,24
  4311  0019E8  0101               	movlb	1	; () banked
  4312  0019EA  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  4313  0019EC  26D9               	addwf	fsr2l,f,c
  4314  0019EE  0101               	movlb	1	; () banked
  4315  0019F0  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  4316  0019F2  22DA               	addwfc	fsr2h,f,c
  4317  0019F4  C037  FFDE         	movff	_dateFAT,postinc2
  4318  0019F8  C038  FFDD         	movff	_dateFAT+1,postdec2
  4319                           
  4320                           ;rosso_f32.h: 685: dir->firstClusterHI = firstClusterHigh;
  4321  0019FC  0101               	movlb	1	; () banked
  4322  0019FE  EE20 F014          	lfsr	2,20
  4323  001A02  0101               	movlb	1	; () banked
  4324  001A04  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  4325  001A06  26D9               	addwf	fsr2l,f,c
  4326  001A08  0101               	movlb	1	; () banked
  4327  001A0A  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  4328  001A0C  22DA               	addwfc	fsr2h,f,c
  4329  001A0E  0101               	movlb	1	; () banked
  4330  001A10  C1CE  FFDE         	movff	F32_writeFile@firstClusterHigh,postinc2
  4331  001A14  0101               	movlb	1	; () banked
  4332  001A16  C1CF  FFDD         	movff	F32_writeFile@firstClusterHigh+1,postdec2
  4333                           
  4334                           ;rosso_f32.h: 686: dir->firstClusterLO = firstClusterLow;
  4335  001A1A  0101               	movlb	1	; () banked
  4336  001A1C  EE20 F01A          	lfsr	2,26
  4337  001A20  0101               	movlb	1	; () banked
  4338  001A22  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  4339  001A24  26D9               	addwf	fsr2l,f,c
  4340  001A26  0101               	movlb	1	; () banked
  4341  001A28  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  4342  001A2A  22DA               	addwfc	fsr2h,f,c
  4343  001A2C  0101               	movlb	1	; () banked
  4344  001A2E  C1D0  FFDE         	movff	F32_writeFile@firstClusterLow,postinc2
  4345  001A32  0101               	movlb	1	; () banked
  4346  001A34  C1D1  FFDD         	movff	F32_writeFile@firstClusterLow+1,postdec2
  4347                           
  4348                           ;rosso_f32.h: 687: dir->fileSize = fileSize;
  4349  001A38  0101               	movlb	1	; () banked
  4350  001A3A  EE20 F01C          	lfsr	2,28
  4351  001A3E  0101               	movlb	1	; () banked
  4352  001A40  51E8               	movf	F32_writeFile@dir& (0+255),w,b
  4353  001A42  26D9               	addwf	fsr2l,f,c
  4354  001A44  0101               	movlb	1	; () banked
  4355  001A46  51E9               	movf	(F32_writeFile@dir+1)& (0+255),w,b
  4356  001A48  22DA               	addwfc	fsr2h,f,c
  4357  001A4A  C027  FFDE         	movff	_fileSize,postinc2
  4358  001A4E  C028  FFDE         	movff	_fileSize+1,postinc2
  4359  001A52  C029  FFDE         	movff	_fileSize+2,postinc2
  4360  001A56  C02A  FFDE         	movff	_fileSize+3,postinc2
  4361                           
  4362                           ; BSR set to: 1
  4363                           ;rosso_f32.h: 689: SD_writeSingleBlock(firstSector + sector);
  4364  001A5A  0101               	movlb	1	; () banked
  4365  001A5C  51E0               	movf	F32_writeFile@sector& (0+255),w,b
  4366  001A5E  0101               	movlb	1	; () banked
  4367  001A60  25DA               	addwf	F32_writeFile@firstSector& (0+255),w,b
  4368  001A62  0100               	movlb	0	; () banked
  4369  001A64  6F6C               	movwf	SD_writeSingleBlock@SD_startBlock& (0+255),b
  4370  001A66  0E00               	movlw	0
  4371  001A68  0101               	movlb	1	; () banked
  4372  001A6A  21DB               	addwfc	(F32_writeFile@firstSector+1)& (0+255),w,b
  4373  001A6C  0100               	movlb	0	; () banked
  4374  001A6E  6F6D               	movwf	(SD_writeSingleBlock@SD_startBlock+1)& (0+255),b
  4375  001A70  0E00               	movlw	0
  4376  001A72  0101               	movlb	1	; () banked
  4377  001A74  21DC               	addwfc	(F32_writeFile@firstSector+2)& (0+255),w,b
  4378  001A76  0100               	movlb	0	; () banked
  4379  001A78  6F6E               	movwf	(SD_writeSingleBlock@SD_startBlock+2)& (0+255),b
  4380  001A7A  0E00               	movlw	0
  4381  001A7C  0101               	movlb	1	; () banked
  4382  001A7E  21DD               	addwfc	(F32_writeFile@firstSector+3)& (0+255),w,b
  4383  001A80  0100               	movlb	0	; () banked
  4384  001A82  6F6F               	movwf	(SD_writeSingleBlock@SD_startBlock+3)& (0+255),b
  4385  001A84  EC48  F01C         	call	_SD_writeSingleBlock	;wreg free
  4386                           
  4387                           ;rosso_f32.h: 690: fileCreatedFlag = 1;
  4388  001A88  0E01               	movlw	1
  4389  001A8A  0101               	movlb	1	; () banked
  4390  001A8C  6FD2               	movwf	F32_writeFile@fileCreatedFlag& (0+255),b
  4391                           
  4392                           ; BSR set to: 1
  4393                           ;rosso_f32.h: 697: F32_freeMemoryUpdate(1, fileSize);
  4394  001A8E  C027  F081         	movff	_fileSize,F32_freeMemoryUpdate@size
  4395  001A92  C028  F082         	movff	_fileSize+1,F32_freeMemoryUpdate@size+1
  4396  001A96  C029  F083         	movff	_fileSize+2,F32_freeMemoryUpdate@size+2
  4397  001A9A  C02A  F084         	movff	_fileSize+3,F32_freeMemoryUpdate@size+3
  4398  001A9E  0E01               	movlw	1
  4399  001AA0  ECEE  F014         	call	_F32_freeMemoryUpdate
  4400  001AA4                     l4424:
  4401  001AA4  0E20               	movlw	32
  4402  001AA6  0101               	movlb	1	; () banked
  4403  001AA8  27E5               	addwf	F32_writeFile@i& (0+255),f,b
  4404  001AAA  0E00               	movlw	0
  4405  001AAC  0101               	movlb	1	; () banked
  4406  001AAE  23E6               	addwfc	(F32_writeFile@i+1)& (0+255),f,b
  4407  001AB0                     l4426:
  4408                           
  4409                           ; BSR set to: 1
  4410  001AB0  0100               	movlb	0	; () banked
  4411  001AB2  51EE               	movf	_bytesPerSector& (0+255),w,b	;volatile
  4412  001AB4  0101               	movlb	1	; () banked
  4413  001AB6  5DE5               	subwf	F32_writeFile@i& (0+255),w,b
  4414  001AB8  0100               	movlb	0	; () banked
  4415  001ABA  51EF               	movf	(_bytesPerSector+1)& (0+255),w,b	;volatile
  4416  001ABC  0101               	movlb	1	; () banked
  4417  001ABE  59E6               	subwfb	(F32_writeFile@i+1)& (0+255),w,b
  4418  001AC0  A0D8               	btfss	status,0,c
  4419  001AC2  D6F3               	goto	l4392
  4420                           
  4421                           ; BSR set to: 1
  4422                           
  4423                           ; BSR set to: 1
  4424  001AC4  0101               	movlb	1	; () banked
  4425  001AC6  2BE0               	incf	F32_writeFile@sector& (0+255),f,b
  4426  001AC8                     l4430:
  4427                           
  4428                           ; BSR set to: 1
  4429  001AC8  0101               	movlb	1	; () banked
  4430  001ACA  51E0               	movf	F32_writeFile@sector& (0+255),w,b
  4431  001ACC  0100               	movlb	0	; () banked
  4432  001ACE  6FE3               	movwf	??_F32_writeFile& (0+255),b
  4433  001AD0  6BE4               	clrf	(??_F32_writeFile+1)& (0+255),b
  4434  001AD2  503F               	movf	_sectorPerCluster,w,c	;volatile
  4435  001AD4  0100               	movlb	0	; () banked
  4436  001AD6  5DE3               	subwf	??_F32_writeFile& (0+255),w,b
  4437  001AD8  5040               	movf	_sectorPerCluster+1,w,c	;volatile
  4438  001ADA  0100               	movlb	0	; () banked
  4439  001ADC  59E4               	subwfb	(??_F32_writeFile+1)& (0+255),w,b
  4440  001ADE  A0D8               	btfss	status,0,c
  4441  001AE0  D6C6               	goto	l4388
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;rosso_f32.h: 699: }
  4445                           ;rosso_f32.h: 700: }
  4446                           ;rosso_f32.h: 701: }
  4447                           ;rosso_f32.h: 703: cluster = F32_getSetNextCluster(prevCluster, 0, 0);
  4448                           
  4449                           ; BSR set to: 0
  4450  001AE2  C1E1  F079         	movff	F32_writeFile@prevCluster,F32_getSetNextCluster@clusterNumber
  4451  001AE6  C1E2  F07A         	movff	F32_writeFile@prevCluster+1,F32_getSetNextCluster@clusterNumber+1
  4452  001AEA  C1E3  F07B         	movff	F32_writeFile@prevCluster+2,F32_getSetNextCluster@clusterNumber+2
  4453  001AEE  C1E4  F07C         	movff	F32_writeFile@prevCluster+3,F32_getSetNextCluster@clusterNumber+3
  4454  001AF2  0E00               	movlw	0
  4455  001AF4  0100               	movlb	0	; () banked
  4456  001AF6  6F7D               	movwf	F32_getSetNextCluster@get_set& (0+255),b
  4457  001AF8  0E00               	movlw	0
  4458  001AFA  0100               	movlb	0	; () banked
  4459  001AFC  6F7E               	movwf	F32_getSetNextCluster@clusterEntry& (0+255),b
  4460  001AFE  0E00               	movlw	0
  4461  001B00  0100               	movlb	0	; () banked
  4462  001B02  6F7F               	movwf	(F32_getSetNextCluster@clusterEntry+1)& (0+255),b
  4463  001B04  0E00               	movlw	0
  4464  001B06  0100               	movlb	0	; () banked
  4465  001B08  6F80               	movwf	(F32_getSetNextCluster@clusterEntry+2)& (0+255),b
  4466  001B0A  0E00               	movlw	0
  4467  001B0C  0100               	movlb	0	; () banked
  4468  001B0E  6F81               	movwf	(F32_getSetNextCluster@clusterEntry+3)& (0+255),b
  4469  001B10  EC57  F018         	call	_F32_getSetNextCluster	;wreg free
  4470  001B14  C079  F1EA         	movff	?_F32_getSetNextCluster,F32_writeFile@cluster
  4471  001B18  C07A  F1EB         	movff	?_F32_getSetNextCluster+1,F32_writeFile@cluster+1
  4472  001B1C  C07B  F1EC         	movff	?_F32_getSetNextCluster+2,F32_writeFile@cluster+2
  4473  001B20  C07C  F1ED         	movff	?_F32_getSetNextCluster+3,F32_writeFile@cluster+3
  4474                           
  4475                           ;rosso_f32.h: 705: if (cluster > 0x0ffffff6) {
  4476  001B24  0EF7               	movlw	247
  4477  001B26  0101               	movlb	1	; () banked
  4478  001B28  5DEA               	subwf	F32_writeFile@cluster& (0+255),w,b
  4479  001B2A  0EFF               	movlw	255
  4480  001B2C  0101               	movlb	1	; () banked
  4481  001B2E  59EB               	subwfb	(F32_writeFile@cluster+1)& (0+255),w,b
  4482  001B30  0EFF               	movlw	255
  4483  001B32  0101               	movlb	1	; () banked
  4484  001B34  59EC               	subwfb	(F32_writeFile@cluster+2)& (0+255),w,b
  4485  001B36  0E0F               	movlw	15
  4486  001B38  0101               	movlb	1	; () banked
  4487  001B3A  59ED               	subwfb	(F32_writeFile@cluster+3)& (0+255),w,b
  4488  001B3C  A0D8               	btfss	status,0,c
  4489  001B3E  D04E               	goto	l4448
  4490                           
  4491                           ; BSR set to: 1
  4492                           ;rosso_f32.h: 706: if (cluster == 0x0fffffff)
  4493  001B40  0101               	movlb	1	; () banked
  4494  001B42  29EA               	incf	F32_writeFile@cluster& (0+255),w,b
  4495  001B44  B4D8               	btfsc	status,2,c
  4496  001B46  29EB               	incf	(F32_writeFile@cluster+1)& (0+255),w,b
  4497  001B48  B4D8               	btfsc	status,2,c
  4498  001B4A  29EC               	incf	(F32_writeFile@cluster+2)& (0+255),w,b
  4499  001B4C  0E0F               	movlw	15
  4500  001B4E  B4D8               	btfsc	status,2,c
  4501  001B50  19ED               	xorwf	(F32_writeFile@cluster+3)& (0+255),w,b
  4502  001B52  A4D8               	btfss	status,2,c
  4503  001B54  D041               	goto	l4444
  4504                           
  4505                           ; BSR set to: 1
  4506                           ;rosso_f32.h: 707: {
  4507                           ;rosso_f32.h: 708: cluster = F32_searchNextFreeCluster(prevCluster);
  4508  001B56  C1E1  F079         	movff	F32_writeFile@prevCluster,F32_searchNextFreeCluster@startCluster
  4509  001B5A  C1E2  F07A         	movff	F32_writeFile@prevCluster+1,F32_searchNextFreeCluster@startCluster+1
  4510  001B5E  C1E3  F07B         	movff	F32_writeFile@prevCluster+2,F32_searchNextFreeCluster@startCluster+2
  4511  001B62  C1E4  F07C         	movff	F32_writeFile@prevCluster+3,F32_searchNextFreeCluster@startCluster+3
  4512  001B66  EC55  F017         	call	_F32_searchNextFreeCluster	;wreg free
  4513  001B6A  C079  F1EA         	movff	?_F32_searchNextFreeCluster,F32_writeFile@cluster
  4514  001B6E  C07A  F1EB         	movff	?_F32_searchNextFreeCluster+1,F32_writeFile@cluster+1
  4515  001B72  C07B  F1EC         	movff	?_F32_searchNextFreeCluster+2,F32_writeFile@cluster+2
  4516  001B76  C07C  F1ED         	movff	?_F32_searchNextFreeCluster+3,F32_writeFile@cluster+3
  4517                           
  4518                           ;rosso_f32.h: 709: F32_getSetNextCluster(prevCluster, 1, cluster);
  4519  001B7A  C1E1  F079         	movff	F32_writeFile@prevCluster,F32_getSetNextCluster@clusterNumber
  4520  001B7E  C1E2  F07A         	movff	F32_writeFile@prevCluster+1,F32_getSetNextCluster@clusterNumber+1
  4521  001B82  C1E3  F07B         	movff	F32_writeFile@prevCluster+2,F32_getSetNextCluster@clusterNumber+2
  4522  001B86  C1E4  F07C         	movff	F32_writeFile@prevCluster+3,F32_getSetNextCluster@clusterNumber+3
  4523  001B8A  0E01               	movlw	1
  4524  001B8C  0100               	movlb	0	; () banked
  4525  001B8E  6F7D               	movwf	F32_getSetNextCluster@get_set& (0+255),b
  4526  001B90  C1EA  F07E         	movff	F32_writeFile@cluster,F32_getSetNextCluster@clusterEntry
  4527  001B94  C1EB  F07F         	movff	F32_writeFile@cluster+1,F32_getSetNextCluster@clusterEntry+1
  4528  001B98  C1EC  F080         	movff	F32_writeFile@cluster+2,F32_getSetNextCluster@clusterEntry+2
  4529  001B9C  C1ED  F081         	movff	F32_writeFile@cluster+3,F32_getSetNextCluster@clusterEntry+3
  4530  001BA0  EC57  F018         	call	_F32_getSetNextCluster	;wreg free
  4531                           
  4532                           ;rosso_f32.h: 710: F32_getSetNextCluster(cluster, 1, 0x0fffffff);
  4533  001BA4  C1EA  F079         	movff	F32_writeFile@cluster,F32_getSetNextCluster@clusterNumber
  4534  001BA8  C1EB  F07A         	movff	F32_writeFile@cluster+1,F32_getSetNextCluster@clusterNumber+1
  4535  001BAC  C1EC  F07B         	movff	F32_writeFile@cluster+2,F32_getSetNextCluster@clusterNumber+2
  4536  001BB0  C1ED  F07C         	movff	F32_writeFile@cluster+3,F32_getSetNextCluster@clusterNumber+3
  4537  001BB4  0E01               	movlw	1
  4538  001BB6  0100               	movlb	0	; () banked
  4539  001BB8  6F7D               	movwf	F32_getSetNextCluster@get_set& (0+255),b
  4540  001BBA  0EFF               	movlw	255
  4541  001BBC  0100               	movlb	0	; () banked
  4542  001BBE  6F7E               	movwf	F32_getSetNextCluster@clusterEntry& (0+255),b
  4543  001BC0  0EFF               	movlw	255
  4544  001BC2  0100               	movlb	0	; () banked
  4545  001BC4  6F7F               	movwf	(F32_getSetNextCluster@clusterEntry+1)& (0+255),b
  4546  001BC6  0EFF               	movlw	255
  4547  001BC8  0100               	movlb	0	; () banked
  4548  001BCA  6F80               	movwf	(F32_getSetNextCluster@clusterEntry+2)& (0+255),b
  4549  001BCC  0E0F               	movlw	15
  4550  001BCE  0100               	movlb	0	; () banked
  4551  001BD0  6F81               	movwf	(F32_getSetNextCluster@clusterEntry+3)& (0+255),b
  4552  001BD2  EC57  F018         	call	_F32_getSetNextCluster	;wreg free
  4553                           
  4554                           ;rosso_f32.h: 711: }
  4555  001BD6  D002               	goto	l4448
  4556  001BD8                     l4444:
  4557                           
  4558                           ;rosso_f32.h: 712: else {
  4559                           ;rosso_f32.h: 716: return 1;
  4560  001BD8  0E01               	movlw	1
  4561  001BDA  0012               	return	
  4562  001BDC                     l4448:
  4563                           
  4564                           ;rosso_f32.h: 717: }
  4565                           ;rosso_f32.h: 718: }
  4566                           ;rosso_f32.h: 719: if (cluster == 0) {
  4567  001BDC  0101               	movlb	1	; () banked
  4568  001BDE  51ED               	movf	(F32_writeFile@cluster+3)& (0+255),w,b
  4569  001BE0  11EA               	iorwf	F32_writeFile@cluster& (0+255),w,b
  4570  001BE2  11EB               	iorwf	(F32_writeFile@cluster+1)& (0+255),w,b
  4571  001BE4  11EC               	iorwf	(F32_writeFile@cluster+2)& (0+255),w,b
  4572  001BE6  A4D8               	btfss	status,2,c
  4573  001BE8  D002               	goto	l415
  4574                           
  4575                           ; BSR set to: 1
  4576                           ;rosso_f32.h: 723: return 1;
  4577  001BEA  0E01               	movlw	1
  4578  001BEC  0012               	return	
  4579  001BEE                     l415:
  4580                           
  4581                           ; BSR set to: 1
  4582                           ;rosso_f32.h: 724: }
  4583                           ;rosso_f32.h: 726: prevCluster = cluster;
  4584  001BEE  C1EA  F1E1         	movff	F32_writeFile@cluster,F32_writeFile@prevCluster
  4585  001BF2  C1EB  F1E2         	movff	F32_writeFile@cluster+1,F32_writeFile@prevCluster+1
  4586  001BF6  C1EC  F1E3         	movff	F32_writeFile@cluster+2,F32_writeFile@prevCluster+2
  4587  001BFA  C1ED  F1E4         	movff	F32_writeFile@cluster+3,F32_writeFile@prevCluster+3
  4588  001BFE  D621               	goto	l4384
  4589  001C00                     __end_of_F32_writeFile:
  4590                           	opt stack 0
  4591                           tblptru	equ	0xFF8
  4592                           tblptrh	equ	0xFF7
  4593                           tblptrl	equ	0xFF6
  4594                           tablat	equ	0xFF5
  4595                           prodh	equ	0xFF4
  4596                           prodl	equ	0xFF3
  4597                           postinc0	equ	0xFEE
  4598                           wreg	equ	0xFE8
  4599                           indf1	equ	0xFE7
  4600                           postdec1	equ	0xFE5
  4601                           fsr1h	equ	0xFE2
  4602                           fsr1l	equ	0xFE1
  4603                           indf2	equ	0xFDF
  4604                           postinc2	equ	0xFDE
  4605                           postdec2	equ	0xFDD
  4606                           fsr2h	equ	0xFDA
  4607                           fsr2l	equ	0xFD9
  4608                           status	equ	0xFD8
  4609                           
  4610 ;; *************** function _getDateTime_FAT *****************
  4611 ;; Defined at:
  4612 ;;		line 134 in file "../my_lib.X/rosso_f32.h"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;		None
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;		None
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  1    wreg      unsigned char 
  4619 ;; Registers used:
  4620 ;;		wreg
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;Total ram usage:        0 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:    2
  4633 ;; This function calls:
  4634 ;;		Nothing
  4635 ;; This function is called by:
  4636 ;;		_F32_writeFile
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text10
  4641  003ED6                     __ptext10:
  4642                           	opt stack 0
  4643  003ED6                     _getDateTime_FAT:
  4644                           	opt stack 27
  4645                           
  4646                           ;rosso_f32.h: 139: return 1;
  4647                           
  4648                           ;incstack = 0
  4649  003ED6  0E01               	movlw	1
  4650  003ED8  0012               	return	
  4651  003EDA                     __end_of_getDateTime_FAT:
  4652                           	opt stack 0
  4653                           tblptru	equ	0xFF8
  4654                           tblptrh	equ	0xFF7
  4655                           tblptrl	equ	0xFF6
  4656                           tablat	equ	0xFF5
  4657                           prodh	equ	0xFF4
  4658                           prodl	equ	0xFF3
  4659                           postinc0	equ	0xFEE
  4660                           wreg	equ	0xFE8
  4661                           indf1	equ	0xFE7
  4662                           postdec1	equ	0xFE5
  4663                           fsr1h	equ	0xFE2
  4664                           fsr1l	equ	0xFE1
  4665                           indf2	equ	0xFDF
  4666                           postinc2	equ	0xFDE
  4667                           postdec2	equ	0xFDD
  4668                           fsr2h	equ	0xFDA
  4669                           fsr2l	equ	0xFD9
  4670                           status	equ	0xFD8
  4671                           
  4672 ;; *************** function _F32_searchNextFreeCluster *****************
  4673 ;; Defined at:
  4674 ;;		line 489 in file "../my_lib.X/rosso_f32.h"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;  startCluster    4   25[BANK0 ] unsigned long 
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;  cluster         4   47[BANK0 ] unsigned long 
  4679 ;;  sector          4   41[BANK0 ] unsigned long 
  4680 ;;  value           2   45[BANK0 ] PTR unsigned long 
  4681 ;;		 -> SD_buffer(512), 
  4682 ;;  i               1   51[BANK0 ] unsigned char 
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  4   25[BANK0 ] unsigned long 
  4685 ;; Registers used:
  4686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4692 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;Total ram usage:       27 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    5
  4699 ;; This function calls:
  4700 ;;		_SD_readSingleBlock
  4701 ;;		___lldiv
  4702 ;; This function is called by:
  4703 ;;		_F32_writeFile
  4704 ;; This function uses a non-reentrant model
  4705 ;;
  4706                           
  4707                           	psect	text11
  4708  002EAA                     __ptext11:
  4709                           	opt stack 0
  4710  002EAA                     _F32_searchNextFreeCluster:
  4711                           	opt stack 24
  4712                           
  4713                           ;rosso_f32.h: 490: UINT32 cluster, *value, sector;
  4714                           ;rosso_f32.h: 491: UINT8 i;
  4715                           ;rosso_f32.h: 493: startCluster -= (startCluster % 128);
  4716                           
  4717                           ;incstack = 0
  4718  002EAA  0E7F               	movlw	127
  4719  002EAC  0100               	movlb	0	; () banked
  4720  002EAE  1579               	andwf	F32_searchNextFreeCluster@startCluster& (0+255),w,b
  4721  002EB0  0100               	movlb	0	; () banked
  4722  002EB2  6F7D               	movwf	??_F32_searchNextFreeCluster& (0+255),b
  4723  002EB4  0E00               	movlw	0
  4724  002EB6  0100               	movlb	0	; () banked
  4725  002EB8  157A               	andwf	(F32_searchNextFreeCluster@startCluster+1)& (0+255),w,b
  4726  002EBA  0100               	movlb	0	; () banked
  4727  002EBC  6F7E               	movwf	(??_F32_searchNextFreeCluster+1)& (0+255),b
  4728  002EBE  0E00               	movlw	0
  4729  002EC0  0100               	movlb	0	; () banked
  4730  002EC2  157B               	andwf	(F32_searchNextFreeCluster@startCluster+2)& (0+255),w,b
  4731  002EC4  0100               	movlb	0	; () banked
  4732  002EC6  6F7F               	movwf	(??_F32_searchNextFreeCluster+2)& (0+255),b
  4733  002EC8  0E00               	movlw	0
  4734  002ECA  0100               	movlb	0	; () banked
  4735  002ECC  157C               	andwf	(F32_searchNextFreeCluster@startCluster+3)& (0+255),w,b
  4736  002ECE  0100               	movlb	0	; () banked
  4737  002ED0  6F80               	movwf	(??_F32_searchNextFreeCluster+3)& (0+255),b
  4738  002ED2  0100               	movlb	0	; () banked
  4739  002ED4  517D               	movf	??_F32_searchNextFreeCluster& (0+255),w,b
  4740  002ED6  0100               	movlb	0	; () banked
  4741  002ED8  5F79               	subwf	F32_searchNextFreeCluster@startCluster& (0+255),f,b
  4742  002EDA  0100               	movlb	0	; () banked
  4743  002EDC  517E               	movf	(??_F32_searchNextFreeCluster+1)& (0+255),w,b
  4744  002EDE  0100               	movlb	0	; () banked
  4745  002EE0  5B7A               	subwfb	(F32_searchNextFreeCluster@startCluster+1)& (0+255),f,b
  4746  002EE2  0100               	movlb	0	; () banked
  4747  002EE4  517F               	movf	(??_F32_searchNextFreeCluster+2)& (0+255),w,b
  4748  002EE6  0100               	movlb	0	; () banked
  4749  002EE8  5B7B               	subwfb	(F32_searchNextFreeCluster@startCluster+2)& (0+255),f,b
  4750  002EEA  0100               	movlb	0	; () banked
  4751  002EEC  5180               	movf	(??_F32_searchNextFreeCluster+3)& (0+255),w,b
  4752  002EEE  0100               	movlb	0	; () banked
  4753  002EF0  5B7C               	subwfb	(F32_searchNextFreeCluster@startCluster+3)& (0+255),f,b
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;rosso_f32.h: 494: for (cluster = startCluster; cluster < totalClusters; cluster += 128)
      +                           {
  4757  002EF2  C079  F08F         	movff	F32_searchNextFreeCluster@startCluster,F32_searchNextFreeCluster@cluster
  4758  002EF6  C07A  F090         	movff	F32_searchNextFreeCluster@startCluster+1,F32_searchNextFreeCluster@cluster+1
  4759  002EFA  C07B  F091         	movff	F32_searchNextFreeCluster@startCluster+2,F32_searchNextFreeCluster@cluster+2
  4760  002EFE  C07C  F092         	movff	F32_searchNextFreeCluster@startCluster+3,F32_searchNextFreeCluster@cluster+3
  4761  002F02  D0BA               	goto	l360
  4762  002F04                     l4050:
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;rosso_f32.h: 495: sector = unusedSectors + reservedSectorCount
  4766                           ;rosso_f32.h: 496: + ((cluster * 4) / bytesPerSector);
  4767  002F04  0100               	movlb	0	; () banked
  4768  002F06  C08F  F07D         	movff	F32_searchNextFreeCluster@cluster,??_F32_searchNextFreeCluster
  4769  002F0A  0100               	movlb	0	; () banked
  4770  002F0C  C090  F07E         	movff	F32_searchNextFreeCluster@cluster+1,??_F32_searchNextFreeCluster+1
  4771  002F10  0100               	movlb	0	; () banked
  4772  002F12  C091  F07F         	movff	F32_searchNextFreeCluster@cluster+2,??_F32_searchNextFreeCluster+2
  4773  002F16  0100               	movlb	0	; () banked
  4774  002F18  C092  F080         	movff	F32_searchNextFreeCluster@cluster+3,??_F32_searchNextFreeCluster+3
  4775  002F1C  0E02               	movlw	2
  4776  002F1E                     u4415:
  4777  002F1E  90D8               	bcf	status,0,c
  4778  002F20  0100               	movlb	0	; () banked
  4779  002F22  377D               	rlcf	??_F32_searchNextFreeCluster& (0+255),f,b
  4780  002F24  377E               	rlcf	(??_F32_searchNextFreeCluster+1)& (0+255),f,b
  4781  002F26  377F               	rlcf	(??_F32_searchNextFreeCluster+2)& (0+255),f,b
  4782  002F28  3780               	rlcf	(??_F32_searchNextFreeCluster+3)& (0+255),f,b
  4783  002F2A  2EE8               	decfsz	wreg,f,c
  4784  002F2C  D7F8               	goto	u4415
  4785  002F2E  C07D  F06C         	movff	??_F32_searchNextFreeCluster,___lldiv@dividend
  4786  002F32  C07E  F06D         	movff	??_F32_searchNextFreeCluster+1,___lldiv@dividend+1
  4787  002F36  C07F  F06E         	movff	??_F32_searchNextFreeCluster+2,___lldiv@dividend+2
  4788  002F3A  C080  F06F         	movff	??_F32_searchNextFreeCluster+3,___lldiv@dividend+3
  4789  002F3E  0100               	movlb	0	; () banked
  4790  002F40  C0EE  F070         	movff	_bytesPerSector,___lldiv@divisor	;volatile
  4791  002F44  0100               	movlb	0	; () banked
  4792  002F46  C0EF  F071         	movff	_bytesPerSector+1,___lldiv@divisor+1	;volatile
  4793  002F4A  0100               	movlb	0	; () banked
  4794  002F4C  6B72               	clrf	(___lldiv@divisor+2)& (0+255),b
  4795  002F4E  0100               	movlb	0	; () banked
  4796  002F50  6B73               	clrf	(___lldiv@divisor+3)& (0+255),b
  4797  002F52  ECC2  F01C         	call	___lldiv	;wreg free
  4798  002F56  C06C  F081         	movff	?___lldiv,??_F32_searchNextFreeCluster+4
  4799  002F5A  C06D  F082         	movff	?___lldiv+1,??_F32_searchNextFreeCluster+5
  4800  002F5E  C06E  F083         	movff	?___lldiv+2,??_F32_searchNextFreeCluster+6
  4801  002F62  C06F  F084         	movff	?___lldiv+3,??_F32_searchNextFreeCluster+7
  4802  002F66  5039               	movf	_reservedSectorCount,w,c	;volatile
  4803  002F68  0100               	movlb	0	; () banked
  4804  002F6A  2581               	addwf	(??_F32_searchNextFreeCluster+4)& (0+255),w,b
  4805  002F6C  0100               	movlb	0	; () banked
  4806  002F6E  6F85               	movwf	(??_F32_searchNextFreeCluster+8)& (0+255),b
  4807  002F70  503A               	movf	_reservedSectorCount+1,w,c	;volatile
  4808  002F72  0100               	movlb	0	; () banked
  4809  002F74  2182               	addwfc	(??_F32_searchNextFreeCluster+5)& (0+255),w,b
  4810  002F76  0100               	movlb	0	; () banked
  4811  002F78  6F86               	movwf	(??_F32_searchNextFreeCluster+9)& (0+255),b
  4812  002F7A  0E00               	movlw	0
  4813  002F7C  0100               	movlb	0	; () banked
  4814  002F7E  2183               	addwfc	(??_F32_searchNextFreeCluster+6)& (0+255),w,b
  4815  002F80  0100               	movlb	0	; () banked
  4816  002F82  6F87               	movwf	(??_F32_searchNextFreeCluster+10)& (0+255),b
  4817  002F84  0E00               	movlw	0
  4818  002F86  0100               	movlb	0	; () banked
  4819  002F88  2184               	addwfc	(??_F32_searchNextFreeCluster+7)& (0+255),w,b
  4820  002F8A  0100               	movlb	0	; () banked
  4821  002F8C  6F88               	movwf	(??_F32_searchNextFreeCluster+11)& (0+255),b
  4822  002F8E  5033               	movf	_unusedSectors,w,c
  4823  002F90  0100               	movlb	0	; () banked
  4824  002F92  2585               	addwf	(??_F32_searchNextFreeCluster+8)& (0+255),w,b
  4825  002F94  0100               	movlb	0	; () banked
  4826  002F96  6F89               	movwf	F32_searchNextFreeCluster@sector& (0+255),b
  4827  002F98  5034               	movf	_unusedSectors+1,w,c
  4828  002F9A  0100               	movlb	0	; () banked
  4829  002F9C  2186               	addwfc	(??_F32_searchNextFreeCluster+9)& (0+255),w,b
  4830  002F9E  0100               	movlb	0	; () banked
  4831  002FA0  6F8A               	movwf	(F32_searchNextFreeCluster@sector+1)& (0+255),b
  4832  002FA2  5035               	movf	_unusedSectors+2,w,c
  4833  002FA4  0100               	movlb	0	; () banked
  4834  002FA6  2187               	addwfc	(??_F32_searchNextFreeCluster+10)& (0+255),w,b
  4835  002FA8  0100               	movlb	0	; () banked
  4836  002FAA  6F8B               	movwf	(F32_searchNextFreeCluster@sector+2)& (0+255),b
  4837  002FAC  5036               	movf	_unusedSectors+3,w,c
  4838  002FAE  0100               	movlb	0	; () banked
  4839  002FB0  2188               	addwfc	(??_F32_searchNextFreeCluster+11)& (0+255),w,b
  4840  002FB2  0100               	movlb	0	; () banked
  4841  002FB4  6F8C               	movwf	(F32_searchNextFreeCluster@sector+3)& (0+255),b
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;rosso_f32.h: 497: SD_readSingleBlock(sector);
  4845  002FB6  C089  F06C         	movff	F32_searchNextFreeCluster@sector,SD_readSingleBlock@SD_startBlock
  4846  002FBA  C08A  F06D         	movff	F32_searchNextFreeCluster@sector+1,SD_readSingleBlock@SD_startBlock+1
  4847  002FBE  C08B  F06E         	movff	F32_searchNextFreeCluster@sector+2,SD_readSingleBlock@SD_startBlock+2
  4848  002FC2  C08C  F06F         	movff	F32_searchNextFreeCluster@sector+3,SD_readSingleBlock@SD_startBlock+3
  4849  002FC6  EC2C  F01D         	call	_SD_readSingleBlock	;wreg free
  4850                           
  4851                           ;rosso_f32.h: 498: for (i = 0; i < 128; i++) {
  4852  002FCA  0E00               	movlw	0
  4853  002FCC  0100               	movlb	0	; () banked
  4854  002FCE  6F93               	movwf	F32_searchNextFreeCluster@i& (0+255),b
  4855  002FD0  D045               	goto	L7
  4856  002FD2                     l4060:
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;rosso_f32.h: 499: value = (UINT32 *) & SD_buffer[i * 4];
  4860  002FD2  0100               	movlb	0	; () banked
  4861  002FD4  5193               	movf	F32_searchNextFreeCluster@i& (0+255),w,b
  4862  002FD6  0D04               	mullw	4
  4863  002FD8  0EEE               	movlw	low _SD_buffer
  4864  002FDA  0100               	movlb	0	; () banked
  4865  002FDC  6F7D               	movwf	??_F32_searchNextFreeCluster& (0+255),b
  4866  002FDE  0E01               	movlw	high _SD_buffer
  4867  002FE0  6F7E               	movwf	(??_F32_searchNextFreeCluster+1)& (0+255),b
  4868  002FE2  50F3               	movf	prodl,w,c
  4869  002FE4  0100               	movlb	0	; () banked
  4870  002FE6  277D               	addwf	??_F32_searchNextFreeCluster& (0+255),f,b
  4871  002FE8  50F4               	movf	prodh,w,c
  4872  002FEA  0100               	movlb	0	; () banked
  4873  002FEC  237E               	addwfc	(??_F32_searchNextFreeCluster+1)& (0+255),f,b
  4874  002FEE  C07D  F08D         	movff	??_F32_searchNextFreeCluster,F32_searchNextFreeCluster@value
  4875  002FF2  C07E  F08E         	movff	??_F32_searchNextFreeCluster+1,F32_searchNextFreeCluster@value+1
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;rosso_f32.h: 500: if (((*value) & 0x0fffffff) == 0)
  4879  002FF6  C08D  FFD9         	movff	F32_searchNextFreeCluster@value,fsr2l
  4880  002FFA  C08E  FFDA         	movff	F32_searchNextFreeCluster@value+1,fsr2h
  4881  002FFE  0EFF               	movlw	255
  4882  003000  14DE               	andwf	postinc2,w,c
  4883  003002  0100               	movlb	0	; () banked
  4884  003004  6F7D               	movwf	??_F32_searchNextFreeCluster& (0+255),b
  4885  003006  0EFF               	movlw	255
  4886  003008  14DE               	andwf	postinc2,w,c
  4887  00300A  0100               	movlb	0	; () banked
  4888  00300C  6F7E               	movwf	(??_F32_searchNextFreeCluster+1)& (0+255),b
  4889  00300E  0EFF               	movlw	255
  4890  003010  14DE               	andwf	postinc2,w,c
  4891  003012  0100               	movlb	0	; () banked
  4892  003014  6F7F               	movwf	(??_F32_searchNextFreeCluster+2)& (0+255),b
  4893  003016  0E0F               	movlw	15
  4894  003018  14DE               	andwf	postinc2,w,c
  4895  00301A  0100               	movlb	0	; () banked
  4896  00301C  6F80               	movwf	(??_F32_searchNextFreeCluster+3)& (0+255),b
  4897  00301E  0100               	movlb	0	; () banked
  4898  003020  5180               	movf	(??_F32_searchNextFreeCluster+3)& (0+255),w,b
  4899  003022  117D               	iorwf	??_F32_searchNextFreeCluster& (0+255),w,b
  4900  003024  117E               	iorwf	(??_F32_searchNextFreeCluster+1)& (0+255),w,b
  4901  003026  117F               	iorwf	(??_F32_searchNextFreeCluster+2)& (0+255),w,b
  4902  003028  A4D8               	btfss	status,2,c
  4903  00302A  D016               	goto	l4068
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;rosso_f32.h: 501: return (cluster + i);
  4907  00302C  0100               	movlb	0	; () banked
  4908  00302E  5193               	movf	F32_searchNextFreeCluster@i& (0+255),w,b
  4909  003030  0100               	movlb	0	; () banked
  4910  003032  258F               	addwf	F32_searchNextFreeCluster@cluster& (0+255),w,b
  4911  003034  0100               	movlb	0	; () banked
  4912  003036  6F79               	movwf	?_F32_searchNextFreeCluster& (0+255),b
  4913  003038  0E00               	movlw	0
  4914  00303A  0100               	movlb	0	; () banked
  4915  00303C  2190               	addwfc	(F32_searchNextFreeCluster@cluster+1)& (0+255),w,b
  4916  00303E  0100               	movlb	0	; () banked
  4917  003040  6F7A               	movwf	(?_F32_searchNextFreeCluster+1)& (0+255),b
  4918  003042  0E00               	movlw	0
  4919  003044  0100               	movlb	0	; () banked
  4920  003046  2191               	addwfc	(F32_searchNextFreeCluster@cluster+2)& (0+255),w,b
  4921  003048  0100               	movlb	0	; () banked
  4922  00304A  6F7B               	movwf	(?_F32_searchNextFreeCluster+2)& (0+255),b
  4923  00304C  0E00               	movlw	0
  4924  00304E  0100               	movlb	0	; () banked
  4925  003050  2192               	addwfc	(F32_searchNextFreeCluster@cluster+3)& (0+255),w,b
  4926  003052  0100               	movlb	0	; () banked
  4927  003054  6F7C               	movwf	(?_F32_searchNextFreeCluster+3)& (0+255),b
  4928  003056  0012               	return	
  4929  003058                     l4068:
  4930                           
  4931                           ; BSR set to: 0
  4932  003058  0100               	movlb	0	; () banked
  4933  00305A  2B93               	incf	F32_searchNextFreeCluster@i& (0+255),f,b
  4934  00305C                     L7:
  4935                           
  4936                           ; BSR set to: 0
  4937  00305C  0E7F               	movlw	127
  4938  00305E  0100               	movlb	0	; () banked
  4939  003060  6593               	cpfsgt	F32_searchNextFreeCluster@i& (0+255),b
  4940  003062  D7B7               	goto	l4060
  4941                           
  4942                           ; BSR set to: 0
  4943                           
  4944                           ; BSR set to: 0
  4945  003064  0E80               	movlw	128
  4946  003066  0100               	movlb	0	; () banked
  4947  003068  278F               	addwf	F32_searchNextFreeCluster@cluster& (0+255),f,b
  4948  00306A  0E00               	movlw	0
  4949  00306C  0100               	movlb	0	; () banked
  4950  00306E  2390               	addwfc	(F32_searchNextFreeCluster@cluster+1)& (0+255),f,b
  4951  003070  0100               	movlb	0	; () banked
  4952  003072  2391               	addwfc	(F32_searchNextFreeCluster@cluster+2)& (0+255),f,b
  4953  003074  0100               	movlb	0	; () banked
  4954  003076  2392               	addwfc	(F32_searchNextFreeCluster@cluster+3)& (0+255),f,b
  4955  003078                     l360:
  4956                           
  4957                           ; BSR set to: 0
  4958  003078  502F               	movf	_totalClusters,w,c	;volatile
  4959  00307A  0100               	movlb	0	; () banked
  4960  00307C  5D8F               	subwf	F32_searchNextFreeCluster@cluster& (0+255),w,b
  4961  00307E  5030               	movf	_totalClusters+1,w,c	;volatile
  4962  003080  0100               	movlb	0	; () banked
  4963  003082  5990               	subwfb	(F32_searchNextFreeCluster@cluster+1)& (0+255),w,b
  4964  003084  5031               	movf	_totalClusters+2,w,c	;volatile
  4965  003086  0100               	movlb	0	; () banked
  4966  003088  5991               	subwfb	(F32_searchNextFreeCluster@cluster+2)& (0+255),w,b
  4967  00308A  5032               	movf	_totalClusters+3,w,c	;volatile
  4968  00308C  0100               	movlb	0	; () banked
  4969  00308E  5992               	subwfb	(F32_searchNextFreeCluster@cluster+3)& (0+255),w,b
  4970  003090  A0D8               	btfss	status,0,c
  4971  003092  D738               	goto	l4050
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;rosso_f32.h: 502: }
  4975                           ;rosso_f32.h: 503: }
  4976                           ;rosso_f32.h: 505: return 0;
  4977                           
  4978                           ; BSR set to: 0
  4979  003094  0E00               	movlw	0
  4980  003096  0100               	movlb	0	; () banked
  4981  003098  6F79               	movwf	?_F32_searchNextFreeCluster& (0+255),b
  4982  00309A  0E00               	movlw	0
  4983  00309C  0100               	movlb	0	; () banked
  4984  00309E  6F7A               	movwf	(?_F32_searchNextFreeCluster+1)& (0+255),b
  4985  0030A0  0E00               	movlw	0
  4986  0030A2  0100               	movlb	0	; () banked
  4987  0030A4  6F7B               	movwf	(?_F32_searchNextFreeCluster+2)& (0+255),b
  4988  0030A6  0E00               	movlw	0
  4989  0030A8  0100               	movlb	0	; () banked
  4990  0030AA  6F7C               	movwf	(?_F32_searchNextFreeCluster+3)& (0+255),b
  4991  0030AC  0012               	return	
  4992  0030AE                     __end_of_F32_searchNextFreeCluster:
  4993                           	opt stack 0
  4994                           tblptru	equ	0xFF8
  4995                           tblptrh	equ	0xFF7
  4996                           tblptrl	equ	0xFF6
  4997                           tablat	equ	0xFF5
  4998                           prodh	equ	0xFF4
  4999                           prodl	equ	0xFF3
  5000                           postinc0	equ	0xFEE
  5001                           wreg	equ	0xFE8
  5002                           indf1	equ	0xFE7
  5003                           postdec1	equ	0xFE5
  5004                           fsr1h	equ	0xFE2
  5005                           fsr1l	equ	0xFE1
  5006                           indf2	equ	0xFDF
  5007                           postinc2	equ	0xFDE
  5008                           postdec2	equ	0xFDD
  5009                           fsr2h	equ	0xFDA
  5010                           fsr2l	equ	0xFD9
  5011                           status	equ	0xFD8
  5012                           
  5013 ;; *************** function _F32_readFile *****************
  5014 ;; Defined at:
  5015 ;;		line 436 in file "../my_lib.X/rosso_f32.h"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;  flag            1    wreg     unsigned char 
  5018 ;;  fileName        2   95[BANK0 ] PTR unsigned char 
  5019 ;;		 -> fileName(12), 
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  flag            1  117[BANK0 ] unsigned char 
  5022 ;;  cluster         4  121[BANK0 ] unsigned long 
  5023 ;;  firstSector     4  113[BANK0 ] unsigned long 
  5024 ;;  fileSize        4  109[BANK0 ] unsigned long 
  5025 ;;  byteCounter     4  105[BANK0 ] unsigned long 
  5026 ;;  dir             2  125[BANK0 ] PTR struct dir_Structure
  5027 ;;		 -> NULL(0), SD_buffer(512), 
  5028 ;;  k               2  118[BANK0 ] unsigned short 
  5029 ;;  j               1  120[BANK0 ] unsigned char 
  5030 ;;  error           1    0        unsigned char 
  5031 ;; Return value:  Size  Location     Type
  5032 ;;                  1    wreg      unsigned char 
  5033 ;; Registers used:
  5034 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5035 ;; Tracked objects:
  5036 ;;		On entry : 0/0
  5037 ;;		On exit  : 0/0
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5040 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;Total ram usage:       32 bytes
  5045 ;; Hardware stack levels used:    1
  5046 ;; Hardware stack levels required when called:    8
  5047 ;; This function calls:
  5048 ;;		_F32_findFiles
  5049 ;;		_F32_getFirstSector
  5050 ;;		_F32_getSetNextCluster
  5051 ;;		_SD_readSingleBlock
  5052 ;; This function is called by:
  5053 ;;		_F32_writeFile
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           
  5057                           	psect	text12
  5058  002C5A                     __ptext12:
  5059                           	opt stack 0
  5060  002C5A                     _F32_readFile:
  5061                           	opt stack 21
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;incstack = 0
  5065                           ;F32_readFile@flag stored from wreg
  5066  002C5A  0100               	movlb	0	; () banked
  5067  002C5C  6FD5               	movwf	F32_readFile@flag& (0+255),b
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;rosso_f32.h: 437: struct dir_Structure *dir;
  5071                           ;rosso_f32.h: 438: UINT32 cluster, byteCounter = 0, fileSize, firstSector;
  5072  002C5E  0E00               	movlw	0
  5073  002C60  0100               	movlb	0	; () banked
  5074  002C62  6FC9               	movwf	F32_readFile@byteCounter& (0+255),b
  5075  002C64  0E00               	movlw	0
  5076  002C66  0100               	movlb	0	; () banked
  5077  002C68  6FCA               	movwf	(F32_readFile@byteCounter+1)& (0+255),b
  5078  002C6A  0E00               	movlw	0
  5079  002C6C  0100               	movlb	0	; () banked
  5080  002C6E  6FCB               	movwf	(F32_readFile@byteCounter+2)& (0+255),b
  5081  002C70  0E00               	movlw	0
  5082  002C72  0100               	movlb	0	; () banked
  5083  002C74  6FCC               	movwf	(F32_readFile@byteCounter+3)& (0+255),b
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;rosso_f32.h: 439: UINT16 k;
  5087                           ;rosso_f32.h: 440: UINT8 j, error;
  5088                           ;rosso_f32.h: 446: dir = F32_findFiles(1, fileName);
  5089  002C76  0100               	movlb	0	; () banked
  5090  002C78  C0C0  F09C         	movff	F32_readFile@fileName+1,F32_findFiles@fileName+1
  5091  002C7C  0100               	movlb	0	; () banked
  5092  002C7E  C0BF  F09B         	movff	F32_readFile@fileName,F32_findFiles@fileName
  5093  002C82  0E01               	movlw	1
  5094  002C84  EC00  F00E         	call	_F32_findFiles
  5095  002C88  0100               	movlb	0	; () banked
  5096  002C8A  C09B  F0DD         	movff	?_F32_findFiles,F32_readFile@dir
  5097  002C8E  0100               	movlb	0	; () banked
  5098  002C90  C09C  F0DE         	movff	?_F32_findFiles+1,F32_readFile@dir+1
  5099                           
  5100                           ; BSR set to: 0
  5101                           ;rosso_f32.h: 447: if (dir == 0) {
  5102  002C94  0100               	movlb	0	; () banked
  5103  002C96  51DE               	movf	(F32_readFile@dir+1)& (0+255),w,b
  5104  002C98  11DD               	iorwf	F32_readFile@dir& (0+255),w,b
  5105  002C9A  A4D8               	btfss	status,2,c
  5106  002C9C  D007               	goto	l4000
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;rosso_f32.h: 448: if (flag == 0)
  5110  002C9E  0100               	movlb	0	; () banked
  5111  002CA0  67D5               	tstfsz	F32_readFile@flag& (0+255),b
  5112  002CA2  D002               	goto	l3996
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;rosso_f32.h: 449: return (1);
  5116  002CA4  0E01               	movlw	1
  5117  002CA6  0012               	return	
  5118  002CA8                     l3996:
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;rosso_f32.h: 450: else
  5122                           ;rosso_f32.h: 451: return (0);
  5123  002CA8  0E00               	movlw	0
  5124  002CAA  0012               	return	
  5125  002CAC                     l4000:
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;rosso_f32.h: 452: }
  5129                           ;rosso_f32.h: 454: if (flag == 1)
  5130  002CAC  0100               	movlb	0	; () banked
  5131  002CAE  05D5               	decf	F32_readFile@flag& (0+255),w,b
  5132  002CB0  A4D8               	btfss	status,2,c
  5133  002CB2  D002               	goto	l4006
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;rosso_f32.h: 455: return (1);
  5137  002CB4  0E01               	movlw	1
  5138  002CB6  0012               	return	
  5139  002CB8                     l4006:
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;rosso_f32.h: 457: cluster = (((UINT32) dir->firstClusterHI) << 16) | dir->firstClusterL
      +                          O;
  5143  002CB8  0100               	movlb	0	; () banked
  5144  002CBA  EE20 F01A          	lfsr	2,26
  5145  002CBE  0100               	movlb	0	; () banked
  5146  002CC0  51DD               	movf	F32_readFile@dir& (0+255),w,b
  5147  002CC2  26D9               	addwf	fsr2l,f,c
  5148  002CC4  0100               	movlb	0	; () banked
  5149  002CC6  51DE               	movf	(F32_readFile@dir+1)& (0+255),w,b
  5150  002CC8  22DA               	addwfc	fsr2h,f,c
  5151  002CCA  CFDE F0C1          	movff	postinc2,??_F32_readFile
  5152  002CCE  CFDD F0C2          	movff	postdec2,??_F32_readFile+1
  5153  002CD2  0100               	movlb	0	; () banked
  5154  002CD4  EE20 F014          	lfsr	2,20
  5155  002CD8  0100               	movlb	0	; () banked
  5156  002CDA  51DD               	movf	F32_readFile@dir& (0+255),w,b
  5157  002CDC  26D9               	addwf	fsr2l,f,c
  5158  002CDE  0100               	movlb	0	; () banked
  5159  002CE0  51DE               	movf	(F32_readFile@dir+1)& (0+255),w,b
  5160  002CE2  22DA               	addwfc	fsr2h,f,c
  5161  002CE4  CFDE F0C3          	movff	postinc2,??_F32_readFile+2
  5162  002CE8  CFDD F0C4          	movff	postdec2,??_F32_readFile+3
  5163  002CEC  0100               	movlb	0	; () banked
  5164  002CEE  51C3               	movf	(??_F32_readFile+2)& (0+255),w,b
  5165  002CF0  0100               	movlb	0	; () banked
  5166  002CF2  6FC5               	movwf	(??_F32_readFile+4)& (0+255),b
  5167  002CF4  0100               	movlb	0	; () banked
  5168  002CF6  51C4               	movf	(??_F32_readFile+3)& (0+255),w,b
  5169  002CF8  0100               	movlb	0	; () banked
  5170  002CFA  6FC6               	movwf	(??_F32_readFile+5)& (0+255),b
  5171  002CFC  0100               	movlb	0	; () banked
  5172  002CFE  6BC7               	clrf	(??_F32_readFile+6)& (0+255),b
  5173  002D00  0100               	movlb	0	; () banked
  5174  002D02  6BC8               	clrf	(??_F32_readFile+7)& (0+255),b
  5175  002D04  C0C6  F0C8         	movff	??_F32_readFile+5,??_F32_readFile+7
  5176  002D08  C0C5  F0C7         	movff	??_F32_readFile+4,??_F32_readFile+6
  5177  002D0C  0100               	movlb	0	; () banked
  5178  002D0E  6BC6               	clrf	(??_F32_readFile+5)& (0+255),b
  5179  002D10  6BC5               	clrf	(??_F32_readFile+4)& (0+255),b
  5180  002D12  0100               	movlb	0	; () banked
  5181  002D14  51C1               	movf	??_F32_readFile& (0+255),w,b
  5182  002D16  0100               	movlb	0	; () banked
  5183  002D18  11C5               	iorwf	(??_F32_readFile+4)& (0+255),w,b
  5184  002D1A  0100               	movlb	0	; () banked
  5185  002D1C  6FD9               	movwf	F32_readFile@cluster& (0+255),b
  5186  002D1E  0100               	movlb	0	; () banked
  5187  002D20  51C2               	movf	(??_F32_readFile+1)& (0+255),w,b
  5188  002D22  0100               	movlb	0	; () banked
  5189  002D24  11C6               	iorwf	(??_F32_readFile+5)& (0+255),w,b
  5190  002D26  0100               	movlb	0	; () banked
  5191  002D28  6FDA               	movwf	(F32_readFile@cluster+1)& (0+255),b
  5192  002D2A  0E00               	movlw	0
  5193  002D2C  0100               	movlb	0	; () banked
  5194  002D2E  11C7               	iorwf	(??_F32_readFile+6)& (0+255),w,b
  5195  002D30  0100               	movlb	0	; () banked
  5196  002D32  6FDB               	movwf	(F32_readFile@cluster+2)& (0+255),b
  5197  002D34  0E00               	movlw	0
  5198  002D36  0100               	movlb	0	; () banked
  5199  002D38  11C8               	iorwf	(??_F32_readFile+7)& (0+255),w,b
  5200  002D3A  0100               	movlb	0	; () banked
  5201  002D3C  6FDC               	movwf	(F32_readFile@cluster+3)& (0+255),b
  5202                           
  5203                           ;rosso_f32.h: 459: fileSize = dir->fileSize;
  5204  002D3E  0100               	movlb	0	; () banked
  5205  002D40  EE20 F01C          	lfsr	2,28
  5206  002D44  0100               	movlb	0	; () banked
  5207  002D46  51DD               	movf	F32_readFile@dir& (0+255),w,b
  5208  002D48  26D9               	addwf	fsr2l,f,c
  5209  002D4A  0100               	movlb	0	; () banked
  5210  002D4C  51DE               	movf	(F32_readFile@dir+1)& (0+255),w,b
  5211  002D4E  22DA               	addwfc	fsr2h,f,c
  5212  002D50  0100               	movlb	0	; () banked
  5213  002D52  CFDE F0CD          	movff	postinc2,F32_readFile@fileSize
  5214  002D56  0100               	movlb	0	; () banked
  5215  002D58  CFDE F0CE          	movff	postinc2,F32_readFile@fileSize+1
  5216  002D5C  0100               	movlb	0	; () banked
  5217  002D5E  CFDE F0CF          	movff	postinc2,F32_readFile@fileSize+2
  5218  002D62  0100               	movlb	0	; () banked
  5219  002D64  CFDE F0D0          	movff	postinc2,F32_readFile@fileSize+3
  5220  002D68                     l4008:
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;rosso_f32.h: 465: firstSector = F32_getFirstSector(cluster);
  5224  002D68  C0D9  F06C         	movff	F32_readFile@cluster,F32_getFirstSector@clusterNumber
  5225  002D6C  C0DA  F06D         	movff	F32_readFile@cluster+1,F32_getFirstSector@clusterNumber+1
  5226  002D70  C0DB  F06E         	movff	F32_readFile@cluster+2,F32_getFirstSector@clusterNumber+2
  5227  002D74  C0DC  F06F         	movff	F32_readFile@cluster+3,F32_getFirstSector@clusterNumber+3
  5228  002D78  EC16  F01E         	call	_F32_getFirstSector	;wreg free
  5229  002D7C  C06C  F0D1         	movff	?_F32_getFirstSector,F32_readFile@firstSector
  5230  002D80  C06D  F0D2         	movff	?_F32_getFirstSector+1,F32_readFile@firstSector+1
  5231  002D84  C06E  F0D3         	movff	?_F32_getFirstSector+2,F32_readFile@firstSector+2
  5232  002D88  C06F  F0D4         	movff	?_F32_getFirstSector+3,F32_readFile@firstSector+3
  5233                           
  5234                           ;rosso_f32.h: 467: for (j = 0; j < sectorPerCluster; j++) {
  5235  002D8C  0E00               	movlw	0
  5236  002D8E  0100               	movlb	0	; () banked
  5237  002D90  6FD8               	movwf	F32_readFile@j& (0+255),b
  5238  002D92  D054               	goto	l4032
  5239  002D94                     l4012:
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;rosso_f32.h: 468: SD_readSingleBlock(firstSector + j);
  5243  002D94  0100               	movlb	0	; () banked
  5244  002D96  51D8               	movf	F32_readFile@j& (0+255),w,b
  5245  002D98  0100               	movlb	0	; () banked
  5246  002D9A  25D1               	addwf	F32_readFile@firstSector& (0+255),w,b
  5247  002D9C  0100               	movlb	0	; () banked
  5248  002D9E  6F6C               	movwf	SD_readSingleBlock@SD_startBlock& (0+255),b
  5249  002DA0  0E00               	movlw	0
  5250  002DA2  0100               	movlb	0	; () banked
  5251  002DA4  21D2               	addwfc	(F32_readFile@firstSector+1)& (0+255),w,b
  5252  002DA6  0100               	movlb	0	; () banked
  5253  002DA8  6F6D               	movwf	(SD_readSingleBlock@SD_startBlock+1)& (0+255),b
  5254  002DAA  0E00               	movlw	0
  5255  002DAC  0100               	movlb	0	; () banked
  5256  002DAE  21D3               	addwfc	(F32_readFile@firstSector+2)& (0+255),w,b
  5257  002DB0  0100               	movlb	0	; () banked
  5258  002DB2  6F6E               	movwf	(SD_readSingleBlock@SD_startBlock+2)& (0+255),b
  5259  002DB4  0E00               	movlw	0
  5260  002DB6  0100               	movlb	0	; () banked
  5261  002DB8  21D4               	addwfc	(F32_readFile@firstSector+3)& (0+255),w,b
  5262  002DBA  0100               	movlb	0	; () banked
  5263  002DBC  6F6F               	movwf	(SD_readSingleBlock@SD_startBlock+3)& (0+255),b
  5264  002DBE  EC2C  F01D         	call	_SD_readSingleBlock	;wreg free
  5265                           
  5266                           ;rosso_f32.h: 470: for (k = 0; k < 512; k++) {
  5267  002DC2  0E00               	movlw	0
  5268  002DC4  0100               	movlb	0	; () banked
  5269  002DC6  6FD7               	movwf	(F32_readFile@k+1)& (0+255),b
  5270  002DC8  0E00               	movlw	0
  5271  002DCA  0100               	movlb	0	; () banked
  5272  002DCC  6FD6               	movwf	F32_readFile@k& (0+255),b
  5273  002DCE                     
  5274                           ; BSR set to: 0
  5275  002DCE  0E00               	movlw	0
  5276  002DD0  0100               	movlb	0	; () banked
  5277  002DD2  5DD6               	subwf	F32_readFile@k& (0+255),w,b
  5278  002DD4  0E02               	movlw	2
  5279  002DD6  0100               	movlb	0	; () banked
  5280  002DD8  59D7               	subwfb	(F32_readFile@k+1)& (0+255),w,b
  5281  002DDA  B0D8               	btfsc	status,0,c
  5282  002DDC  D02D               	goto	l4030
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;rosso_f32.h: 474: if ((byteCounter++) >= fileSize)
  5286                           
  5287                           ; BSR set to: 0
  5288                           
  5289                           ; BSR set to: 0
  5290  002DDE  0100               	movlb	0	; () banked
  5291  002DE0  C0C9  F0C1         	movff	F32_readFile@byteCounter,??_F32_readFile
  5292  002DE4  0100               	movlb	0	; () banked
  5293  002DE6  C0CA  F0C2         	movff	F32_readFile@byteCounter+1,??_F32_readFile+1
  5294  002DEA  0100               	movlb	0	; () banked
  5295  002DEC  C0CB  F0C3         	movff	F32_readFile@byteCounter+2,??_F32_readFile+2
  5296  002DF0  0100               	movlb	0	; () banked
  5297  002DF2  C0CC  F0C4         	movff	F32_readFile@byteCounter+3,??_F32_readFile+3
  5298  002DF6  0100               	movlb	0	; () banked
  5299  002DF8  2BC9               	incf	F32_readFile@byteCounter& (0+255),f,b
  5300  002DFA  0E00               	movlw	0
  5301  002DFC  0100               	movlb	0	; () banked
  5302  002DFE  23CA               	addwfc	(F32_readFile@byteCounter+1)& (0+255),f,b
  5303  002E00  0100               	movlb	0	; () banked
  5304  002E02  23CB               	addwfc	(F32_readFile@byteCounter+2)& (0+255),f,b
  5305  002E04  0100               	movlb	0	; () banked
  5306  002E06  23CC               	addwfc	(F32_readFile@byteCounter+3)& (0+255),f,b
  5307  002E08  0100               	movlb	0	; () banked
  5308  002E0A  51CD               	movf	F32_readFile@fileSize& (0+255),w,b
  5309  002E0C  0100               	movlb	0	; () banked
  5310  002E0E  5DC1               	subwf	??_F32_readFile& (0+255),w,b
  5311  002E10  0100               	movlb	0	; () banked
  5312  002E12  51CE               	movf	(F32_readFile@fileSize+1)& (0+255),w,b
  5313  002E14  0100               	movlb	0	; () banked
  5314  002E16  59C2               	subwfb	(??_F32_readFile+1)& (0+255),w,b
  5315  002E18  0100               	movlb	0	; () banked
  5316  002E1A  51CF               	movf	(F32_readFile@fileSize+2)& (0+255),w,b
  5317  002E1C  0100               	movlb	0	; () banked
  5318  002E1E  59C3               	subwfb	(??_F32_readFile+2)& (0+255),w,b
  5319  002E20  0100               	movlb	0	; () banked
  5320  002E22  51D0               	movf	(F32_readFile@fileSize+3)& (0+255),w,b
  5321  002E24  0100               	movlb	0	; () banked
  5322  002E26  59C4               	subwfb	(??_F32_readFile+3)& (0+255),w,b
  5323  002E28  A0D8               	btfss	status,0,c
  5324  002E2A  D002               	goto	l4026
  5325                           
  5326                           ; BSR set to: 0
  5327                           ;rosso_f32.h: 475: return 0;
  5328  002E2C  0E00               	movlw	0
  5329  002E2E  0012               	return	
  5330  002E30                     l4026:
  5331                           
  5332                           ; BSR set to: 0
  5333  002E30  0100               	movlb	0	; () banked
  5334  002E32  4BD6               	infsnz	F32_readFile@k& (0+255),f,b
  5335  002E34  2BD7               	incf	(F32_readFile@k+1)& (0+255),f,b
  5336  002E36  D7CB               	goto	L8
  5337  002E38                     l4030:
  5338                           
  5339                           ; BSR set to: 0
  5340  002E38  0100               	movlb	0	; () banked
  5341  002E3A  2BD8               	incf	F32_readFile@j& (0+255),f,b
  5342  002E3C                     l4032:
  5343                           
  5344                           ; BSR set to: 0
  5345  002E3C  0100               	movlb	0	; () banked
  5346  002E3E  51D8               	movf	F32_readFile@j& (0+255),w,b
  5347  002E40  0100               	movlb	0	; () banked
  5348  002E42  6FC1               	movwf	??_F32_readFile& (0+255),b
  5349  002E44  6BC2               	clrf	(??_F32_readFile+1)& (0+255),b
  5350  002E46  503F               	movf	_sectorPerCluster,w,c	;volatile
  5351  002E48  0100               	movlb	0	; () banked
  5352  002E4A  5DC1               	subwf	??_F32_readFile& (0+255),w,b
  5353  002E4C  5040               	movf	_sectorPerCluster+1,w,c	;volatile
  5354  002E4E  0100               	movlb	0	; () banked
  5355  002E50  59C2               	subwfb	(??_F32_readFile+1)& (0+255),w,b
  5356  002E52  A0D8               	btfss	status,0,c
  5357  002E54  D79F               	goto	l4012
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;rosso_f32.h: 476: }
  5361                           ;rosso_f32.h: 477: }
  5362                           ;rosso_f32.h: 478: cluster = F32_getSetNextCluster(cluster, 0, 0);
  5363                           
  5364                           ; BSR set to: 0
  5365  002E56  C0D9  F079         	movff	F32_readFile@cluster,F32_getSetNextCluster@clusterNumber
  5366  002E5A  C0DA  F07A         	movff	F32_readFile@cluster+1,F32_getSetNextCluster@clusterNumber+1
  5367  002E5E  C0DB  F07B         	movff	F32_readFile@cluster+2,F32_getSetNextCluster@clusterNumber+2
  5368  002E62  C0DC  F07C         	movff	F32_readFile@cluster+3,F32_getSetNextCluster@clusterNumber+3
  5369  002E66  0E00               	movlw	0
  5370  002E68  0100               	movlb	0	; () banked
  5371  002E6A  6F7D               	movwf	F32_getSetNextCluster@get_set& (0+255),b
  5372  002E6C  0E00               	movlw	0
  5373  002E6E  0100               	movlb	0	; () banked
  5374  002E70  6F7E               	movwf	F32_getSetNextCluster@clusterEntry& (0+255),b
  5375  002E72  0E00               	movlw	0
  5376  002E74  0100               	movlb	0	; () banked
  5377  002E76  6F7F               	movwf	(F32_getSetNextCluster@clusterEntry+1)& (0+255),b
  5378  002E78  0E00               	movlw	0
  5379  002E7A  0100               	movlb	0	; () banked
  5380  002E7C  6F80               	movwf	(F32_getSetNextCluster@clusterEntry+2)& (0+255),b
  5381  002E7E  0E00               	movlw	0
  5382  002E80  0100               	movlb	0	; () banked
  5383  002E82  6F81               	movwf	(F32_getSetNextCluster@clusterEntry+3)& (0+255),b
  5384  002E84  EC57  F018         	call	_F32_getSetNextCluster	;wreg free
  5385  002E88  C079  F0D9         	movff	?_F32_getSetNextCluster,F32_readFile@cluster
  5386  002E8C  C07A  F0DA         	movff	?_F32_getSetNextCluster+1,F32_readFile@cluster+1
  5387  002E90  C07B  F0DB         	movff	?_F32_getSetNextCluster+2,F32_readFile@cluster+2
  5388  002E94  C07C  F0DC         	movff	?_F32_getSetNextCluster+3,F32_readFile@cluster+3
  5389                           
  5390                           ;rosso_f32.h: 479: if (cluster == 0) {
  5391  002E98  0100               	movlb	0	; () banked
  5392  002E9A  51DC               	movf	(F32_readFile@cluster+3)& (0+255),w,b
  5393  002E9C  11D9               	iorwf	F32_readFile@cluster& (0+255),w,b
  5394  002E9E  11DA               	iorwf	(F32_readFile@cluster+1)& (0+255),w,b
  5395  002EA0  11DB               	iorwf	(F32_readFile@cluster+2)& (0+255),w,b
  5396  002EA2  A4D8               	btfss	status,2,c
  5397  002EA4  D761               	goto	l4008
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;rosso_f32.h: 483: return 0;
  5401  002EA6  0E00               	movlw	0
  5402  002EA8  0012               	return	
  5403  002EAA                     __end_of_F32_readFile:
  5404                           	opt stack 0
  5405                           tblptru	equ	0xFF8
  5406                           tblptrh	equ	0xFF7
  5407                           tblptrl	equ	0xFF6
  5408                           tablat	equ	0xFF5
  5409                           prodh	equ	0xFF4
  5410                           prodl	equ	0xFF3
  5411                           postinc0	equ	0xFEE
  5412                           wreg	equ	0xFE8
  5413                           indf1	equ	0xFE7
  5414                           postdec1	equ	0xFE5
  5415                           fsr1h	equ	0xFE2
  5416                           fsr1l	equ	0xFE1
  5417                           indf2	equ	0xFDF
  5418                           postinc2	equ	0xFDE
  5419                           postdec2	equ	0xFDD
  5420                           fsr2h	equ	0xFDA
  5421                           fsr2l	equ	0xFD9
  5422                           status	equ	0xFD8
  5423                           
  5424 ;; *************** function _F32_findFiles *****************
  5425 ;; Defined at:
  5426 ;;		line 311 in file "../my_lib.X/rosso_f32.h"
  5427 ;; Parameters:    Size  Location     Type
  5428 ;;  flag            1    wreg     unsigned char 
  5429 ;;  fileName        2   59[BANK0 ] PTR unsigned char 
  5430 ;;		 -> fileName(12), NULL(0), 
  5431 ;; Auto vars:     Size  Location     Type
  5432 ;;  flag            1   77[BANK0 ] unsigned char 
  5433 ;;  cluster         4   88[BANK0 ] unsigned long 
  5434 ;;  firstCluster    4   84[BANK0 ] unsigned long 
  5435 ;;  sector          4   80[BANK0 ] unsigned long 
  5436 ;;  firstSector     4   73[BANK0 ] unsigned long 
  5437 ;;  nextCluster     4   69[BANK0 ] unsigned long 
  5438 ;;  dir             2   93[BANK0 ] PTR struct dir_Structure
  5439 ;;		 -> SD_buffer(512), 
  5440 ;;  i               2   78[BANK0 ] unsigned short 
  5441 ;;  j               1   92[BANK0 ] unsigned char 
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  2   59[BANK0 ] PTR struct dir_Structure
  5444 ;; Registers used:
  5445 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5451 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;      Locals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Totals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;Total ram usage:       36 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; Hardware stack levels required when called:    7
  5458 ;; This function calls:
  5459 ;;		_F32_displayMemory
  5460 ;;		_F32_freeMemoryUpdate
  5461 ;;		_F32_getFirstSector
  5462 ;;		_F32_getSetFreeCluster
  5463 ;;		_F32_getSetNextCluster
  5464 ;;		_SD_readSingleBlock
  5465 ;;		_SD_writeSingleBlock
  5466 ;; This function is called by:
  5467 ;;		_F32_readFile
  5468 ;;		_main
  5469 ;;		_F32_deleteFile
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           	psect	text13
  5474  001C00                     __ptext13:
  5475                           	opt stack 0
  5476  001C00                     _F32_findFiles:
  5477                           	opt stack 21
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;incstack = 0
  5481                           ;F32_findFiles@flag stored from wreg
  5482  001C00  0100               	movlb	0	; () banked
  5483  001C02  6FAD               	movwf	F32_findFiles@flag& (0+255),b
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;rosso_f32.h: 312: UINT32 cluster, sector, firstSector, firstCluster, nextCluster;
  5487                           ;rosso_f32.h: 313: struct dir_Structure *dir;
  5488                           ;rosso_f32.h: 314: UINT16 i;
  5489                           ;rosso_f32.h: 315: UINT8 j;
  5490                           ;rosso_f32.h: 317: cluster = rootCluster;
  5491  001C04  C02B  F0B8         	movff	_rootCluster,F32_findFiles@cluster	;volatile
  5492  001C08  C02C  F0B9         	movff	_rootCluster+1,F32_findFiles@cluster+1	;volatile
  5493  001C0C  C02D  F0BA         	movff	_rootCluster+2,F32_findFiles@cluster+2	;volatile
  5494  001C10  C02E  F0BB         	movff	_rootCluster+3,F32_findFiles@cluster+3	;volatile
  5495  001C14                     l3860:
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;rosso_f32.h: 320: firstSector = F32_getFirstSector(cluster);
  5499  001C14  C0B8  F06C         	movff	F32_findFiles@cluster,F32_getFirstSector@clusterNumber
  5500  001C18  C0B9  F06D         	movff	F32_findFiles@cluster+1,F32_getFirstSector@clusterNumber+1
  5501  001C1C  C0BA  F06E         	movff	F32_findFiles@cluster+2,F32_getFirstSector@clusterNumber+2
  5502  001C20  C0BB  F06F         	movff	F32_findFiles@cluster+3,F32_getFirstSector@clusterNumber+3
  5503  001C24  EC16  F01E         	call	_F32_getFirstSector	;wreg free
  5504  001C28  C06C  F0A9         	movff	?_F32_getFirstSector,F32_findFiles@firstSector
  5505  001C2C  C06D  F0AA         	movff	?_F32_getFirstSector+1,F32_findFiles@firstSector+1
  5506  001C30  C06E  F0AB         	movff	?_F32_getFirstSector+2,F32_findFiles@firstSector+2
  5507  001C34  C06F  F0AC         	movff	?_F32_getFirstSector+3,F32_findFiles@firstSector+3
  5508                           
  5509                           ;rosso_f32.h: 322: for (sector = 0; sector < sectorPerCluster; sector++) {
  5510  001C38  0E00               	movlw	0
  5511  001C3A  0100               	movlb	0	; () banked
  5512  001C3C  6FB0               	movwf	F32_findFiles@sector& (0+255),b
  5513  001C3E  0E00               	movlw	0
  5514  001C40  0100               	movlb	0	; () banked
  5515  001C42  6FB1               	movwf	(F32_findFiles@sector+1)& (0+255),b
  5516  001C44  0E00               	movlw	0
  5517  001C46  0100               	movlb	0	; () banked
  5518  001C48  6FB2               	movwf	(F32_findFiles@sector+2)& (0+255),b
  5519  001C4A  0E00               	movlw	0
  5520  001C4C  0100               	movlb	0	; () banked
  5521  001C4E  6FB3               	movwf	(F32_findFiles@sector+3)& (0+255),b
  5522  001C50  D271               	goto	l309
  5523  001C52                     l3864:
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;rosso_f32.h: 323: SD_readSingleBlock(firstSector + sector);
  5527  001C52  0100               	movlb	0	; () banked
  5528  001C54  51B0               	movf	F32_findFiles@sector& (0+255),w,b
  5529  001C56  0100               	movlb	0	; () banked
  5530  001C58  25A9               	addwf	F32_findFiles@firstSector& (0+255),w,b
  5531  001C5A  0100               	movlb	0	; () banked
  5532  001C5C  6F6C               	movwf	SD_readSingleBlock@SD_startBlock& (0+255),b
  5533  001C5E  0100               	movlb	0	; () banked
  5534  001C60  51B1               	movf	(F32_findFiles@sector+1)& (0+255),w,b
  5535  001C62  0100               	movlb	0	; () banked
  5536  001C64  21AA               	addwfc	(F32_findFiles@firstSector+1)& (0+255),w,b
  5537  001C66  0100               	movlb	0	; () banked
  5538  001C68  6F6D               	movwf	(SD_readSingleBlock@SD_startBlock+1)& (0+255),b
  5539  001C6A  0100               	movlb	0	; () banked
  5540  001C6C  51B2               	movf	(F32_findFiles@sector+2)& (0+255),w,b
  5541  001C6E  0100               	movlb	0	; () banked
  5542  001C70  21AB               	addwfc	(F32_findFiles@firstSector+2)& (0+255),w,b
  5543  001C72  0100               	movlb	0	; () banked
  5544  001C74  6F6E               	movwf	(SD_readSingleBlock@SD_startBlock+2)& (0+255),b
  5545  001C76  0100               	movlb	0	; () banked
  5546  001C78  51B3               	movf	(F32_findFiles@sector+3)& (0+255),w,b
  5547  001C7A  0100               	movlb	0	; () banked
  5548  001C7C  21AC               	addwfc	(F32_findFiles@firstSector+3)& (0+255),w,b
  5549  001C7E  0100               	movlb	0	; () banked
  5550  001C80  6F6F               	movwf	(SD_readSingleBlock@SD_startBlock+3)& (0+255),b
  5551  001C82  EC2C  F01D         	call	_SD_readSingleBlock	;wreg free
  5552                           
  5553                           ;rosso_f32.h: 325: for (i = 0; i < bytesPerSector; i += 32) {
  5554  001C86  0E00               	movlw	0
  5555  001C88  0100               	movlb	0	; () banked
  5556  001C8A  6FAF               	movwf	(F32_findFiles@i+1)& (0+255),b
  5557  001C8C  0E00               	movlw	0
  5558  001C8E  0100               	movlb	0	; () banked
  5559  001C90  6FAE               	movwf	F32_findFiles@i& (0+255),b
  5560  001C92  D23C               	goto	l311
  5561  001C94                     l3868:
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;rosso_f32.h: 326: dir = (struct dir_Structure *) &SD_buffer[i];
  5565  001C94  0EEE               	movlw	low _SD_buffer
  5566  001C96  0100               	movlb	0	; () banked
  5567  001C98  6F9D               	movwf	??_F32_findFiles& (0+255),b
  5568  001C9A  0E01               	movlw	high _SD_buffer
  5569  001C9C  6F9E               	movwf	(??_F32_findFiles+1)& (0+255),b
  5570  001C9E  0100               	movlb	0	; () banked
  5571  001CA0  51AE               	movf	F32_findFiles@i& (0+255),w,b
  5572  001CA2  0100               	movlb	0	; () banked
  5573  001CA4  279D               	addwf	??_F32_findFiles& (0+255),f,b
  5574  001CA6  0100               	movlb	0	; () banked
  5575  001CA8  51AF               	movf	(F32_findFiles@i+1)& (0+255),w,b
  5576  001CAA  0100               	movlb	0	; () banked
  5577  001CAC  239E               	addwfc	(??_F32_findFiles+1)& (0+255),f,b
  5578  001CAE  C09D  F0BD         	movff	??_F32_findFiles,F32_findFiles@dir
  5579  001CB2  C09E  F0BE         	movff	??_F32_findFiles+1,F32_findFiles@dir+1
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;rosso_f32.h: 328: if (dir->name[0] == 0x00)
  5583  001CB6  C0BD  FFD9         	movff	F32_findFiles@dir,fsr2l
  5584  001CBA  C0BE  FFDA         	movff	F32_findFiles@dir+1,fsr2h
  5585  001CBE  50DF               	movf	indf2,w,c
  5586  001CC0  A4D8               	btfss	status,2,c
  5587  001CC2  D007               	goto	l3876
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;rosso_f32.h: 329: {
  5591                           ;rosso_f32.h: 334: return 0;
  5592  001CC4  0E00               	movlw	0
  5593  001CC6  0100               	movlb	0	; () banked
  5594  001CC8  6F9C               	movwf	(?_F32_findFiles+1)& (0+255),b
  5595  001CCA  0E00               	movlw	0
  5596  001CCC  0100               	movlb	0	; () banked
  5597  001CCE  6F9B               	movwf	?_F32_findFiles& (0+255),b
  5598  001CD0  0012               	return	
  5599  001CD2                     l3876:
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;rosso_f32.h: 335: }
  5603                           ;rosso_f32.h: 336: if ((dir->name[0] != 0xe5)
  5604                           ;rosso_f32.h: 337: && (dir->attrib != 0x0f)) {
  5605  001CD2  C0BD  FFD9         	movff	F32_findFiles@dir,fsr2l
  5606  001CD6  C0BE  FFDA         	movff	F32_findFiles@dir+1,fsr2h
  5607  001CDA  50DF               	movf	indf2,w,c
  5608  001CDC  0AE5               	xorlw	229
  5609  001CDE  B4D8               	btfsc	status,2,c
  5610  001CE0  D20F               	goto	l3952
  5611                           
  5612                           ; BSR set to: 0
  5613  001CE2  0100               	movlb	0	; () banked
  5614  001CE4  EE20 F00B          	lfsr	2,11
  5615  001CE8  0100               	movlb	0	; () banked
  5616  001CEA  51BD               	movf	F32_findFiles@dir& (0+255),w,b
  5617  001CEC  26D9               	addwf	fsr2l,f,c
  5618  001CEE  0100               	movlb	0	; () banked
  5619  001CF0  51BE               	movf	(F32_findFiles@dir+1)& (0+255),w,b
  5620  001CF2  22DA               	addwfc	fsr2h,f,c
  5621  001CF4  50DF               	movf	indf2,w,c
  5622  001CF6  0A0F               	xorlw	15
  5623  001CF8  B4D8               	btfsc	status,2,c
  5624  001CFA  D202               	goto	l3952
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;rosso_f32.h: 338: if ((flag == 1) || (flag == 2)) {
  5628  001CFC  0100               	movlb	0	; () banked
  5629  001CFE  05AD               	decf	F32_findFiles@flag& (0+255),w,b
  5630  001D00  B4D8               	btfsc	status,2,c
  5631  001D02  D005               	goto	l3884
  5632                           
  5633                           ; BSR set to: 0
  5634  001D04  0100               	movlb	0	; () banked
  5635  001D06  51AD               	movf	F32_findFiles@flag& (0+255),w,b
  5636  001D08  0A02               	xorlw	2
  5637  001D0A  A4D8               	btfss	status,2,c
  5638  001D0C  D1BD               	goto	l3936
  5639  001D0E                     l3884:
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;rosso_f32.h: 339: for (j = 0; j < 11; j++)
  5643  001D0E  0E00               	movlw	0
  5644  001D10  0100               	movlb	0	; () banked
  5645  001D12  6FBC               	movwf	F32_findFiles@j& (0+255),b
  5646  001D14  D020               	goto	L9
  5647  001D16                     l3890:
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;rosso_f32.h: 340: if (dir->name[j] != fileName[j])
  5651  001D16  0100               	movlb	0	; () banked
  5652  001D18  51BC               	movf	F32_findFiles@j& (0+255),w,b
  5653  001D1A  0D01               	mullw	1
  5654  001D1C  50F3               	movf	prodl,w,c
  5655  001D1E  0100               	movlb	0	; () banked
  5656  001D20  259B               	addwf	F32_findFiles@fileName& (0+255),w,b
  5657  001D22  6ED9               	movwf	fsr2l,c
  5658  001D24  50F4               	movf	prodh,w,c
  5659  001D26  0100               	movlb	0	; () banked
  5660  001D28  219C               	addwfc	(F32_findFiles@fileName+1)& (0+255),w,b
  5661  001D2A  6EDA               	movwf	fsr2h,c
  5662  001D2C  50DF               	movf	indf2,w,c
  5663  001D2E  0100               	movlb	0	; () banked
  5664  001D30  6F9D               	movwf	??_F32_findFiles& (0+255),b
  5665  001D32  0100               	movlb	0	; () banked
  5666  001D34  51BC               	movf	F32_findFiles@j& (0+255),w,b
  5667  001D36  0D01               	mullw	1
  5668  001D38  50F3               	movf	prodl,w,c
  5669  001D3A  0100               	movlb	0	; () banked
  5670  001D3C  25BD               	addwf	F32_findFiles@dir& (0+255),w,b
  5671  001D3E  6ED9               	movwf	fsr2l,c
  5672  001D40  50F4               	movf	prodh,w,c
  5673  001D42  0100               	movlb	0	; () banked
  5674  001D44  21BE               	addwfc	(F32_findFiles@dir+1)& (0+255),w,b
  5675  001D46  6EDA               	movwf	fsr2h,c
  5676  001D48  50DF               	movf	indf2,w,c
  5677  001D4A  0100               	movlb	0	; () banked
  5678  001D4C  199D               	xorwf	??_F32_findFiles& (0+255),w,b
  5679  001D4E  A4D8               	btfss	status,2,c
  5680  001D50  D006               	goto	l3898
  5681                           
  5682                           ; BSR set to: 0
  5683                           
  5684                           ; BSR set to: 0
  5685                           
  5686                           ; BSR set to: 0
  5687                           ;rosso_f32.h: 341: break;
  5688  001D52  0100               	movlb	0	; () banked
  5689  001D54  2BBC               	incf	F32_findFiles@j& (0+255),f,b
  5690  001D56                     L9:
  5691                           
  5692                           ; BSR set to: 0
  5693  001D56  0E0A               	movlw	10
  5694  001D58  0100               	movlb	0	; () banked
  5695  001D5A  65BC               	cpfsgt	F32_findFiles@j& (0+255),b
  5696  001D5C  D7DC               	goto	l3890
  5697  001D5E                     l3898:
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;rosso_f32.h: 342: if (j == 11) {
  5701  001D5E  0100               	movlb	0	; () banked
  5702  001D60  51BC               	movf	F32_findFiles@j& (0+255),w,b
  5703  001D62  0A0B               	xorlw	11
  5704  001D64  A4D8               	btfss	status,2,c
  5705  001D66  D1CC               	goto	l3952
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;rosso_f32.h: 343: if (flag == 1) {
  5709  001D68  0100               	movlb	0	; () banked
  5710  001D6A  05AD               	decf	F32_findFiles@flag& (0+255),w,b
  5711  001D6C  A4D8               	btfss	status,2,c
  5712  001D6E  D07F               	goto	l3916
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;rosso_f32.h: 344: appendFileSector = firstSector + sector;
  5716  001D70  0100               	movlb	0	; () banked
  5717  001D72  51B0               	movf	F32_findFiles@sector& (0+255),w,b
  5718  001D74  0100               	movlb	0	; () banked
  5719  001D76  25A9               	addwf	F32_findFiles@firstSector& (0+255),w,b
  5720  001D78  0101               	movlb	1	; () banked
  5721  001D7A  6F08               	movwf	_appendFileSector& (0+255),b
  5722  001D7C  0100               	movlb	0	; () banked
  5723  001D7E  51B1               	movf	(F32_findFiles@sector+1)& (0+255),w,b
  5724  001D80  0100               	movlb	0	; () banked
  5725  001D82  21AA               	addwfc	(F32_findFiles@firstSector+1)& (0+255),w,b
  5726  001D84  0101               	movlb	1	; () banked
  5727  001D86  6F09               	movwf	(_appendFileSector+1)& (0+255),b
  5728  001D88  0100               	movlb	0	; () banked
  5729  001D8A  51B2               	movf	(F32_findFiles@sector+2)& (0+255),w,b
  5730  001D8C  0100               	movlb	0	; () banked
  5731  001D8E  21AB               	addwfc	(F32_findFiles@firstSector+2)& (0+255),w,b
  5732  001D90  0101               	movlb	1	; () banked
  5733  001D92  6F0A               	movwf	(_appendFileSector+2)& (0+255),b
  5734  001D94  0100               	movlb	0	; () banked
  5735  001D96  51B3               	movf	(F32_findFiles@sector+3)& (0+255),w,b
  5736  001D98  0100               	movlb	0	; () banked
  5737  001D9A  21AC               	addwfc	(F32_findFiles@firstSector+3)& (0+255),w,b
  5738  001D9C  0101               	movlb	1	; () banked
  5739  001D9E  6F0B               	movwf	(_appendFileSector+3)& (0+255),b
  5740                           
  5741                           ; BSR set to: 1
  5742                           ;rosso_f32.h: 345: appendFileLocation = i;
  5743  001DA0  0100               	movlb	0	; () banked
  5744  001DA2  0101               	movlb	1	; () banked
  5745  001DA4  C0AE  F104         	movff	F32_findFiles@i,_appendFileLocation
  5746  001DA8  0100               	movlb	0	; () banked
  5747  001DAA  0101               	movlb	1	; () banked
  5748  001DAC  C0AF  F105         	movff	F32_findFiles@i+1,_appendFileLocation+1
  5749  001DB0  0101               	movlb	1	; () banked
  5750  001DB2  6B06               	clrf	(_appendFileLocation+2)& (0+255),b
  5751  001DB4  0101               	movlb	1	; () banked
  5752  001DB6  6B07               	clrf	(_appendFileLocation+3)& (0+255),b
  5753                           
  5754                           ; BSR set to: 1
  5755                           ;rosso_f32.h: 346: appendStartCluster =
  5756                           ;rosso_f32.h: 347: (((UINT32) dir->firstClusterHI) << 16)
  5757                           ;rosso_f32.h: 348: | dir->firstClusterLO;
  5758  001DB8  0100               	movlb	0	; () banked
  5759  001DBA  EE20 F01A          	lfsr	2,26
  5760  001DBE  0100               	movlb	0	; () banked
  5761  001DC0  51BD               	movf	F32_findFiles@dir& (0+255),w,b
  5762  001DC2  26D9               	addwf	fsr2l,f,c
  5763  001DC4  0100               	movlb	0	; () banked
  5764  001DC6  51BE               	movf	(F32_findFiles@dir+1)& (0+255),w,b
  5765  001DC8  22DA               	addwfc	fsr2h,f,c
  5766  001DCA  CFDE F09D          	movff	postinc2,??_F32_findFiles
  5767  001DCE  CFDD F09E          	movff	postdec2,??_F32_findFiles+1
  5768  001DD2  0100               	movlb	0	; () banked
  5769  001DD4  EE20 F014          	lfsr	2,20
  5770  001DD8  0100               	movlb	0	; () banked
  5771  001DDA  51BD               	movf	F32_findFiles@dir& (0+255),w,b
  5772  001DDC  26D9               	addwf	fsr2l,f,c
  5773  001DDE  0100               	movlb	0	; () banked
  5774  001DE0  51BE               	movf	(F32_findFiles@dir+1)& (0+255),w,b
  5775  001DE2  22DA               	addwfc	fsr2h,f,c
  5776  001DE4  CFDE F09F          	movff	postinc2,??_F32_findFiles+2
  5777  001DE8  CFDD F0A0          	movff	postdec2,??_F32_findFiles+3
  5778  001DEC  0100               	movlb	0	; () banked
  5779  001DEE  519F               	movf	(??_F32_findFiles+2)& (0+255),w,b
  5780  001DF0  0100               	movlb	0	; () banked
  5781  001DF2  6FA1               	movwf	(??_F32_findFiles+4)& (0+255),b
  5782  001DF4  0100               	movlb	0	; () banked
  5783  001DF6  51A0               	movf	(??_F32_findFiles+3)& (0+255),w,b
  5784  001DF8  0100               	movlb	0	; () banked
  5785  001DFA  6FA2               	movwf	(??_F32_findFiles+5)& (0+255),b
  5786  001DFC  0100               	movlb	0	; () banked
  5787  001DFE  6BA3               	clrf	(??_F32_findFiles+6)& (0+255),b
  5788  001E00  0100               	movlb	0	; () banked
  5789  001E02  6BA4               	clrf	(??_F32_findFiles+7)& (0+255),b
  5790  001E04  C0A2  F0A4         	movff	??_F32_findFiles+5,??_F32_findFiles+7
  5791  001E08  C0A1  F0A3         	movff	??_F32_findFiles+4,??_F32_findFiles+6
  5792  001E0C  0100               	movlb	0	; () banked
  5793  001E0E  6BA2               	clrf	(??_F32_findFiles+5)& (0+255),b
  5794  001E10  6BA1               	clrf	(??_F32_findFiles+4)& (0+255),b
  5795  001E12  0100               	movlb	0	; () banked
  5796  001E14  519D               	movf	??_F32_findFiles& (0+255),w,b
  5797  001E16  0100               	movlb	0	; () banked
  5798  001E18  11A1               	iorwf	(??_F32_findFiles+4)& (0+255),w,b
  5799  001E1A  0101               	movlb	1	; () banked
  5800  001E1C  6F0C               	movwf	_appendStartCluster& (0+255),b
  5801  001E1E  0100               	movlb	0	; () banked
  5802  001E20  519E               	movf	(??_F32_findFiles+1)& (0+255),w,b
  5803  001E22  0100               	movlb	0	; () banked
  5804  001E24  11A2               	iorwf	(??_F32_findFiles+5)& (0+255),w,b
  5805  001E26  0101               	movlb	1	; () banked
  5806  001E28  6F0D               	movwf	(_appendStartCluster+1)& (0+255),b
  5807  001E2A  0E00               	movlw	0
  5808  001E2C  0100               	movlb	0	; () banked
  5809  001E2E  11A3               	iorwf	(??_F32_findFiles+6)& (0+255),w,b
  5810  001E30  0101               	movlb	1	; () banked
  5811  001E32  6F0E               	movwf	(_appendStartCluster+2)& (0+255),b
  5812  001E34  0E00               	movlw	0
  5813  001E36  0100               	movlb	0	; () banked
  5814  001E38  11A4               	iorwf	(??_F32_findFiles+7)& (0+255),w,b
  5815  001E3A  0101               	movlb	1	; () banked
  5816  001E3C  6F0F               	movwf	(_appendStartCluster+3)& (0+255),b
  5817                           
  5818                           ; BSR set to: 1
  5819                           ;rosso_f32.h: 349: fileSize = dir->fileSize;
  5820  001E3E  0100               	movlb	0	; () banked
  5821  001E40  EE20 F01C          	lfsr	2,28
  5822  001E44  0100               	movlb	0	; () banked
  5823  001E46  51BD               	movf	F32_findFiles@dir& (0+255),w,b
  5824  001E48  26D9               	addwf	fsr2l,f,c
  5825  001E4A  0100               	movlb	0	; () banked
  5826  001E4C  51BE               	movf	(F32_findFiles@dir+1)& (0+255),w,b
  5827  001E4E  22DA               	addwfc	fsr2h,f,c
  5828  001E50  CFDE F027          	movff	postinc2,_fileSize
  5829  001E54  CFDE F028          	movff	postinc2,_fileSize+1
  5830  001E58  CFDE F029          	movff	postinc2,_fileSize+2
  5831  001E5C  CFDE F02A          	movff	postinc2,_fileSize+3
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;rosso_f32.h: 350: return (dir);
  5835  001E60  0100               	movlb	0	; () banked
  5836  001E62  C0BE  F09C         	movff	F32_findFiles@dir+1,?_F32_findFiles+1
  5837  001E66  0100               	movlb	0	; () banked
  5838  001E68  C0BD  F09B         	movff	F32_findFiles@dir,?_F32_findFiles
  5839  001E6C  0012               	return	
  5840  001E6E                     l3916:
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;rosso_f32.h: 352: {
  5844                           ;rosso_f32.h: 359: firstCluster = (((UINT32) dir->firstClusterHI)
  5845                           ;rosso_f32.h: 360: << 16) | dir->firstClusterLO;
  5846  001E6E  0100               	movlb	0	; () banked
  5847  001E70  EE20 F01A          	lfsr	2,26
  5848  001E74  0100               	movlb	0	; () banked
  5849  001E76  51BD               	movf	F32_findFiles@dir& (0+255),w,b
  5850  001E78  26D9               	addwf	fsr2l,f,c
  5851  001E7A  0100               	movlb	0	; () banked
  5852  001E7C  51BE               	movf	(F32_findFiles@dir+1)& (0+255),w,b
  5853  001E7E  22DA               	addwfc	fsr2h,f,c
  5854  001E80  CFDE F09D          	movff	postinc2,??_F32_findFiles
  5855  001E84  CFDD F09E          	movff	postdec2,??_F32_findFiles+1
  5856  001E88  0100               	movlb	0	; () banked
  5857  001E8A  EE20 F014          	lfsr	2,20
  5858  001E8E  0100               	movlb	0	; () banked
  5859  001E90  51BD               	movf	F32_findFiles@dir& (0+255),w,b
  5860  001E92  26D9               	addwf	fsr2l,f,c
  5861  001E94  0100               	movlb	0	; () banked
  5862  001E96  51BE               	movf	(F32_findFiles@dir+1)& (0+255),w,b
  5863  001E98  22DA               	addwfc	fsr2h,f,c
  5864  001E9A  CFDE F09F          	movff	postinc2,??_F32_findFiles+2
  5865  001E9E  CFDD F0A0          	movff	postdec2,??_F32_findFiles+3
  5866  001EA2  0100               	movlb	0	; () banked
  5867  001EA4  519F               	movf	(??_F32_findFiles+2)& (0+255),w,b
  5868  001EA6  0100               	movlb	0	; () banked
  5869  001EA8  6FA1               	movwf	(??_F32_findFiles+4)& (0+255),b
  5870  001EAA  0100               	movlb	0	; () banked
  5871  001EAC  51A0               	movf	(??_F32_findFiles+3)& (0+255),w,b
  5872  001EAE  0100               	movlb	0	; () banked
  5873  001EB0  6FA2               	movwf	(??_F32_findFiles+5)& (0+255),b
  5874  001EB2  0100               	movlb	0	; () banked
  5875  001EB4  6BA3               	clrf	(??_F32_findFiles+6)& (0+255),b
  5876  001EB6  0100               	movlb	0	; () banked
  5877  001EB8  6BA4               	clrf	(??_F32_findFiles+7)& (0+255),b
  5878  001EBA  C0A2  F0A4         	movff	??_F32_findFiles+5,??_F32_findFiles+7
  5879  001EBE  C0A1  F0A3         	movff	??_F32_findFiles+4,??_F32_findFiles+6
  5880  001EC2  0100               	movlb	0	; () banked
  5881  001EC4  6BA2               	clrf	(??_F32_findFiles+5)& (0+255),b
  5882  001EC6  6BA1               	clrf	(??_F32_findFiles+4)& (0+255),b
  5883  001EC8  0100               	movlb	0	; () banked
  5884  001ECA  519D               	movf	??_F32_findFiles& (0+255),w,b
  5885  001ECC  0100               	movlb	0	; () banked
  5886  001ECE  11A1               	iorwf	(??_F32_findFiles+4)& (0+255),w,b
  5887  001ED0  0100               	movlb	0	; () banked
  5888  001ED2  6FB4               	movwf	F32_findFiles@firstCluster& (0+255),b
  5889  001ED4  0100               	movlb	0	; () banked
  5890  001ED6  519E               	movf	(??_F32_findFiles+1)& (0+255),w,b
  5891  001ED8  0100               	movlb	0	; () banked
  5892  001EDA  11A2               	iorwf	(??_F32_findFiles+5)& (0+255),w,b
  5893  001EDC  0100               	movlb	0	; () banked
  5894  001EDE  6FB5               	movwf	(F32_findFiles@firstCluster+1)& (0+255),b
  5895  001EE0  0E00               	movlw	0
  5896  001EE2  0100               	movlb	0	; () banked
  5897  001EE4  11A3               	iorwf	(??_F32_findFiles+6)& (0+255),w,b
  5898  001EE6  0100               	movlb	0	; () banked
  5899  001EE8  6FB6               	movwf	(F32_findFiles@firstCluster+2)& (0+255),b
  5900  001EEA  0E00               	movlw	0
  5901  001EEC  0100               	movlb	0	; () banked
  5902  001EEE  11A4               	iorwf	(??_F32_findFiles+7)& (0+255),w,b
  5903  001EF0  0100               	movlb	0	; () banked
  5904  001EF2  6FB7               	movwf	(F32_findFiles@firstCluster+3)& (0+255),b
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;rosso_f32.h: 363: dir->name[0] = 0xe5;
  5908  001EF4  C0BD  FFD9         	movff	F32_findFiles@dir,fsr2l
  5909  001EF8  C0BE  FFDA         	movff	F32_findFiles@dir+1,fsr2h
  5910  001EFC  0EE5               	movlw	229
  5911  001EFE  6EDF               	movwf	indf2,c
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;rosso_f32.h: 364: SD_writeSingleBlock(firstSector + sector);
  5915  001F00  0100               	movlb	0	; () banked
  5916  001F02  51B0               	movf	F32_findFiles@sector& (0+255),w,b
  5917  001F04  0100               	movlb	0	; () banked
  5918  001F06  25A9               	addwf	F32_findFiles@firstSector& (0+255),w,b
  5919  001F08  0100               	movlb	0	; () banked
  5920  001F0A  6F6C               	movwf	SD_writeSingleBlock@SD_startBlock& (0+255),b
  5921  001F0C  0100               	movlb	0	; () banked
  5922  001F0E  51B1               	movf	(F32_findFiles@sector+1)& (0+255),w,b
  5923  001F10  0100               	movlb	0	; () banked
  5924  001F12  21AA               	addwfc	(F32_findFiles@firstSector+1)& (0+255),w,b
  5925  001F14  0100               	movlb	0	; () banked
  5926  001F16  6F6D               	movwf	(SD_writeSingleBlock@SD_startBlock+1)& (0+255),b
  5927  001F18  0100               	movlb	0	; () banked
  5928  001F1A  51B2               	movf	(F32_findFiles@sector+2)& (0+255),w,b
  5929  001F1C  0100               	movlb	0	; () banked
  5930  001F1E  21AB               	addwfc	(F32_findFiles@firstSector+2)& (0+255),w,b
  5931  001F20  0100               	movlb	0	; () banked
  5932  001F22  6F6E               	movwf	(SD_writeSingleBlock@SD_startBlock+2)& (0+255),b
  5933  001F24  0100               	movlb	0	; () banked
  5934  001F26  51B3               	movf	(F32_findFiles@sector+3)& (0+255),w,b
  5935  001F28  0100               	movlb	0	; () banked
  5936  001F2A  21AC               	addwfc	(F32_findFiles@firstSector+3)& (0+255),w,b
  5937  001F2C  0100               	movlb	0	; () banked
  5938  001F2E  6F6F               	movwf	(SD_writeSingleBlock@SD_startBlock+3)& (0+255),b
  5939  001F30  EC48  F01C         	call	_SD_writeSingleBlock	;wreg free
  5940                           
  5941                           ;rosso_f32.h: 366: F32_freeMemoryUpdate(0, dir->fileSize);
  5942  001F34  0100               	movlb	0	; () banked
  5943  001F36  EE20 F01C          	lfsr	2,28
  5944  001F3A  0100               	movlb	0	; () banked
  5945  001F3C  51BD               	movf	F32_findFiles@dir& (0+255),w,b
  5946  001F3E  26D9               	addwf	fsr2l,f,c
  5947  001F40  0100               	movlb	0	; () banked
  5948  001F42  51BE               	movf	(F32_findFiles@dir+1)& (0+255),w,b
  5949  001F44  22DA               	addwfc	fsr2h,f,c
  5950  001F46  0100               	movlb	0	; () banked
  5951  001F48  CFDE F081          	movff	postinc2,F32_freeMemoryUpdate@size
  5952  001F4C  0100               	movlb	0	; () banked
  5953  001F4E  CFDE F082          	movff	postinc2,F32_freeMemoryUpdate@size+1
  5954  001F52  0100               	movlb	0	; () banked
  5955  001F54  CFDE F083          	movff	postinc2,F32_freeMemoryUpdate@size+2
  5956  001F58  0100               	movlb	0	; () banked
  5957  001F5A  CFDE F084          	movff	postinc2,F32_freeMemoryUpdate@size+3
  5958  001F5E  0E00               	movlw	0
  5959  001F60  ECEE  F014         	call	_F32_freeMemoryUpdate
  5960                           
  5961                           ;rosso_f32.h: 369: cluster = F32_getSetFreeCluster(2, 0,
  5962                           ;rosso_f32.h: 370: 0);
  5963  001F64  0E00               	movlw	0
  5964  001F66  0100               	movlb	0	; () banked
  5965  001F68  6F75               	movwf	F32_getSetFreeCluster@get_set& (0+255),b
  5966  001F6A  0E00               	movlw	0
  5967  001F6C  0100               	movlb	0	; () banked
  5968  001F6E  6F76               	movwf	F32_getSetFreeCluster@FSEntry& (0+255),b
  5969  001F70  0E00               	movlw	0
  5970  001F72  0100               	movlb	0	; () banked
  5971  001F74  6F77               	movwf	(F32_getSetFreeCluster@FSEntry+1)& (0+255),b
  5972  001F76  0E00               	movlw	0
  5973  001F78  0100               	movlb	0	; () banked
  5974  001F7A  6F78               	movwf	(F32_getSetFreeCluster@FSEntry+2)& (0+255),b
  5975  001F7C  0E00               	movlw	0
  5976  001F7E  0100               	movlb	0	; () banked
  5977  001F80  6F79               	movwf	(F32_getSetFreeCluster@FSEntry+3)& (0+255),b
  5978  001F82  0E02               	movlw	2
  5979  001F84  EC4C  F019         	call	_F32_getSetFreeCluster
  5980  001F88  C075  F0B8         	movff	?_F32_getSetFreeCluster,F32_findFiles@cluster
  5981  001F8C  C076  F0B9         	movff	?_F32_getSetFreeCluster+1,F32_findFiles@cluster+1
  5982  001F90  C077  F0BA         	movff	?_F32_getSetFreeCluster+2,F32_findFiles@cluster+2
  5983  001F94  C078  F0BB         	movff	?_F32_getSetFreeCluster+3,F32_findFiles@cluster+3
  5984                           
  5985                           ;rosso_f32.h: 371: if (firstCluster < cluster)
  5986  001F98  0100               	movlb	0	; () banked
  5987  001F9A  51B8               	movf	F32_findFiles@cluster& (0+255),w,b
  5988  001F9C  0100               	movlb	0	; () banked
  5989  001F9E  5DB4               	subwf	F32_findFiles@firstCluster& (0+255),w,b
  5990  001FA0  0100               	movlb	0	; () banked
  5991  001FA2  51B9               	movf	(F32_findFiles@cluster+1)& (0+255),w,b
  5992  001FA4  0100               	movlb	0	; () banked
  5993  001FA6  59B5               	subwfb	(F32_findFiles@firstCluster+1)& (0+255),w,b
  5994  001FA8  0100               	movlb	0	; () banked
  5995  001FAA  51BA               	movf	(F32_findFiles@cluster+2)& (0+255),w,b
  5996  001FAC  0100               	movlb	0	; () banked
  5997  001FAE  59B6               	subwfb	(F32_findFiles@firstCluster+2)& (0+255),w,b
  5998  001FB0  0100               	movlb	0	; () banked
  5999  001FB2  51BB               	movf	(F32_findFiles@cluster+3)& (0+255),w,b
  6000  001FB4  0100               	movlb	0	; () banked
  6001  001FB6  59B7               	subwfb	(F32_findFiles@firstCluster+3)& (0+255),w,b
  6002  001FB8  B0D8               	btfsc	status,0,c
  6003  001FBA  D00E               	goto	l326
  6004                           
  6005                           ; BSR set to: 0
  6006                           ;rosso_f32.h: 372: F32_getSetFreeCluster(2, 1,
  6007                           ;rosso_f32.h: 373: firstCluster);
  6008  001FBC  0E01               	movlw	1
  6009  001FBE  0100               	movlb	0	; () banked
  6010  001FC0  6F75               	movwf	F32_getSetFreeCluster@get_set& (0+255),b
  6011  001FC2  C0B4  F076         	movff	F32_findFiles@firstCluster,F32_getSetFreeCluster@FSEntry
  6012  001FC6  C0B5  F077         	movff	F32_findFiles@firstCluster+1,F32_getSetFreeCluster@FSEntry+1
  6013  001FCA  C0B6  F078         	movff	F32_findFiles@firstCluster+2,F32_getSetFreeCluster@FSEntry+2
  6014  001FCE  C0B7  F079         	movff	F32_findFiles@firstCluster+3,F32_getSetFreeCluster@FSEntry+3
  6015  001FD2  0E02               	movlw	2
  6016  001FD4  EC4C  F019         	call	_F32_getSetFreeCluster
  6017  001FD8                     l326:
  6018                           
  6019                           ;rosso_f32.h: 377: nextCluster = F32_getSetNextCluster(
  6020                           ;rosso_f32.h: 378: firstCluster, 0, 0);
  6021  001FD8  C0B4  F079         	movff	F32_findFiles@firstCluster,F32_getSetNextCluster@clusterNumber
  6022  001FDC  C0B5  F07A         	movff	F32_findFiles@firstCluster+1,F32_getSetNextCluster@clusterNumber+1
  6023  001FE0  C0B6  F07B         	movff	F32_findFiles@firstCluster+2,F32_getSetNextCluster@clusterNumber+2
  6024  001FE4  C0B7  F07C         	movff	F32_findFiles@firstCluster+3,F32_getSetNextCluster@clusterNumber+3
  6025  001FE8  0E00               	movlw	0
  6026  001FEA  0100               	movlb	0	; () banked
  6027  001FEC  6F7D               	movwf	F32_getSetNextCluster@get_set& (0+255),b
  6028  001FEE  0E00               	movlw	0
  6029  001FF0  0100               	movlb	0	; () banked
  6030  001FF2  6F7E               	movwf	F32_getSetNextCluster@clusterEntry& (0+255),b
  6031  001FF4  0E00               	movlw	0
  6032  001FF6  0100               	movlb	0	; () banked
  6033  001FF8  6F7F               	movwf	(F32_getSetNextCluster@clusterEntry+1)& (0+255),b
  6034  001FFA  0E00               	movlw	0
  6035  001FFC  0100               	movlb	0	; () banked
  6036  001FFE  6F80               	movwf	(F32_getSetNextCluster@clusterEntry+2)& (0+255),b
  6037  002000  0E00               	movlw	0
  6038  002002  0100               	movlb	0	; () banked
  6039  002004  6F81               	movwf	(F32_getSetNextCluster@clusterEntry+3)& (0+255),b
  6040  002006  EC57  F018         	call	_F32_getSetNextCluster	;wreg free
  6041  00200A  C079  F0A5         	movff	?_F32_getSetNextCluster,F32_findFiles@nextCluster
  6042  00200E  C07A  F0A6         	movff	?_F32_getSetNextCluster+1,F32_findFiles@nextCluster+1
  6043  002012  C07B  F0A7         	movff	?_F32_getSetNextCluster+2,F32_findFiles@nextCluster+2
  6044  002016  C07C  F0A8         	movff	?_F32_getSetNextCluster+3,F32_findFiles@nextCluster+3
  6045                           
  6046                           ;rosso_f32.h: 379: F32_getSetNextCluster(firstCluster, 1, 0);
  6047  00201A  C0B4  F079         	movff	F32_findFiles@firstCluster,F32_getSetNextCluster@clusterNumber
  6048  00201E  C0B5  F07A         	movff	F32_findFiles@firstCluster+1,F32_getSetNextCluster@clusterNumber+1
  6049  002022  C0B6  F07B         	movff	F32_findFiles@firstCluster+2,F32_getSetNextCluster@clusterNumber+2
  6050  002026  C0B7  F07C         	movff	F32_findFiles@firstCluster+3,F32_getSetNextCluster@clusterNumber+3
  6051  00202A  0E01               	movlw	1
  6052  00202C  0100               	movlb	0	; () banked
  6053  00202E  6F7D               	movwf	F32_getSetNextCluster@get_set& (0+255),b
  6054  002030  0E00               	movlw	0
  6055  002032  0100               	movlb	0	; () banked
  6056  002034  6F7E               	movwf	F32_getSetNextCluster@clusterEntry& (0+255),b
  6057  002036  0E00               	movlw	0
  6058  002038  0100               	movlb	0	; () banked
  6059  00203A  6F7F               	movwf	(F32_getSetNextCluster@clusterEntry+1)& (0+255),b
  6060  00203C  0E00               	movlw	0
  6061  00203E  0100               	movlb	0	; () banked
  6062  002040  6F80               	movwf	(F32_getSetNextCluster@clusterEntry+2)& (0+255),b
  6063  002042  0E00               	movlw	0
  6064  002044  0100               	movlb	0	; () banked
  6065  002046  6F81               	movwf	(F32_getSetNextCluster@clusterEntry+3)& (0+255),b
  6066  002048  EC57  F018         	call	_F32_getSetNextCluster	;wreg free
  6067                           
  6068                           ;rosso_f32.h: 380: if (nextCluster > 0x0ffffff6) {
  6069  00204C  0EF7               	movlw	247
  6070  00204E  0100               	movlb	0	; () banked
  6071  002050  5DA5               	subwf	F32_findFiles@nextCluster& (0+255),w,b
  6072  002052  0EFF               	movlw	255
  6073  002054  0100               	movlb	0	; () banked
  6074  002056  59A6               	subwfb	(F32_findFiles@nextCluster+1)& (0+255),w,b
  6075  002058  0EFF               	movlw	255
  6076  00205A  0100               	movlb	0	; () banked
  6077  00205C  59A7               	subwfb	(F32_findFiles@nextCluster+2)& (0+255),w,b
  6078  00205E  0E0F               	movlw	15
  6079  002060  0100               	movlb	0	; () banked
  6080  002062  59A8               	subwfb	(F32_findFiles@nextCluster+3)& (0+255),w,b
  6081  002064  A0D8               	btfss	status,0,c
  6082  002066  D007               	goto	l327
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;rosso_f32.h: 384: return 0;
  6086  002068  0E00               	movlw	0
  6087  00206A  0100               	movlb	0	; () banked
  6088  00206C  6F9C               	movwf	(?_F32_findFiles+1)& (0+255),b
  6089  00206E  0E00               	movlw	0
  6090  002070  0100               	movlb	0	; () banked
  6091  002072  6F9B               	movwf	?_F32_findFiles& (0+255),b
  6092  002074  0012               	return	
  6093  002076                     l327:
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;rosso_f32.h: 385: }
  6097                           ;rosso_f32.h: 386: firstCluster = nextCluster;
  6098  002076  C0A5  F0B4         	movff	F32_findFiles@nextCluster,F32_findFiles@firstCluster
  6099  00207A  C0A6  F0B5         	movff	F32_findFiles@nextCluster+1,F32_findFiles@firstCluster+1
  6100  00207E  C0A7  F0B6         	movff	F32_findFiles@nextCluster+2,F32_findFiles@firstCluster+2
  6101  002082  C0A8  F0B7         	movff	F32_findFiles@nextCluster+3,F32_findFiles@firstCluster+3
  6102  002086  D7A8               	goto	l326
  6103  002088                     l3936:
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;rosso_f32.h: 391: {
  6107                           ;rosso_f32.h: 395: for (j = 0; j < 11; j++) {
  6108  002088  0E00               	movlw	0
  6109  00208A  0100               	movlb	0	; () banked
  6110  00208C  6FBC               	movwf	F32_findFiles@j& (0+255),b
  6111  00208E  D002               	goto	L10
  6112  002090                     l3942:
  6113                           
  6114                           ; BSR set to: 0
  6115  002090  0100               	movlb	0	; () banked
  6116  002092  2BBC               	incf	F32_findFiles@j& (0+255),f,b
  6117  002094                     L10:
  6118                           
  6119                           ; BSR set to: 0
  6120  002094  0E0A               	movlw	10
  6121  002096  0100               	movlb	0	; () banked
  6122  002098  65BC               	cpfsgt	F32_findFiles@j& (0+255),b
  6123  00209A  D7FA               	goto	l3942
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;rosso_f32.h: 401: }
  6127                           ;rosso_f32.h: 405: if ((dir->attrib != 0x10) && (dir->attrib != 0x08)) {
  6128                           
  6129                           ; BSR set to: 0
  6130  00209C  0100               	movlb	0	; () banked
  6131  00209E  EE20 F00B          	lfsr	2,11
  6132  0020A2  0100               	movlb	0	; () banked
  6133  0020A4  51BD               	movf	F32_findFiles@dir& (0+255),w,b
  6134  0020A6  26D9               	addwf	fsr2l,f,c
  6135  0020A8  0100               	movlb	0	; () banked
  6136  0020AA  51BE               	movf	(F32_findFiles@dir+1)& (0+255),w,b
  6137  0020AC  22DA               	addwfc	fsr2h,f,c
  6138  0020AE  50DF               	movf	indf2,w,c
  6139  0020B0  0A10               	xorlw	16
  6140  0020B2  B4D8               	btfsc	status,2,c
  6141  0020B4  D025               	goto	l3952
  6142                           
  6143                           ; BSR set to: 0
  6144  0020B6  0100               	movlb	0	; () banked
  6145  0020B8  EE20 F00B          	lfsr	2,11
  6146  0020BC  0100               	movlb	0	; () banked
  6147  0020BE  51BD               	movf	F32_findFiles@dir& (0+255),w,b
  6148  0020C0  26D9               	addwf	fsr2l,f,c
  6149  0020C2  0100               	movlb	0	; () banked
  6150  0020C4  51BE               	movf	(F32_findFiles@dir+1)& (0+255),w,b
  6151  0020C6  22DA               	addwfc	fsr2h,f,c
  6152  0020C8  50DF               	movf	indf2,w,c
  6153  0020CA  0A08               	xorlw	8
  6154  0020CC  B4D8               	btfsc	status,2,c
  6155  0020CE  D018               	goto	l3952
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;rosso_f32.h: 410: F32_displayMemory(0, dir->fileSize);
  6159  0020D0  0100               	movlb	0	; () banked
  6160  0020D2  EE20 F01C          	lfsr	2,28
  6161  0020D6  0100               	movlb	0	; () banked
  6162  0020D8  51BD               	movf	F32_findFiles@dir& (0+255),w,b
  6163  0020DA  26D9               	addwf	fsr2l,f,c
  6164  0020DC  0100               	movlb	0	; () banked
  6165  0020DE  51BE               	movf	(F32_findFiles@dir+1)& (0+255),w,b
  6166  0020E0  22DA               	addwfc	fsr2h,f,c
  6167  0020E2  0100               	movlb	0	; () banked
  6168  0020E4  CFDE F079          	movff	postinc2,F32_displayMemory@memory
  6169  0020E8  0100               	movlb	0	; () banked
  6170  0020EA  CFDE F07A          	movff	postinc2,F32_displayMemory@memory+1
  6171  0020EE  0100               	movlb	0	; () banked
  6172  0020F0  CFDE F07B          	movff	postinc2,F32_displayMemory@memory+2
  6173  0020F4  0100               	movlb	0	; () banked
  6174  0020F6  CFDE F07C          	movff	postinc2,F32_displayMemory@memory+3
  6175  0020FA  0E00               	movlw	0
  6176  0020FC  EC0D  F01B         	call	_F32_displayMemory
  6177  002100                     l3952:
  6178  002100  0E20               	movlw	32
  6179  002102  0100               	movlb	0	; () banked
  6180  002104  27AE               	addwf	F32_findFiles@i& (0+255),f,b
  6181  002106  0E00               	movlw	0
  6182  002108  0100               	movlb	0	; () banked
  6183  00210A  23AF               	addwfc	(F32_findFiles@i+1)& (0+255),f,b
  6184  00210C                     l311:
  6185                           
  6186                           ; BSR set to: 0
  6187  00210C  0100               	movlb	0	; () banked
  6188  00210E  51EE               	movf	_bytesPerSector& (0+255),w,b	;volatile
  6189  002110  0100               	movlb	0	; () banked
  6190  002112  5DAE               	subwf	F32_findFiles@i& (0+255),w,b
  6191  002114  0100               	movlb	0	; () banked
  6192  002116  51EF               	movf	(_bytesPerSector+1)& (0+255),w,b	;volatile
  6193  002118  0100               	movlb	0	; () banked
  6194  00211A  59AF               	subwfb	(F32_findFiles@i+1)& (0+255),w,b
  6195  00211C  A0D8               	btfss	status,0,c
  6196  00211E  D5BA               	goto	l3868
  6197                           
  6198                           ; BSR set to: 0
  6199                           
  6200                           ; BSR set to: 0
  6201  002120  0E01               	movlw	1
  6202  002122  0100               	movlb	0	; () banked
  6203  002124  27B0               	addwf	F32_findFiles@sector& (0+255),f,b
  6204  002126  0E00               	movlw	0
  6205  002128  0100               	movlb	0	; () banked
  6206  00212A  23B1               	addwfc	(F32_findFiles@sector+1)& (0+255),f,b
  6207  00212C  0100               	movlb	0	; () banked
  6208  00212E  23B2               	addwfc	(F32_findFiles@sector+2)& (0+255),f,b
  6209  002130  0100               	movlb	0	; () banked
  6210  002132  23B3               	addwfc	(F32_findFiles@sector+3)& (0+255),f,b
  6211  002134                     l309:
  6212                           
  6213                           ; BSR set to: 0
  6214  002134  503F               	movf	_sectorPerCluster,w,c	;volatile
  6215  002136  0100               	movlb	0	; () banked
  6216  002138  6F9D               	movwf	??_F32_findFiles& (0+255),b
  6217  00213A  5040               	movf	_sectorPerCluster+1,w,c	;volatile
  6218  00213C  0100               	movlb	0	; () banked
  6219  00213E  6F9E               	movwf	(??_F32_findFiles+1)& (0+255),b
  6220  002140  0100               	movlb	0	; () banked
  6221  002142  6B9F               	clrf	(??_F32_findFiles+2)& (0+255),b
  6222  002144  0100               	movlb	0	; () banked
  6223  002146  6BA0               	clrf	(??_F32_findFiles+3)& (0+255),b
  6224  002148  0100               	movlb	0	; () banked
  6225  00214A  519D               	movf	??_F32_findFiles& (0+255),w,b
  6226  00214C  0100               	movlb	0	; () banked
  6227  00214E  5DB0               	subwf	F32_findFiles@sector& (0+255),w,b
  6228  002150  0100               	movlb	0	; () banked
  6229  002152  519E               	movf	(??_F32_findFiles+1)& (0+255),w,b
  6230  002154  0100               	movlb	0	; () banked
  6231  002156  59B1               	subwfb	(F32_findFiles@sector+1)& (0+255),w,b
  6232  002158  0100               	movlb	0	; () banked
  6233  00215A  519F               	movf	(??_F32_findFiles+2)& (0+255),w,b
  6234  00215C  0100               	movlb	0	; () banked
  6235  00215E  59B2               	subwfb	(F32_findFiles@sector+2)& (0+255),w,b
  6236  002160  0100               	movlb	0	; () banked
  6237  002162  51A0               	movf	(??_F32_findFiles+3)& (0+255),w,b
  6238  002164  0100               	movlb	0	; () banked
  6239  002166  59B3               	subwfb	(F32_findFiles@sector+3)& (0+255),w,b
  6240  002168  A0D8               	btfss	status,0,c
  6241  00216A  D573               	goto	l3864
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;rosso_f32.h: 416: }
  6245                           ;rosso_f32.h: 417: }
  6246                           ;rosso_f32.h: 418: }
  6247                           ;rosso_f32.h: 419: }
  6248                           ;rosso_f32.h: 420: }
  6249                           ;rosso_f32.h: 422: cluster = (F32_getSetNextCluster(cluster, 0, 0));
  6250                           
  6251                           ; BSR set to: 0
  6252  00216C  C0B8  F079         	movff	F32_findFiles@cluster,F32_getSetNextCluster@clusterNumber
  6253  002170  C0B9  F07A         	movff	F32_findFiles@cluster+1,F32_getSetNextCluster@clusterNumber+1
  6254  002174  C0BA  F07B         	movff	F32_findFiles@cluster+2,F32_getSetNextCluster@clusterNumber+2
  6255  002178  C0BB  F07C         	movff	F32_findFiles@cluster+3,F32_getSetNextCluster@clusterNumber+3
  6256  00217C  0E00               	movlw	0
  6257  00217E  0100               	movlb	0	; () banked
  6258  002180  6F7D               	movwf	F32_getSetNextCluster@get_set& (0+255),b
  6259  002182  0E00               	movlw	0
  6260  002184  0100               	movlb	0	; () banked
  6261  002186  6F7E               	movwf	F32_getSetNextCluster@clusterEntry& (0+255),b
  6262  002188  0E00               	movlw	0
  6263  00218A  0100               	movlb	0	; () banked
  6264  00218C  6F7F               	movwf	(F32_getSetNextCluster@clusterEntry+1)& (0+255),b
  6265  00218E  0E00               	movlw	0
  6266  002190  0100               	movlb	0	; () banked
  6267  002192  6F80               	movwf	(F32_getSetNextCluster@clusterEntry+2)& (0+255),b
  6268  002194  0E00               	movlw	0
  6269  002196  0100               	movlb	0	; () banked
  6270  002198  6F81               	movwf	(F32_getSetNextCluster@clusterEntry+3)& (0+255),b
  6271  00219A  EC57  F018         	call	_F32_getSetNextCluster	;wreg free
  6272  00219E  C079  F0B8         	movff	?_F32_getSetNextCluster,F32_findFiles@cluster
  6273  0021A2  C07A  F0B9         	movff	?_F32_getSetNextCluster+1,F32_findFiles@cluster+1
  6274  0021A6  C07B  F0BA         	movff	?_F32_getSetNextCluster+2,F32_findFiles@cluster+2
  6275  0021AA  C07C  F0BB         	movff	?_F32_getSetNextCluster+3,F32_findFiles@cluster+3
  6276                           
  6277                           ;rosso_f32.h: 424: if (cluster > 0x0ffffff6)
  6278  0021AE  0EF7               	movlw	247
  6279  0021B0  0100               	movlb	0	; () banked
  6280  0021B2  5DB8               	subwf	F32_findFiles@cluster& (0+255),w,b
  6281  0021B4  0EFF               	movlw	255
  6282  0021B6  0100               	movlb	0	; () banked
  6283  0021B8  59B9               	subwfb	(F32_findFiles@cluster+1)& (0+255),w,b
  6284  0021BA  0EFF               	movlw	255
  6285  0021BC  0100               	movlb	0	; () banked
  6286  0021BE  59BA               	subwfb	(F32_findFiles@cluster+2)& (0+255),w,b
  6287  0021C0  0E0F               	movlw	15
  6288  0021C2  0100               	movlb	0	; () banked
  6289  0021C4  59BB               	subwfb	(F32_findFiles@cluster+3)& (0+255),w,b
  6290  0021C6  A0D8               	btfss	status,0,c
  6291  0021C8  D007               	goto	l3964
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;rosso_f32.h: 425: return 0;
  6295  0021CA  0E00               	movlw	0
  6296  0021CC  0100               	movlb	0	; () banked
  6297  0021CE  6F9C               	movwf	(?_F32_findFiles+1)& (0+255),b
  6298  0021D0  0E00               	movlw	0
  6299  0021D2  0100               	movlb	0	; () banked
  6300  0021D4  6F9B               	movwf	?_F32_findFiles& (0+255),b
  6301  0021D6  0012               	return	
  6302  0021D8                     l3964:
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;rosso_f32.h: 426: if (cluster == 0) {
  6306  0021D8  0100               	movlb	0	; () banked
  6307  0021DA  51BB               	movf	(F32_findFiles@cluster+3)& (0+255),w,b
  6308  0021DC  11B8               	iorwf	F32_findFiles@cluster& (0+255),w,b
  6309  0021DE  11B9               	iorwf	(F32_findFiles@cluster+1)& (0+255),w,b
  6310  0021E0  11BA               	iorwf	(F32_findFiles@cluster+2)& (0+255),w,b
  6311  0021E2  A4D8               	btfss	status,2,c
  6312  0021E4  D517               	goto	l3860
  6313                           
  6314                           ; BSR set to: 0
  6315                           ;rosso_f32.h: 430: return 0;
  6316  0021E6  0E00               	movlw	0
  6317  0021E8  0100               	movlb	0	; () banked
  6318  0021EA  6F9C               	movwf	(?_F32_findFiles+1)& (0+255),b
  6319  0021EC  0E00               	movlw	0
  6320  0021EE  0100               	movlb	0	; () banked
  6321  0021F0  6F9B               	movwf	?_F32_findFiles& (0+255),b
  6322  0021F2  0012               	return	
  6323  0021F4                     __end_of_F32_findFiles:
  6324                           	opt stack 0
  6325                           tblptru	equ	0xFF8
  6326                           tblptrh	equ	0xFF7
  6327                           tblptrl	equ	0xFF6
  6328                           tablat	equ	0xFF5
  6329                           prodh	equ	0xFF4
  6330                           prodl	equ	0xFF3
  6331                           postinc0	equ	0xFEE
  6332                           wreg	equ	0xFE8
  6333                           indf1	equ	0xFE7
  6334                           postdec1	equ	0xFE5
  6335                           fsr1h	equ	0xFE2
  6336                           fsr1l	equ	0xFE1
  6337                           indf2	equ	0xFDF
  6338                           postinc2	equ	0xFDE
  6339                           postdec2	equ	0xFDD
  6340                           fsr2h	equ	0xFDA
  6341                           fsr2l	equ	0xFD9
  6342                           status	equ	0xFD8
  6343                           
  6344 ;; *************** function _F32_getSetNextCluster *****************
  6345 ;; Defined at:
  6346 ;;		line 232 in file "../my_lib.X/rosso_f32.h"
  6347 ;; Parameters:    Size  Location     Type
  6348 ;;  clusterNumbe    4   25[BANK0 ] unsigned long 
  6349 ;;  get_set         1   29[BANK0 ] unsigned char 
  6350 ;;  clusterEntry    4   30[BANK0 ] unsigned long 
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;  FATEntrySect    4   49[BANK0 ] unsigned long 
  6353 ;;  FATEntryValu    2   53[BANK0 ] PTR unsigned long 
  6354 ;;		 -> SD_buffer(512), 
  6355 ;;  FATEntryOffs    2   46[BANK0 ] unsigned short 
  6356 ;;  retry           1   48[BANK0 ] unsigned char 
  6357 ;; Return value:  Size  Location     Type
  6358 ;;                  4   25[BANK0 ] unsigned long 
  6359 ;; Registers used:
  6360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6366 ;;      Params:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;Total ram usage:       30 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    5
  6373 ;; This function calls:
  6374 ;;		_SD_readSingleBlock
  6375 ;;		_SD_writeSingleBlock
  6376 ;;		___lldiv
  6377 ;;		___llmod
  6378 ;; This function is called by:
  6379 ;;		_F32_findFiles
  6380 ;;		_F32_readFile
  6381 ;;		_F32_writeFile
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           	psect	text14
  6386  0030AE                     __ptext14:
  6387                           	opt stack 0
  6388  0030AE                     _F32_getSetNextCluster:
  6389                           	opt stack 23
  6390                           
  6391                           ;rosso_f32.h: 234: UINT16 FATEntryOffset;
  6392                           ;rosso_f32.h: 235: UINT32 *FATEntryValue;
  6393                           ;rosso_f32.h: 236: UINT32 FATEntrySector;
  6394                           ;rosso_f32.h: 237: UINT8 retry = 0;
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;incstack = 0
  6398  0030AE  0E00               	movlw	0
  6399  0030B0  0100               	movlb	0	; () banked
  6400  0030B2  6F90               	movwf	F32_getSetNextCluster@retry& (0+255),b
  6401                           
  6402                           ; BSR set to: 0
  6403                           ;rosso_f32.h: 240: FATEntrySector = unusedSectors + reservedSectorCount
  6404                           ;rosso_f32.h: 241: + ((clusterNumber * 4) / bytesPerSector);
  6405  0030B4  0100               	movlb	0	; () banked
  6406  0030B6  C079  F082         	movff	F32_getSetNextCluster@clusterNumber,??_F32_getSetNextCluster
  6407  0030BA  0100               	movlb	0	; () banked
  6408  0030BC  C07A  F083         	movff	F32_getSetNextCluster@clusterNumber+1,??_F32_getSetNextCluster+1
  6409  0030C0  0100               	movlb	0	; () banked
  6410  0030C2  C07B  F084         	movff	F32_getSetNextCluster@clusterNumber+2,??_F32_getSetNextCluster+2
  6411  0030C6  0100               	movlb	0	; () banked
  6412  0030C8  C07C  F085         	movff	F32_getSetNextCluster@clusterNumber+3,??_F32_getSetNextCluster+3
  6413  0030CC  0E02               	movlw	2
  6414  0030CE                     u3925:
  6415  0030CE  90D8               	bcf	status,0,c
  6416  0030D0  0100               	movlb	0	; () banked
  6417  0030D2  3782               	rlcf	??_F32_getSetNextCluster& (0+255),f,b
  6418  0030D4  3783               	rlcf	(??_F32_getSetNextCluster+1)& (0+255),f,b
  6419  0030D6  3784               	rlcf	(??_F32_getSetNextCluster+2)& (0+255),f,b
  6420  0030D8  3785               	rlcf	(??_F32_getSetNextCluster+3)& (0+255),f,b
  6421  0030DA  2EE8               	decfsz	wreg,f,c
  6422  0030DC  D7F8               	goto	u3925
  6423  0030DE  C082  F06C         	movff	??_F32_getSetNextCluster,___lldiv@dividend
  6424  0030E2  C083  F06D         	movff	??_F32_getSetNextCluster+1,___lldiv@dividend+1
  6425  0030E6  C084  F06E         	movff	??_F32_getSetNextCluster+2,___lldiv@dividend+2
  6426  0030EA  C085  F06F         	movff	??_F32_getSetNextCluster+3,___lldiv@dividend+3
  6427  0030EE  0100               	movlb	0	; () banked
  6428  0030F0  C0EE  F070         	movff	_bytesPerSector,___lldiv@divisor	;volatile
  6429  0030F4  0100               	movlb	0	; () banked
  6430  0030F6  C0EF  F071         	movff	_bytesPerSector+1,___lldiv@divisor+1	;volatile
  6431  0030FA  0100               	movlb	0	; () banked
  6432  0030FC  6B72               	clrf	(___lldiv@divisor+2)& (0+255),b
  6433  0030FE  0100               	movlb	0	; () banked
  6434  003100  6B73               	clrf	(___lldiv@divisor+3)& (0+255),b
  6435  003102  ECC2  F01C         	call	___lldiv	;wreg free
  6436  003106  C06C  F086         	movff	?___lldiv,??_F32_getSetNextCluster+4
  6437  00310A  C06D  F087         	movff	?___lldiv+1,??_F32_getSetNextCluster+5
  6438  00310E  C06E  F088         	movff	?___lldiv+2,??_F32_getSetNextCluster+6
  6439  003112  C06F  F089         	movff	?___lldiv+3,??_F32_getSetNextCluster+7
  6440  003116  5039               	movf	_reservedSectorCount,w,c	;volatile
  6441  003118  0100               	movlb	0	; () banked
  6442  00311A  2586               	addwf	(??_F32_getSetNextCluster+4)& (0+255),w,b
  6443  00311C  0100               	movlb	0	; () banked
  6444  00311E  6F8A               	movwf	(??_F32_getSetNextCluster+8)& (0+255),b
  6445  003120  503A               	movf	_reservedSectorCount+1,w,c	;volatile
  6446  003122  0100               	movlb	0	; () banked
  6447  003124  2187               	addwfc	(??_F32_getSetNextCluster+5)& (0+255),w,b
  6448  003126  0100               	movlb	0	; () banked
  6449  003128  6F8B               	movwf	(??_F32_getSetNextCluster+9)& (0+255),b
  6450  00312A  0E00               	movlw	0
  6451  00312C  0100               	movlb	0	; () banked
  6452  00312E  2188               	addwfc	(??_F32_getSetNextCluster+6)& (0+255),w,b
  6453  003130  0100               	movlb	0	; () banked
  6454  003132  6F8C               	movwf	(??_F32_getSetNextCluster+10)& (0+255),b
  6455  003134  0E00               	movlw	0
  6456  003136  0100               	movlb	0	; () banked
  6457  003138  2189               	addwfc	(??_F32_getSetNextCluster+7)& (0+255),w,b
  6458  00313A  0100               	movlb	0	; () banked
  6459  00313C  6F8D               	movwf	(??_F32_getSetNextCluster+11)& (0+255),b
  6460  00313E  5033               	movf	_unusedSectors,w,c
  6461  003140  0100               	movlb	0	; () banked
  6462  003142  258A               	addwf	(??_F32_getSetNextCluster+8)& (0+255),w,b
  6463  003144  0100               	movlb	0	; () banked
  6464  003146  6F91               	movwf	F32_getSetNextCluster@FATEntrySector& (0+255),b
  6465  003148  5034               	movf	_unusedSectors+1,w,c
  6466  00314A  0100               	movlb	0	; () banked
  6467  00314C  218B               	addwfc	(??_F32_getSetNextCluster+9)& (0+255),w,b
  6468  00314E  0100               	movlb	0	; () banked
  6469  003150  6F92               	movwf	(F32_getSetNextCluster@FATEntrySector+1)& (0+255),b
  6470  003152  5035               	movf	_unusedSectors+2,w,c
  6471  003154  0100               	movlb	0	; () banked
  6472  003156  218C               	addwfc	(??_F32_getSetNextCluster+10)& (0+255),w,b
  6473  003158  0100               	movlb	0	; () banked
  6474  00315A  6F93               	movwf	(F32_getSetNextCluster@FATEntrySector+2)& (0+255),b
  6475  00315C  5036               	movf	_unusedSectors+3,w,c
  6476  00315E  0100               	movlb	0	; () banked
  6477  003160  218D               	addwfc	(??_F32_getSetNextCluster+11)& (0+255),w,b
  6478  003162  0100               	movlb	0	; () banked
  6479  003164  6F94               	movwf	(F32_getSetNextCluster@FATEntrySector+3)& (0+255),b
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;rosso_f32.h: 244: FATEntryOffset = (UINT16) ((clusterNumber * 4) % bytesPerSector);
  6483  003166  0100               	movlb	0	; () banked
  6484  003168  C079  F082         	movff	F32_getSetNextCluster@clusterNumber,??_F32_getSetNextCluster
  6485  00316C  0100               	movlb	0	; () banked
  6486  00316E  C07A  F083         	movff	F32_getSetNextCluster@clusterNumber+1,??_F32_getSetNextCluster+1
  6487  003172  0100               	movlb	0	; () banked
  6488  003174  C07B  F084         	movff	F32_getSetNextCluster@clusterNumber+2,??_F32_getSetNextCluster+2
  6489  003178  0100               	movlb	0	; () banked
  6490  00317A  C07C  F085         	movff	F32_getSetNextCluster@clusterNumber+3,??_F32_getSetNextCluster+3
  6491  00317E  0E02               	movlw	2
  6492  003180                     u3935:
  6493  003180  90D8               	bcf	status,0,c
  6494  003182  0100               	movlb	0	; () banked
  6495  003184  3782               	rlcf	??_F32_getSetNextCluster& (0+255),f,b
  6496  003186  3783               	rlcf	(??_F32_getSetNextCluster+1)& (0+255),f,b
  6497  003188  3784               	rlcf	(??_F32_getSetNextCluster+2)& (0+255),f,b
  6498  00318A  3785               	rlcf	(??_F32_getSetNextCluster+3)& (0+255),f,b
  6499  00318C  2EE8               	decfsz	wreg,f,c
  6500  00318E  D7F8               	goto	u3935
  6501  003190  C082  F060         	movff	??_F32_getSetNextCluster,___llmod@dividend
  6502  003194  C083  F061         	movff	??_F32_getSetNextCluster+1,___llmod@dividend+1
  6503  003198  C084  F062         	movff	??_F32_getSetNextCluster+2,___llmod@dividend+2
  6504  00319C  C085  F063         	movff	??_F32_getSetNextCluster+3,___llmod@dividend+3
  6505  0031A0  0100               	movlb	0	; () banked
  6506  0031A2  C0EE  F064         	movff	_bytesPerSector,___llmod@divisor	;volatile
  6507  0031A6  0100               	movlb	0	; () banked
  6508  0031A8  C0EF  F065         	movff	_bytesPerSector+1,___llmod@divisor+1	;volatile
  6509  0031AC  0100               	movlb	0	; () banked
  6510  0031AE  6B66               	clrf	(___llmod@divisor+2)& (0+255),b
  6511  0031B0  0100               	movlb	0	; () banked
  6512  0031B2  6B67               	clrf	(___llmod@divisor+3)& (0+255),b
  6513  0031B4  EC84  F01D         	call	___llmod	;wreg free
  6514  0031B8  C060  F086         	movff	?___llmod,??_F32_getSetNextCluster+4
  6515  0031BC  C061  F087         	movff	?___llmod+1,??_F32_getSetNextCluster+5
  6516  0031C0  C062  F088         	movff	?___llmod+2,??_F32_getSetNextCluster+6
  6517  0031C4  C063  F089         	movff	?___llmod+3,??_F32_getSetNextCluster+7
  6518  0031C8  C086  F08E         	movff	??_F32_getSetNextCluster+4,F32_getSetNextCluster@FATEntryOffset
  6519  0031CC  C087  F08F         	movff	??_F32_getSetNextCluster+5,F32_getSetNextCluster@FATEntryOffset+1
  6520                           
  6521                           ;rosso_f32.h: 247: while (retry < 10) {
  6522  0031D0  D00F               	goto	l3786
  6523  0031D2                     l3780:
  6524                           
  6525                           ;rosso_f32.h: 248: if (!SD_readSingleBlock(FATEntrySector))
  6526  0031D2  C091  F06C         	movff	F32_getSetNextCluster@FATEntrySector,SD_readSingleBlock@SD_startBlock
  6527  0031D6  C092  F06D         	movff	F32_getSetNextCluster@FATEntrySector+1,SD_readSingleBlock@SD_startBlock+1
  6528  0031DA  C093  F06E         	movff	F32_getSetNextCluster@FATEntrySector+2,SD_readSingleBlock@SD_startBlock+2
  6529  0031DE  C094  F06F         	movff	F32_getSetNextCluster@FATEntrySector+3,SD_readSingleBlock@SD_startBlock+3
  6530  0031E2  EC2C  F01D         	call	_SD_readSingleBlock	;wreg free
  6531  0031E6  0900               	iorlw	0
  6532  0031E8  B4D8               	btfsc	status,2,c
  6533  0031EA  D006               	goto	l3788
  6534                           
  6535                           ;rosso_f32.h: 250: retry++;
  6536                           
  6537                           ;rosso_f32.h: 249: break;
  6538  0031EC  0100               	movlb	0	; () banked
  6539  0031EE  2B90               	incf	F32_getSetNextCluster@retry& (0+255),f,b
  6540  0031F0                     l3786:
  6541  0031F0  0E09               	movlw	9
  6542  0031F2  0100               	movlb	0	; () banked
  6543  0031F4  6590               	cpfsgt	F32_getSetNextCluster@retry& (0+255),b
  6544  0031F6  D7ED               	goto	l3780
  6545  0031F8                     l3788:
  6546                           
  6547                           ;rosso_f32.h: 251: }
  6548                           ;rosso_f32.h: 254: FATEntryValue = (UINT32 *) & SD_buffer[FATEntryOffset];
  6549  0031F8  0EEE               	movlw	low _SD_buffer
  6550  0031FA  0100               	movlb	0	; () banked
  6551  0031FC  6F82               	movwf	??_F32_getSetNextCluster& (0+255),b
  6552  0031FE  0E01               	movlw	high _SD_buffer
  6553  003200  6F83               	movwf	(??_F32_getSetNextCluster+1)& (0+255),b
  6554  003202  0100               	movlb	0	; () banked
  6555  003204  518E               	movf	F32_getSetNextCluster@FATEntryOffset& (0+255),w,b
  6556  003206  0100               	movlb	0	; () banked
  6557  003208  2782               	addwf	??_F32_getSetNextCluster& (0+255),f,b
  6558  00320A  0100               	movlb	0	; () banked
  6559  00320C  518F               	movf	(F32_getSetNextCluster@FATEntryOffset+1)& (0+255),w,b
  6560  00320E  0100               	movlb	0	; () banked
  6561  003210  2383               	addwfc	(??_F32_getSetNextCluster+1)& (0+255),f,b
  6562  003212  C082  F095         	movff	??_F32_getSetNextCluster,F32_getSetNextCluster@FATEntryValue
  6563  003216  C083  F096         	movff	??_F32_getSetNextCluster+1,F32_getSetNextCluster@FATEntryValue+1
  6564                           
  6565                           ; BSR set to: 0
  6566                           ;rosso_f32.h: 256: if (get_set == 0)
  6567  00321A  0100               	movlb	0	; () banked
  6568  00321C  677D               	tstfsz	F32_getSetNextCluster@get_set& (0+255),b
  6569  00321E  D015               	goto	l3796
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;rosso_f32.h: 257: return ((*FATEntryValue) & 0x0fffffff);
  6573  003220  C095  FFD9         	movff	F32_getSetNextCluster@FATEntryValue,fsr2l
  6574  003224  C096  FFDA         	movff	F32_getSetNextCluster@FATEntryValue+1,fsr2h
  6575  003228  0EFF               	movlw	255
  6576  00322A  14DE               	andwf	postinc2,w,c
  6577  00322C  0100               	movlb	0	; () banked
  6578  00322E  6F79               	movwf	?_F32_getSetNextCluster& (0+255),b
  6579  003230  0EFF               	movlw	255
  6580  003232  14DE               	andwf	postinc2,w,c
  6581  003234  0100               	movlb	0	; () banked
  6582  003236  6F7A               	movwf	(?_F32_getSetNextCluster+1)& (0+255),b
  6583  003238  0EFF               	movlw	255
  6584  00323A  14DE               	andwf	postinc2,w,c
  6585  00323C  0100               	movlb	0	; () banked
  6586  00323E  6F7B               	movwf	(?_F32_getSetNextCluster+2)& (0+255),b
  6587  003240  0E0F               	movlw	15
  6588  003242  14DE               	andwf	postinc2,w,c
  6589  003244  0100               	movlb	0	; () banked
  6590  003246  6F7C               	movwf	(?_F32_getSetNextCluster+3)& (0+255),b
  6591  003248  0012               	return	
  6592  00324A                     l3796:
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;rosso_f32.h: 259: *FATEntryValue = clusterEntry;
  6596  00324A  C095  FFD9         	movff	F32_getSetNextCluster@FATEntryValue,fsr2l
  6597  00324E  C096  FFDA         	movff	F32_getSetNextCluster@FATEntryValue+1,fsr2h
  6598  003252  0100               	movlb	0	; () banked
  6599  003254  C07E  FFDE         	movff	F32_getSetNextCluster@clusterEntry,postinc2
  6600  003258  0100               	movlb	0	; () banked
  6601  00325A  C07F  FFDE         	movff	F32_getSetNextCluster@clusterEntry+1,postinc2
  6602  00325E  0100               	movlb	0	; () banked
  6603  003260  C080  FFDE         	movff	F32_getSetNextCluster@clusterEntry+2,postinc2
  6604  003264  0100               	movlb	0	; () banked
  6605  003266  C081  FFDE         	movff	F32_getSetNextCluster@clusterEntry+3,postinc2
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;rosso_f32.h: 261: SD_writeSingleBlock(FATEntrySector);
  6609  00326A  C091  F06C         	movff	F32_getSetNextCluster@FATEntrySector,SD_writeSingleBlock@SD_startBlock
  6610  00326E  C092  F06D         	movff	F32_getSetNextCluster@FATEntrySector+1,SD_writeSingleBlock@SD_startBlock+1
  6611  003272  C093  F06E         	movff	F32_getSetNextCluster@FATEntrySector+2,SD_writeSingleBlock@SD_startBlock+2
  6612  003276  C094  F06F         	movff	F32_getSetNextCluster@FATEntrySector+3,SD_writeSingleBlock@SD_startBlock+3
  6613  00327A  EC48  F01C         	call	_SD_writeSingleBlock	;wreg free
  6614                           
  6615                           ;rosso_f32.h: 263: return (0);
  6616  00327E  0E00               	movlw	0
  6617  003280  0100               	movlb	0	; () banked
  6618  003282  6F79               	movwf	?_F32_getSetNextCluster& (0+255),b
  6619  003284  0E00               	movlw	0
  6620  003286  0100               	movlb	0	; () banked
  6621  003288  6F7A               	movwf	(?_F32_getSetNextCluster+1)& (0+255),b
  6622  00328A  0E00               	movlw	0
  6623  00328C  0100               	movlb	0	; () banked
  6624  00328E  6F7B               	movwf	(?_F32_getSetNextCluster+2)& (0+255),b
  6625  003290  0E00               	movlw	0
  6626  003292  0100               	movlb	0	; () banked
  6627  003294  6F7C               	movwf	(?_F32_getSetNextCluster+3)& (0+255),b
  6628  003296  0012               	return	
  6629  003298                     __end_of_F32_getSetNextCluster:
  6630                           	opt stack 0
  6631                           tblptru	equ	0xFF8
  6632                           tblptrh	equ	0xFF7
  6633                           tblptrl	equ	0xFF6
  6634                           tablat	equ	0xFF5
  6635                           prodh	equ	0xFF4
  6636                           prodl	equ	0xFF3
  6637                           postinc0	equ	0xFEE
  6638                           wreg	equ	0xFE8
  6639                           indf1	equ	0xFE7
  6640                           postdec1	equ	0xFE5
  6641                           fsr1h	equ	0xFE2
  6642                           fsr1l	equ	0xFE1
  6643                           indf2	equ	0xFDF
  6644                           postinc2	equ	0xFDE
  6645                           postdec2	equ	0xFDD
  6646                           fsr2h	equ	0xFDA
  6647                           fsr2l	equ	0xFD9
  6648                           status	equ	0xFD8
  6649                           
  6650 ;; *************** function _F32_getFirstSector *****************
  6651 ;; Defined at:
  6652 ;;		line 144 in file "../my_lib.X/rosso_f32.h"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;  clusterNumbe    4   12[BANK0 ] unsigned long 
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;		None
  6657 ;; Return value:  Size  Location     Type
  6658 ;;                  4   12[BANK0 ] unsigned long 
  6659 ;; Registers used:
  6660 ;;		wreg, status,2, status,0, cstack
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6666 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6668 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6669 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6670 ;;Total ram usage:        8 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    3
  6673 ;; This function calls:
  6674 ;;		___lmul
  6675 ;; This function is called by:
  6676 ;;		_F32_findFiles
  6677 ;;		_F32_readFile
  6678 ;;		_F32_writeFile
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           	psect	text15
  6683  003C2C                     __ptext15:
  6684                           	opt stack 0
  6685  003C2C                     _F32_getFirstSector:
  6686                           	opt stack 25
  6687                           
  6688                           ;rosso_f32.h: 145: return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;incstack = 0
  6692  003C2C  0EFE               	movlw	254
  6693  003C2E  0100               	movlb	0	; () banked
  6694  003C30  256C               	addwf	F32_getFirstSector@clusterNumber& (0+255),w,b
  6695  003C32  0100               	movlb	0	; () banked
  6696  003C34  6F60               	movwf	___lmul@multiplier& (0+255),b
  6697  003C36  0EFF               	movlw	255
  6698  003C38  0100               	movlb	0	; () banked
  6699  003C3A  216D               	addwfc	(F32_getFirstSector@clusterNumber+1)& (0+255),w,b
  6700  003C3C  0100               	movlb	0	; () banked
  6701  003C3E  6F61               	movwf	(___lmul@multiplier+1)& (0+255),b
  6702  003C40  0EFF               	movlw	255
  6703  003C42  0100               	movlb	0	; () banked
  6704  003C44  216E               	addwfc	(F32_getFirstSector@clusterNumber+2)& (0+255),w,b
  6705  003C46  0100               	movlb	0	; () banked
  6706  003C48  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  6707  003C4A  0EFF               	movlw	255
  6708  003C4C  0100               	movlb	0	; () banked
  6709  003C4E  216F               	addwfc	(F32_getFirstSector@clusterNumber+3)& (0+255),w,b
  6710  003C50  0100               	movlb	0	; () banked
  6711  003C52  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  6712  003C54  0100               	movlb	0	; () banked
  6713  003C56  C03F  F064         	movff	_sectorPerCluster,___lmul@multiplicand	;volatile
  6714  003C5A  0100               	movlb	0	; () banked
  6715  003C5C  C040  F065         	movff	_sectorPerCluster+1,___lmul@multiplicand+1	;volatile
  6716  003C60  0100               	movlb	0	; () banked
  6717  003C62  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  6718  003C64  0100               	movlb	0	; () banked
  6719  003C66  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  6720  003C68  ECD3  F01D         	call	___lmul	;wreg free
  6721  003C6C  C060  F070         	movff	?___lmul,??_F32_getFirstSector
  6722  003C70  C061  F071         	movff	?___lmul+1,??_F32_getFirstSector+1
  6723  003C74  C062  F072         	movff	?___lmul+2,??_F32_getFirstSector+2
  6724  003C78  C063  F073         	movff	?___lmul+3,??_F32_getFirstSector+3
  6725  003C7C  0101               	movlb	1	; () banked
  6726  003C7E  5110               	movf	_firstDataSector& (0+255),w,b	;volatile
  6727  003C80  0100               	movlb	0	; () banked
  6728  003C82  2570               	addwf	??_F32_getFirstSector& (0+255),w,b
  6729  003C84  0100               	movlb	0	; () banked
  6730  003C86  6F6C               	movwf	?_F32_getFirstSector& (0+255),b
  6731  003C88  0101               	movlb	1	; () banked
  6732  003C8A  5111               	movf	(_firstDataSector+1)& (0+255),w,b	;volatile
  6733  003C8C  0100               	movlb	0	; () banked
  6734  003C8E  2171               	addwfc	(??_F32_getFirstSector+1)& (0+255),w,b
  6735  003C90  0100               	movlb	0	; () banked
  6736  003C92  6F6D               	movwf	(?_F32_getFirstSector+1)& (0+255),b
  6737  003C94  0101               	movlb	1	; () banked
  6738  003C96  5112               	movf	(_firstDataSector+2)& (0+255),w,b	;volatile
  6739  003C98  0100               	movlb	0	; () banked
  6740  003C9A  2172               	addwfc	(??_F32_getFirstSector+2)& (0+255),w,b
  6741  003C9C  0100               	movlb	0	; () banked
  6742  003C9E  6F6E               	movwf	(?_F32_getFirstSector+2)& (0+255),b
  6743  003CA0  0101               	movlb	1	; () banked
  6744  003CA2  5113               	movf	(_firstDataSector+3)& (0+255),w,b	;volatile
  6745  003CA4  0100               	movlb	0	; () banked
  6746  003CA6  2173               	addwfc	(??_F32_getFirstSector+3)& (0+255),w,b
  6747  003CA8  0100               	movlb	0	; () banked
  6748  003CAA  6F6F               	movwf	(?_F32_getFirstSector+3)& (0+255),b
  6749  003CAC  0012               	return	
  6750  003CAE                     __end_of_F32_getFirstSector:
  6751                           	opt stack 0
  6752                           tblptru	equ	0xFF8
  6753                           tblptrh	equ	0xFF7
  6754                           tblptrl	equ	0xFF6
  6755                           tablat	equ	0xFF5
  6756                           prodh	equ	0xFF4
  6757                           prodl	equ	0xFF3
  6758                           postinc0	equ	0xFEE
  6759                           wreg	equ	0xFE8
  6760                           indf1	equ	0xFE7
  6761                           postdec1	equ	0xFE5
  6762                           fsr1h	equ	0xFE2
  6763                           fsr1l	equ	0xFE1
  6764                           indf2	equ	0xFDF
  6765                           postinc2	equ	0xFDE
  6766                           postdec2	equ	0xFDD
  6767                           fsr2h	equ	0xFDA
  6768                           fsr2l	equ	0xFD9
  6769                           status	equ	0xFD8
  6770                           
  6771 ;; *************** function _F32_freeMemoryUpdate *****************
  6772 ;; Defined at:
  6773 ;;		line 287 in file "../my_lib.X/rosso_f32.h"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;  flag            1    wreg     unsigned char 
  6776 ;;  size            4   33[BANK0 ] unsigned long 
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;  flag            1   41[BANK0 ] unsigned char 
  6779 ;;  freeClusters    4   42[BANK0 ] unsigned long 
  6780 ;; Return value:  Size  Location     Type
  6781 ;;		None               void
  6782 ;; Registers used:
  6783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6789 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6792 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6793 ;;Total ram usage:       13 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; Hardware stack levels required when called:    6
  6796 ;; This function calls:
  6797 ;;		_F32_getSetFreeCluster
  6798 ;; This function is called by:
  6799 ;;		_F32_findFiles
  6800 ;;		_F32_writeFile
  6801 ;; This function uses a non-reentrant model
  6802 ;;
  6803                           
  6804                           	psect	text16
  6805  0029DC                     __ptext16:
  6806                           	opt stack 0
  6807  0029DC                     _F32_freeMemoryUpdate:
  6808                           	opt stack 21
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;incstack = 0
  6812                           ;F32_freeMemoryUpdate@flag stored from wreg
  6813  0029DC  0100               	movlb	0	; () banked
  6814  0029DE  6F89               	movwf	F32_freeMemoryUpdate@flag& (0+255),b
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;rosso_f32.h: 288: UINT32 freeClusters;
  6818                           ;rosso_f32.h: 290: if ((size % 512) == 0)
  6819  0029E0  0EFF               	movlw	255
  6820  0029E2  0100               	movlb	0	; () banked
  6821  0029E4  1581               	andwf	F32_freeMemoryUpdate@size& (0+255),w,b
  6822  0029E6  0100               	movlb	0	; () banked
  6823  0029E8  6F85               	movwf	??_F32_freeMemoryUpdate& (0+255),b
  6824  0029EA  0E01               	movlw	1
  6825  0029EC  0100               	movlb	0	; () banked
  6826  0029EE  1582               	andwf	(F32_freeMemoryUpdate@size+1)& (0+255),w,b
  6827  0029F0  0100               	movlb	0	; () banked
  6828  0029F2  6F86               	movwf	(??_F32_freeMemoryUpdate+1)& (0+255),b
  6829  0029F4  0E00               	movlw	0
  6830  0029F6  0100               	movlb	0	; () banked
  6831  0029F8  1583               	andwf	(F32_freeMemoryUpdate@size+2)& (0+255),w,b
  6832  0029FA  0100               	movlb	0	; () banked
  6833  0029FC  6F87               	movwf	(??_F32_freeMemoryUpdate+2)& (0+255),b
  6834  0029FE  0E00               	movlw	0
  6835  002A00  0100               	movlb	0	; () banked
  6836  002A02  1584               	andwf	(F32_freeMemoryUpdate@size+3)& (0+255),w,b
  6837  002A04  0100               	movlb	0	; () banked
  6838  002A06  6F88               	movwf	(??_F32_freeMemoryUpdate+3)& (0+255),b
  6839  002A08  0100               	movlb	0	; () banked
  6840  002A0A  5188               	movf	(??_F32_freeMemoryUpdate+3)& (0+255),w,b
  6841  002A0C  1185               	iorwf	??_F32_freeMemoryUpdate& (0+255),w,b
  6842  002A0E  1186               	iorwf	(??_F32_freeMemoryUpdate+1)& (0+255),w,b
  6843  002A10  1187               	iorwf	(??_F32_freeMemoryUpdate+2)& (0+255),w,b
  6844  002A12  A4D8               	btfss	status,2,c
  6845  002A14  D01F               	goto	l3840
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;rosso_f32.h: 291: size = size / 512;
  6849  002A16  0100               	movlb	0	; () banked
  6850  002A18  C081  F085         	movff	F32_freeMemoryUpdate@size,??_F32_freeMemoryUpdate
  6851  002A1C  0100               	movlb	0	; () banked
  6852  002A1E  C082  F086         	movff	F32_freeMemoryUpdate@size+1,??_F32_freeMemoryUpdate+1
  6853  002A22  0100               	movlb	0	; () banked
  6854  002A24  C083  F087         	movff	F32_freeMemoryUpdate@size+2,??_F32_freeMemoryUpdate+2
  6855  002A28  0100               	movlb	0	; () banked
  6856  002A2A  C084  F088         	movff	F32_freeMemoryUpdate@size+3,??_F32_freeMemoryUpdate+3
  6857  002A2E  0E0A               	movlw	10
  6858  002A30  D006               	goto	u4050
  6859  002A32                     u4055:
  6860  002A32  0100               	movlb	0	; () banked
  6861  002A34  90D8               	bcf	status,0,c
  6862  002A36  3388               	rrcf	(??_F32_freeMemoryUpdate+3)& (0+255),f,b
  6863  002A38  3387               	rrcf	(??_F32_freeMemoryUpdate+2)& (0+255),f,b
  6864  002A3A  3386               	rrcf	(??_F32_freeMemoryUpdate+1)& (0+255),f,b
  6865  002A3C  3385               	rrcf	??_F32_freeMemoryUpdate& (0+255),f,b
  6866  002A3E                     u4050:
  6867  002A3E  2EE8               	decfsz	wreg,f,c
  6868  002A40  D7F8               	goto	u4055
  6869  002A42  C085  F081         	movff	??_F32_freeMemoryUpdate,F32_freeMemoryUpdate@size
  6870  002A46  C086  F082         	movff	??_F32_freeMemoryUpdate+1,F32_freeMemoryUpdate@size+1
  6871  002A4A  C087  F083         	movff	??_F32_freeMemoryUpdate+2,F32_freeMemoryUpdate@size+2
  6872  002A4E  C088  F084         	movff	??_F32_freeMemoryUpdate+3,F32_freeMemoryUpdate@size+3
  6873  002A52  D02A               	goto	l299
  6874  002A54                     l3840:
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;rosso_f32.h: 292: else
  6878                           ;rosso_f32.h: 293: size = (size / 512) + 1;
  6879  002A54  0100               	movlb	0	; () banked
  6880  002A56  C081  F085         	movff	F32_freeMemoryUpdate@size,??_F32_freeMemoryUpdate
  6881  002A5A  0100               	movlb	0	; () banked
  6882  002A5C  C082  F086         	movff	F32_freeMemoryUpdate@size+1,??_F32_freeMemoryUpdate+1
  6883  002A60  0100               	movlb	0	; () banked
  6884  002A62  C083  F087         	movff	F32_freeMemoryUpdate@size+2,??_F32_freeMemoryUpdate+2
  6885  002A66  0100               	movlb	0	; () banked
  6886  002A68  C084  F088         	movff	F32_freeMemoryUpdate@size+3,??_F32_freeMemoryUpdate+3
  6887  002A6C  0E0A               	movlw	10
  6888  002A6E  D006               	goto	u4060
  6889  002A70                     u4065:
  6890  002A70  0100               	movlb	0	; () banked
  6891  002A72  90D8               	bcf	status,0,c
  6892  002A74  3388               	rrcf	(??_F32_freeMemoryUpdate+3)& (0+255),f,b
  6893  002A76  3387               	rrcf	(??_F32_freeMemoryUpdate+2)& (0+255),f,b
  6894  002A78  3386               	rrcf	(??_F32_freeMemoryUpdate+1)& (0+255),f,b
  6895  002A7A  3385               	rrcf	??_F32_freeMemoryUpdate& (0+255),f,b
  6896  002A7C                     u4060:
  6897  002A7C  2EE8               	decfsz	wreg,f,c
  6898  002A7E  D7F8               	goto	u4065
  6899  002A80  0E01               	movlw	1
  6900  002A82  0100               	movlb	0	; () banked
  6901  002A84  2585               	addwf	??_F32_freeMemoryUpdate& (0+255),w,b
  6902  002A86  0100               	movlb	0	; () banked
  6903  002A88  6F81               	movwf	F32_freeMemoryUpdate@size& (0+255),b
  6904  002A8A  0E00               	movlw	0
  6905  002A8C  0100               	movlb	0	; () banked
  6906  002A8E  2186               	addwfc	(??_F32_freeMemoryUpdate+1)& (0+255),w,b
  6907  002A90  0100               	movlb	0	; () banked
  6908  002A92  6F82               	movwf	(F32_freeMemoryUpdate@size+1)& (0+255),b
  6909  002A94  0E00               	movlw	0
  6910  002A96  0100               	movlb	0	; () banked
  6911  002A98  2187               	addwfc	(??_F32_freeMemoryUpdate+2)& (0+255),w,b
  6912  002A9A  0100               	movlb	0	; () banked
  6913  002A9C  6F83               	movwf	(F32_freeMemoryUpdate@size+2)& (0+255),b
  6914  002A9E  0E00               	movlw	0
  6915  002AA0  0100               	movlb	0	; () banked
  6916  002AA2  2188               	addwfc	(??_F32_freeMemoryUpdate+3)& (0+255),w,b
  6917  002AA4  0100               	movlb	0	; () banked
  6918  002AA6  6F84               	movwf	(F32_freeMemoryUpdate@size+3)& (0+255),b
  6919  002AA8                     l299:
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;rosso_f32.h: 294: if ((size % 8) == 0)
  6923  002AA8  0E07               	movlw	7
  6924  002AAA  0100               	movlb	0	; () banked
  6925  002AAC  1581               	andwf	F32_freeMemoryUpdate@size& (0+255),w,b
  6926  002AAE  0100               	movlb	0	; () banked
  6927  002AB0  6F85               	movwf	??_F32_freeMemoryUpdate& (0+255),b
  6928  002AB2  0E00               	movlw	0
  6929  002AB4  0100               	movlb	0	; () banked
  6930  002AB6  1582               	andwf	(F32_freeMemoryUpdate@size+1)& (0+255),w,b
  6931  002AB8  0100               	movlb	0	; () banked
  6932  002ABA  6F86               	movwf	(??_F32_freeMemoryUpdate+1)& (0+255),b
  6933  002ABC  0E00               	movlw	0
  6934  002ABE  0100               	movlb	0	; () banked
  6935  002AC0  1583               	andwf	(F32_freeMemoryUpdate@size+2)& (0+255),w,b
  6936  002AC2  0100               	movlb	0	; () banked
  6937  002AC4  6F87               	movwf	(??_F32_freeMemoryUpdate+2)& (0+255),b
  6938  002AC6  0E00               	movlw	0
  6939  002AC8  0100               	movlb	0	; () banked
  6940  002ACA  1584               	andwf	(F32_freeMemoryUpdate@size+3)& (0+255),w,b
  6941  002ACC  0100               	movlb	0	; () banked
  6942  002ACE  6F88               	movwf	(??_F32_freeMemoryUpdate+3)& (0+255),b
  6943  002AD0  0100               	movlb	0	; () banked
  6944  002AD2  5188               	movf	(??_F32_freeMemoryUpdate+3)& (0+255),w,b
  6945  002AD4  1185               	iorwf	??_F32_freeMemoryUpdate& (0+255),w,b
  6946  002AD6  1186               	iorwf	(??_F32_freeMemoryUpdate+1)& (0+255),w,b
  6947  002AD8  1187               	iorwf	(??_F32_freeMemoryUpdate+2)& (0+255),w,b
  6948  002ADA  A4D8               	btfss	status,2,c
  6949  002ADC  D01F               	goto	l3844
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;rosso_f32.h: 295: size = size / 8;
  6953  002ADE  0100               	movlb	0	; () banked
  6954  002AE0  C081  F085         	movff	F32_freeMemoryUpdate@size,??_F32_freeMemoryUpdate
  6955  002AE4  0100               	movlb	0	; () banked
  6956  002AE6  C082  F086         	movff	F32_freeMemoryUpdate@size+1,??_F32_freeMemoryUpdate+1
  6957  002AEA  0100               	movlb	0	; () banked
  6958  002AEC  C083  F087         	movff	F32_freeMemoryUpdate@size+2,??_F32_freeMemoryUpdate+2
  6959  002AF0  0100               	movlb	0	; () banked
  6960  002AF2  C084  F088         	movff	F32_freeMemoryUpdate@size+3,??_F32_freeMemoryUpdate+3
  6961  002AF6  0E04               	movlw	4
  6962  002AF8  D006               	goto	u4080
  6963  002AFA                     u4085:
  6964  002AFA  0100               	movlb	0	; () banked
  6965  002AFC  90D8               	bcf	status,0,c
  6966  002AFE  3388               	rrcf	(??_F32_freeMemoryUpdate+3)& (0+255),f,b
  6967  002B00  3387               	rrcf	(??_F32_freeMemoryUpdate+2)& (0+255),f,b
  6968  002B02  3386               	rrcf	(??_F32_freeMemoryUpdate+1)& (0+255),f,b
  6969  002B04  3385               	rrcf	??_F32_freeMemoryUpdate& (0+255),f,b
  6970  002B06                     u4080:
  6971  002B06  2EE8               	decfsz	wreg,f,c
  6972  002B08  D7F8               	goto	u4085
  6973  002B0A  C085  F081         	movff	??_F32_freeMemoryUpdate,F32_freeMemoryUpdate@size
  6974  002B0E  C086  F082         	movff	??_F32_freeMemoryUpdate+1,F32_freeMemoryUpdate@size+1
  6975  002B12  C087  F083         	movff	??_F32_freeMemoryUpdate+2,F32_freeMemoryUpdate@size+2
  6976  002B16  C088  F084         	movff	??_F32_freeMemoryUpdate+3,F32_freeMemoryUpdate@size+3
  6977  002B1A  D02A               	goto	l3846
  6978  002B1C                     l3844:
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;rosso_f32.h: 296: else
  6982                           ;rosso_f32.h: 297: size = (size / 8) + 1;
  6983  002B1C  0100               	movlb	0	; () banked
  6984  002B1E  C081  F085         	movff	F32_freeMemoryUpdate@size,??_F32_freeMemoryUpdate
  6985  002B22  0100               	movlb	0	; () banked
  6986  002B24  C082  F086         	movff	F32_freeMemoryUpdate@size+1,??_F32_freeMemoryUpdate+1
  6987  002B28  0100               	movlb	0	; () banked
  6988  002B2A  C083  F087         	movff	F32_freeMemoryUpdate@size+2,??_F32_freeMemoryUpdate+2
  6989  002B2E  0100               	movlb	0	; () banked
  6990  002B30  C084  F088         	movff	F32_freeMemoryUpdate@size+3,??_F32_freeMemoryUpdate+3
  6991  002B34  0E04               	movlw	4
  6992  002B36  D006               	goto	u4090
  6993  002B38                     u4095:
  6994  002B38  0100               	movlb	0	; () banked
  6995  002B3A  90D8               	bcf	status,0,c
  6996  002B3C  3388               	rrcf	(??_F32_freeMemoryUpdate+3)& (0+255),f,b
  6997  002B3E  3387               	rrcf	(??_F32_freeMemoryUpdate+2)& (0+255),f,b
  6998  002B40  3386               	rrcf	(??_F32_freeMemoryUpdate+1)& (0+255),f,b
  6999  002B42  3385               	rrcf	??_F32_freeMemoryUpdate& (0+255),f,b
  7000  002B44                     u4090:
  7001  002B44  2EE8               	decfsz	wreg,f,c
  7002  002B46  D7F8               	goto	u4095
  7003  002B48  0E01               	movlw	1
  7004  002B4A  0100               	movlb	0	; () banked
  7005  002B4C  2585               	addwf	??_F32_freeMemoryUpdate& (0+255),w,b
  7006  002B4E  0100               	movlb	0	; () banked
  7007  002B50  6F81               	movwf	F32_freeMemoryUpdate@size& (0+255),b
  7008  002B52  0E00               	movlw	0
  7009  002B54  0100               	movlb	0	; () banked
  7010  002B56  2186               	addwfc	(??_F32_freeMemoryUpdate+1)& (0+255),w,b
  7011  002B58  0100               	movlb	0	; () banked
  7012  002B5A  6F82               	movwf	(F32_freeMemoryUpdate@size+1)& (0+255),b
  7013  002B5C  0E00               	movlw	0
  7014  002B5E  0100               	movlb	0	; () banked
  7015  002B60  2187               	addwfc	(??_F32_freeMemoryUpdate+2)& (0+255),w,b
  7016  002B62  0100               	movlb	0	; () banked
  7017  002B64  6F83               	movwf	(F32_freeMemoryUpdate@size+2)& (0+255),b
  7018  002B66  0E00               	movlw	0
  7019  002B68  0100               	movlb	0	; () banked
  7020  002B6A  2188               	addwfc	(??_F32_freeMemoryUpdate+3)& (0+255),w,b
  7021  002B6C  0100               	movlb	0	; () banked
  7022  002B6E  6F84               	movwf	(F32_freeMemoryUpdate@size+3)& (0+255),b
  7023  002B70                     l3846:
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;rosso_f32.h: 299: if (freeClusterCountUpdated) {
  7027  002B70  0100               	movlb	0	; () banked
  7028  002B72  51F0               	movf	_freeClusterCountUpdated& (0+255),w,b
  7029  002B74  B4D8               	btfsc	status,2,c
  7030  002B76  0012               	return	
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;rosso_f32.h: 300: freeClusters = F32_getSetFreeCluster(1, 0, 0);
  7034  002B78  0E00               	movlw	0
  7035  002B7A  0100               	movlb	0	; () banked
  7036  002B7C  6F75               	movwf	F32_getSetFreeCluster@get_set& (0+255),b
  7037  002B7E  0E00               	movlw	0
  7038  002B80  0100               	movlb	0	; () banked
  7039  002B82  6F76               	movwf	F32_getSetFreeCluster@FSEntry& (0+255),b
  7040  002B84  0E00               	movlw	0
  7041  002B86  0100               	movlb	0	; () banked
  7042  002B88  6F77               	movwf	(F32_getSetFreeCluster@FSEntry+1)& (0+255),b
  7043  002B8A  0E00               	movlw	0
  7044  002B8C  0100               	movlb	0	; () banked
  7045  002B8E  6F78               	movwf	(F32_getSetFreeCluster@FSEntry+2)& (0+255),b
  7046  002B90  0E00               	movlw	0
  7047  002B92  0100               	movlb	0	; () banked
  7048  002B94  6F79               	movwf	(F32_getSetFreeCluster@FSEntry+3)& (0+255),b
  7049  002B96  0E01               	movlw	1
  7050  002B98  EC4C  F019         	call	_F32_getSetFreeCluster
  7051  002B9C  C075  F08A         	movff	?_F32_getSetFreeCluster,F32_freeMemoryUpdate@freeClusters
  7052  002BA0  C076  F08B         	movff	?_F32_getSetFreeCluster+1,F32_freeMemoryUpdate@freeClusters+1
  7053  002BA4  C077  F08C         	movff	?_F32_getSetFreeCluster+2,F32_freeMemoryUpdate@freeClusters+2
  7054  002BA8  C078  F08D         	movff	?_F32_getSetFreeCluster+3,F32_freeMemoryUpdate@freeClusters+3
  7055                           
  7056                           ;rosso_f32.h: 301: if (flag == 0)
  7057  002BAC  0100               	movlb	0	; () banked
  7058  002BAE  6789               	tstfsz	F32_freeMemoryUpdate@flag& (0+255),b
  7059  002BB0  D017               	goto	l3854
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;rosso_f32.h: 302: freeClusters = freeClusters + size;
  7063  002BB2  0100               	movlb	0	; () banked
  7064  002BB4  5181               	movf	F32_freeMemoryUpdate@size& (0+255),w,b
  7065  002BB6  0100               	movlb	0	; () banked
  7066  002BB8  258A               	addwf	F32_freeMemoryUpdate@freeClusters& (0+255),w,b
  7067  002BBA  0100               	movlb	0	; () banked
  7068  002BBC  6F8A               	movwf	F32_freeMemoryUpdate@freeClusters& (0+255),b
  7069  002BBE  0100               	movlb	0	; () banked
  7070  002BC0  5182               	movf	(F32_freeMemoryUpdate@size+1)& (0+255),w,b
  7071  002BC2  0100               	movlb	0	; () banked
  7072  002BC4  218B               	addwfc	(F32_freeMemoryUpdate@freeClusters+1)& (0+255),w,b
  7073  002BC6  0100               	movlb	0	; () banked
  7074  002BC8  6F8B               	movwf	(F32_freeMemoryUpdate@freeClusters+1)& (0+255),b
  7075  002BCA  0100               	movlb	0	; () banked
  7076  002BCC  5183               	movf	(F32_freeMemoryUpdate@size+2)& (0+255),w,b
  7077  002BCE  0100               	movlb	0	; () banked
  7078  002BD0  218C               	addwfc	(F32_freeMemoryUpdate@freeClusters+2)& (0+255),w,b
  7079  002BD2  0100               	movlb	0	; () banked
  7080  002BD4  6F8C               	movwf	(F32_freeMemoryUpdate@freeClusters+2)& (0+255),b
  7081  002BD6  0100               	movlb	0	; () banked
  7082  002BD8  5184               	movf	(F32_freeMemoryUpdate@size+3)& (0+255),w,b
  7083  002BDA  0100               	movlb	0	; () banked
  7084  002BDC  218D               	addwfc	(F32_freeMemoryUpdate@freeClusters+3)& (0+255),w,b
  7085  002BDE  D02C               	goto	L11
  7086  002BE0                     l3854:
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;rosso_f32.h: 303: else
  7090                           ;rosso_f32.h: 305: freeClusters = freeClusters - size;
  7091  002BE0  0100               	movlb	0	; () banked
  7092  002BE2  C081  F085         	movff	F32_freeMemoryUpdate@size,??_F32_freeMemoryUpdate
  7093  002BE6  0100               	movlb	0	; () banked
  7094  002BE8  C082  F086         	movff	F32_freeMemoryUpdate@size+1,??_F32_freeMemoryUpdate+1
  7095  002BEC  0100               	movlb	0	; () banked
  7096  002BEE  C083  F087         	movff	F32_freeMemoryUpdate@size+2,??_F32_freeMemoryUpdate+2
  7097  002BF2  0100               	movlb	0	; () banked
  7098  002BF4  C084  F088         	movff	F32_freeMemoryUpdate@size+3,??_F32_freeMemoryUpdate+3
  7099  002BF8  0100               	movlb	0	; () banked
  7100  002BFA  1F85               	comf	??_F32_freeMemoryUpdate& (0+255),f,b
  7101  002BFC  1F86               	comf	(??_F32_freeMemoryUpdate+1)& (0+255),f,b
  7102  002BFE  1F87               	comf	(??_F32_freeMemoryUpdate+2)& (0+255),f,b
  7103  002C00  1F88               	comf	(??_F32_freeMemoryUpdate+3)& (0+255),f,b
  7104  002C02  2B85               	incf	??_F32_freeMemoryUpdate& (0+255),f,b
  7105  002C04  0E00               	movlw	0
  7106  002C06  2386               	addwfc	(??_F32_freeMemoryUpdate+1)& (0+255),f,b
  7107  002C08  2387               	addwfc	(??_F32_freeMemoryUpdate+2)& (0+255),f,b
  7108  002C0A  2388               	addwfc	(??_F32_freeMemoryUpdate+3)& (0+255),f,b
  7109  002C0C  0100               	movlb	0	; () banked
  7110  002C0E  518A               	movf	F32_freeMemoryUpdate@freeClusters& (0+255),w,b
  7111  002C10  0100               	movlb	0	; () banked
  7112  002C12  2585               	addwf	??_F32_freeMemoryUpdate& (0+255),w,b
  7113  002C14  0100               	movlb	0	; () banked
  7114  002C16  6F8A               	movwf	F32_freeMemoryUpdate@freeClusters& (0+255),b
  7115  002C18  0100               	movlb	0	; () banked
  7116  002C1A  518B               	movf	(F32_freeMemoryUpdate@freeClusters+1)& (0+255),w,b
  7117  002C1C  0100               	movlb	0	; () banked
  7118  002C1E  2186               	addwfc	(??_F32_freeMemoryUpdate+1)& (0+255),w,b
  7119  002C20  0100               	movlb	0	; () banked
  7120  002C22  6F8B               	movwf	(F32_freeMemoryUpdate@freeClusters+1)& (0+255),b
  7121  002C24  0100               	movlb	0	; () banked
  7122  002C26  518C               	movf	(F32_freeMemoryUpdate@freeClusters+2)& (0+255),w,b
  7123  002C28  0100               	movlb	0	; () banked
  7124  002C2A  2187               	addwfc	(??_F32_freeMemoryUpdate+2)& (0+255),w,b
  7125  002C2C  0100               	movlb	0	; () banked
  7126  002C2E  6F8C               	movwf	(F32_freeMemoryUpdate@freeClusters+2)& (0+255),b
  7127  002C30  0100               	movlb	0	; () banked
  7128  002C32  518D               	movf	(F32_freeMemoryUpdate@freeClusters+3)& (0+255),w,b
  7129  002C34  0100               	movlb	0	; () banked
  7130  002C36  2188               	addwfc	(??_F32_freeMemoryUpdate+3)& (0+255),w,b
  7131  002C38                     L11:
  7132  002C38  0100               	movlb	0	; () banked
  7133  002C3A  6F8D               	movwf	(F32_freeMemoryUpdate@freeClusters+3)& (0+255),b
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;rosso_f32.h: 306: F32_getSetFreeCluster(1, 1, freeClusters);
  7137                           
  7138                           ; BSR set to: 0
  7139  002C3C  0E01               	movlw	1
  7140  002C3E  0100               	movlb	0	; () banked
  7141  002C40  6F75               	movwf	F32_getSetFreeCluster@get_set& (0+255),b
  7142  002C42  C08A  F076         	movff	F32_freeMemoryUpdate@freeClusters,F32_getSetFreeCluster@FSEntry
  7143  002C46  C08B  F077         	movff	F32_freeMemoryUpdate@freeClusters+1,F32_getSetFreeCluster@FSEntry+1
  7144  002C4A  C08C  F078         	movff	F32_freeMemoryUpdate@freeClusters+2,F32_getSetFreeCluster@FSEntry+2
  7145  002C4E  C08D  F079         	movff	F32_freeMemoryUpdate@freeClusters+3,F32_getSetFreeCluster@FSEntry+3
  7146  002C52  0E01               	movlw	1
  7147  002C54  EC4C  F019         	call	_F32_getSetFreeCluster
  7148  002C58  0012               	return	
  7149  002C5A                     __end_of_F32_freeMemoryUpdate:
  7150                           	opt stack 0
  7151                           tblptru	equ	0xFF8
  7152                           tblptrh	equ	0xFF7
  7153                           tblptrl	equ	0xFF6
  7154                           tablat	equ	0xFF5
  7155                           prodh	equ	0xFF4
  7156                           prodl	equ	0xFF3
  7157                           postinc0	equ	0xFEE
  7158                           wreg	equ	0xFE8
  7159                           indf1	equ	0xFE7
  7160                           postdec1	equ	0xFE5
  7161                           fsr1h	equ	0xFE2
  7162                           fsr1l	equ	0xFE1
  7163                           indf2	equ	0xFDF
  7164                           postinc2	equ	0xFDE
  7165                           postdec2	equ	0xFDD
  7166                           fsr2h	equ	0xFDA
  7167                           fsr2l	equ	0xFD9
  7168                           status	equ	0xFD8
  7169                           
  7170 ;; *************** function _F32_displayMemory *****************
  7171 ;; Defined at:
  7172 ;;		line 266 in file "../my_lib.X/rosso_f32.h"
  7173 ;; Parameters:    Size  Location     Type
  7174 ;;  flag            1    wreg     unsigned char 
  7175 ;;  memory          4   25[BANK0 ] unsigned long 
  7176 ;; Auto vars:     Size  Location     Type
  7177 ;;  flag            1   57[BANK0 ] unsigned char 
  7178 ;;  memoryString   20   37[BANK0 ] unsigned char [20]
  7179 ;;  i               1   58[BANK0 ] unsigned char 
  7180 ;; Return value:  Size  Location     Type
  7181 ;;		None               void
  7182 ;; Registers used:
  7183 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7184 ;; Tracked objects:
  7185 ;;		On entry : 0/0
  7186 ;;		On exit  : 0/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7189 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7190 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7191 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7192 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7193 ;;Total ram usage:       34 bytes
  7194 ;; Hardware stack levels used:    1
  7195 ;; Hardware stack levels required when called:    3
  7196 ;; This function calls:
  7197 ;;		___lldiv
  7198 ;;		___llmod
  7199 ;; This function is called by:
  7200 ;;		_F32_findFiles
  7201 ;; This function uses a non-reentrant model
  7202 ;;
  7203                           
  7204                           	psect	text17
  7205  00361A                     __ptext17:
  7206                           	opt stack 0
  7207  00361A                     _F32_displayMemory:
  7208                           	opt stack 24
  7209                           
  7210                           ;incstack = 0
  7211                           ;F32_displayMemory@flag stored from wreg
  7212  00361A  0100               	movlb	0	; () banked
  7213  00361C  6F99               	movwf	F32_displayMemory@flag& (0+255),b
  7214                           
  7215                           ; BSR set to: 0
  7216                           ;rosso_f32.h: 267: UINT8 memoryString[] = "              Bytes";
  7217  00361E  EE21  F0A2         	lfsr	2,F32_displayMemory@F8237
  7218  003622  EE10  F085         	lfsr	1,F32_displayMemory@memoryString
  7219  003626  0E14               	movlw	20
  7220  003628                     u3971:
  7221  003628  CFDE FFE6          	movff	postinc2,postinc1
  7222  00362C  2EE8               	decfsz	wreg,f,c
  7223  00362E  D7FC               	goto	u3971
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;rosso_f32.h: 268: UINT8 i;
  7227                           ;rosso_f32.h: 269: for (i = 12; i > 0; i--)
  7228  003630  0E0C               	movlw	12
  7229  003632  0100               	movlb	0	; () banked
  7230  003634  6F9A               	movwf	F32_displayMemory@i& (0+255),b
  7231  003636  D08F               	goto	L12
  7232  003638                     l3812:
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;rosso_f32.h: 270: {
  7236                           ;rosso_f32.h: 271: if (i == 5 || i == 9) {
  7237  003638  0100               	movlb	0	; () banked
  7238  00363A  519A               	movf	F32_displayMemory@i& (0+255),w,b
  7239  00363C  0A05               	xorlw	5
  7240  00363E  B4D8               	btfsc	status,2,c
  7241  003640  D005               	goto	l3816
  7242                           
  7243                           ; BSR set to: 0
  7244  003642  0100               	movlb	0	; () banked
  7245  003644  519A               	movf	F32_displayMemory@i& (0+255),w,b
  7246  003646  0A09               	xorlw	9
  7247  003648  A4D8               	btfss	status,2,c
  7248  00364A  D020               	goto	l3820
  7249  00364C                     l3816:
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;rosso_f32.h: 272: memoryString[i - 1] = ',';
  7253  00364C  0EFF               	movlw	255
  7254  00364E  0100               	movlb	0	; () banked
  7255  003650  6F7D               	movwf	??_F32_displayMemory& (0+255),b
  7256  003652  0EFF               	movlw	255
  7257  003654  6F7E               	movwf	(??_F32_displayMemory+1)& (0+255),b
  7258  003656  0100               	movlb	0	; () banked
  7259  003658  519A               	movf	F32_displayMemory@i& (0+255),w,b
  7260  00365A  0100               	movlb	0	; () banked
  7261  00365C  6F7F               	movwf	(??_F32_displayMemory+2)& (0+255),b
  7262  00365E  6B80               	clrf	(??_F32_displayMemory+3)& (0+255),b
  7263  003660  0100               	movlb	0	; () banked
  7264  003662  517D               	movf	??_F32_displayMemory& (0+255),w,b
  7265  003664  0100               	movlb	0	; () banked
  7266  003666  277F               	addwf	(??_F32_displayMemory+2)& (0+255),f,b
  7267  003668  0100               	movlb	0	; () banked
  7268  00366A  517E               	movf	(??_F32_displayMemory+1)& (0+255),w,b
  7269  00366C  0100               	movlb	0	; () banked
  7270  00366E  2380               	addwfc	(??_F32_displayMemory+3)& (0+255),f,b
  7271  003670  0100               	movlb	0	; () banked
  7272  003672  0E85               	movlw	low F32_displayMemory@memoryString
  7273  003674  0100               	movlb	0	; () banked
  7274  003676  257F               	addwf	(??_F32_displayMemory+2)& (0+255),w,b
  7275  003678  6ED9               	movwf	fsr2l,c
  7276  00367A  0100               	movlb	0	; () banked
  7277  00367C  0E00               	movlw	high F32_displayMemory@memoryString
  7278  00367E  0100               	movlb	0	; () banked
  7279  003680  2180               	addwfc	(??_F32_displayMemory+3)& (0+255),w,b
  7280  003682  6EDA               	movwf	fsr2h,c
  7281  003684  0E2C               	movlw	44
  7282  003686  6EDF               	movwf	indf2,c
  7283                           
  7284                           ; BSR set to: 0
  7285                           ;rosso_f32.h: 273: i--;
  7286  003688  0100               	movlb	0	; () banked
  7287  00368A  079A               	decf	F32_displayMemory@i& (0+255),f,b
  7288  00368C                     l3820:
  7289                           
  7290                           ; BSR set to: 0
  7291                           ;rosso_f32.h: 274: }
  7292                           ;rosso_f32.h: 275: memoryString[i - 1] = (memory % 10) | 0x30;
  7293  00368C  0EFF               	movlw	255
  7294  00368E  0100               	movlb	0	; () banked
  7295  003690  6F7D               	movwf	??_F32_displayMemory& (0+255),b
  7296  003692  0EFF               	movlw	255
  7297  003694  6F7E               	movwf	(??_F32_displayMemory+1)& (0+255),b
  7298  003696  0100               	movlb	0	; () banked
  7299  003698  519A               	movf	F32_displayMemory@i& (0+255),w,b
  7300  00369A  0100               	movlb	0	; () banked
  7301  00369C  6F7F               	movwf	(??_F32_displayMemory+2)& (0+255),b
  7302  00369E  6B80               	clrf	(??_F32_displayMemory+3)& (0+255),b
  7303  0036A0  0100               	movlb	0	; () banked
  7304  0036A2  517D               	movf	??_F32_displayMemory& (0+255),w,b
  7305  0036A4  0100               	movlb	0	; () banked
  7306  0036A6  277F               	addwf	(??_F32_displayMemory+2)& (0+255),f,b
  7307  0036A8  0100               	movlb	0	; () banked
  7308  0036AA  517E               	movf	(??_F32_displayMemory+1)& (0+255),w,b
  7309  0036AC  0100               	movlb	0	; () banked
  7310  0036AE  2380               	addwfc	(??_F32_displayMemory+3)& (0+255),f,b
  7311  0036B0  0100               	movlb	0	; () banked
  7312  0036B2  0E85               	movlw	low F32_displayMemory@memoryString
  7313  0036B4  0100               	movlb	0	; () banked
  7314  0036B6  257F               	addwf	(??_F32_displayMemory+2)& (0+255),w,b
  7315  0036B8  6ED9               	movwf	fsr2l,c
  7316  0036BA  0100               	movlb	0	; () banked
  7317  0036BC  0E00               	movlw	high F32_displayMemory@memoryString
  7318  0036BE  0100               	movlb	0	; () banked
  7319  0036C0  2180               	addwfc	(??_F32_displayMemory+3)& (0+255),w,b
  7320  0036C2  6EDA               	movwf	fsr2h,c
  7321  0036C4  C079  F060         	movff	F32_displayMemory@memory,___llmod@dividend
  7322  0036C8  C07A  F061         	movff	F32_displayMemory@memory+1,___llmod@dividend+1
  7323  0036CC  C07B  F062         	movff	F32_displayMemory@memory+2,___llmod@dividend+2
  7324  0036D0  C07C  F063         	movff	F32_displayMemory@memory+3,___llmod@dividend+3
  7325  0036D4  0E0A               	movlw	10
  7326  0036D6  0100               	movlb	0	; () banked
  7327  0036D8  6F64               	movwf	___llmod@divisor& (0+255),b
  7328  0036DA  0E00               	movlw	0
  7329  0036DC  0100               	movlb	0	; () banked
  7330  0036DE  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  7331  0036E0  0E00               	movlw	0
  7332  0036E2  0100               	movlb	0	; () banked
  7333  0036E4  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  7334  0036E6  0E00               	movlw	0
  7335  0036E8  0100               	movlb	0	; () banked
  7336  0036EA  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  7337  0036EC  EC84  F01D         	call	___llmod	;wreg free
  7338  0036F0  C060  F081         	movff	?___llmod,??_F32_displayMemory+4
  7339  0036F4  C061  F082         	movff	?___llmod+1,??_F32_displayMemory+5
  7340  0036F8  C062  F083         	movff	?___llmod+2,??_F32_displayMemory+6
  7341  0036FC  C063  F084         	movff	?___llmod+3,??_F32_displayMemory+7
  7342  003700  0100               	movlb	0	; () banked
  7343  003702  5181               	movf	(??_F32_displayMemory+4)& (0+255),w,b
  7344  003704  0930               	iorlw	48
  7345  003706  6EDF               	movwf	indf2,c
  7346                           
  7347                           ; BSR set to: 0
  7348                           ;rosso_f32.h: 276: memory /= 10;
  7349  003708  C079  F06C         	movff	F32_displayMemory@memory,___lldiv@dividend
  7350  00370C  C07A  F06D         	movff	F32_displayMemory@memory+1,___lldiv@dividend+1
  7351  003710  C07B  F06E         	movff	F32_displayMemory@memory+2,___lldiv@dividend+2
  7352  003714  C07C  F06F         	movff	F32_displayMemory@memory+3,___lldiv@dividend+3
  7353  003718  0E0A               	movlw	10
  7354  00371A  0100               	movlb	0	; () banked
  7355  00371C  6F70               	movwf	___lldiv@divisor& (0+255),b
  7356  00371E  0E00               	movlw	0
  7357  003720  0100               	movlb	0	; () banked
  7358  003722  6F71               	movwf	(___lldiv@divisor+1)& (0+255),b
  7359  003724  0E00               	movlw	0
  7360  003726  0100               	movlb	0	; () banked
  7361  003728  6F72               	movwf	(___lldiv@divisor+2)& (0+255),b
  7362  00372A  0E00               	movlw	0
  7363  00372C  0100               	movlb	0	; () banked
  7364  00372E  6F73               	movwf	(___lldiv@divisor+3)& (0+255),b
  7365  003730  ECC2  F01C         	call	___lldiv	;wreg free
  7366  003734  C06C  F079         	movff	?___lldiv,F32_displayMemory@memory
  7367  003738  C06D  F07A         	movff	?___lldiv+1,F32_displayMemory@memory+1
  7368  00373C  C06E  F07B         	movff	?___lldiv+2,F32_displayMemory@memory+2
  7369  003740  C06F  F07C         	movff	?___lldiv+3,F32_displayMemory@memory+3
  7370                           
  7371                           ;rosso_f32.h: 277: if (memory == 0)
  7372  003744  0100               	movlb	0	; () banked
  7373  003746  517C               	movf	(F32_displayMemory@memory+3)& (0+255),w,b
  7374  003748  1179               	iorwf	F32_displayMemory@memory& (0+255),w,b
  7375  00374A  117A               	iorwf	(F32_displayMemory@memory+1)& (0+255),w,b
  7376  00374C  117B               	iorwf	(F32_displayMemory@memory+2)& (0+255),w,b
  7377  00374E  B4D8               	btfsc	status,2,c
  7378  003750  D005               	goto	l3832
  7379                           
  7380                           ; BSR set to: 0
  7381                           
  7382                           ; BSR set to: 0
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;rosso_f32.h: 278: break;
  7386  003752  0100               	movlb	0	; () banked
  7387  003754  079A               	decf	F32_displayMemory@i& (0+255),f,b
  7388  003756                     L12:
  7389                           
  7390                           ; BSR set to: 0
  7391  003756  0100               	movlb	0	; () banked
  7392  003758  679A               	tstfsz	F32_displayMemory@i& (0+255),b
  7393  00375A  D76E               	goto	l3812
  7394  00375C                     l3832:
  7395                           
  7396                           ; BSR set to: 0
  7397                           ;rosso_f32.h: 279: }
  7398                           ;rosso_f32.h: 280: if (flag == 1)
  7399  00375C  0100               	movlb	0	; () banked
  7400  00375E  0599               	decf	F32_displayMemory@flag& (0+255),w,b
  7401  003760  A4D8               	btfss	status,2,c
  7402  003762  0012               	return	
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;rosso_f32.h: 281: memoryString[13] = 'K';
  7406  003764  0E4B               	movlw	75
  7407  003766  0100               	movlb	0	; () banked
  7408  003768  6F92               	movwf	(F32_displayMemory@memoryString+13)& (0+255),b
  7409  00376A  0012               	return	
  7410  00376C                     __end_of_F32_displayMemory:
  7411                           	opt stack 0
  7412                           tblptru	equ	0xFF8
  7413                           tblptrh	equ	0xFF7
  7414                           tblptrl	equ	0xFF6
  7415                           tablat	equ	0xFF5
  7416                           prodh	equ	0xFF4
  7417                           prodl	equ	0xFF3
  7418                           postinc0	equ	0xFEE
  7419                           wreg	equ	0xFE8
  7420                           indf1	equ	0xFE7
  7421                           postinc1	equ	0xFE6
  7422                           postdec1	equ	0xFE5
  7423                           fsr1h	equ	0xFE2
  7424                           fsr1l	equ	0xFE1
  7425                           indf2	equ	0xFDF
  7426                           postinc2	equ	0xFDE
  7427                           postdec2	equ	0xFDD
  7428                           fsr2h	equ	0xFDA
  7429                           fsr2l	equ	0xFD9
  7430                           status	equ	0xFD8
  7431                           
  7432 ;; *************** function ___llmod *****************
  7433 ;; Defined at:
  7434 ;;		line 8 in file "/opt/microchip/xc8/v1.33/sources/common/llmod.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;  dividend        4    0[BANK0 ] unsigned long 
  7437 ;;  divisor         4    4[BANK0 ] unsigned long 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  counter         1   31[COMRAM] unsigned char 
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  4    0[BANK0 ] unsigned long 
  7442 ;; Registers used:
  7443 ;;		wreg, status,2, status,0
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7449 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;Total ram usage:        9 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    2
  7456 ;; This function calls:
  7457 ;;		Nothing
  7458 ;; This function is called by:
  7459 ;;		_F32_getSetNextCluster
  7460 ;;		_F32_displayMemory
  7461 ;;		_F32_writeFile
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           	psect	text18
  7466  003B08                     __ptext18:
  7467                           	opt stack 0
  7468  003B08                     ___llmod:
  7469                           	opt stack 27
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;incstack = 0
  7473  003B08  0100               	movlb	0	; () banked
  7474  003B0A  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  7475  003B0C  1164               	iorwf	___llmod@divisor& (0+255),w,b
  7476  003B0E  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  7477  003B10  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  7478  003B12  B4D8               	btfsc	status,2,c
  7479  003B14  D03F               	goto	l960
  7480                           
  7481                           ; BSR set to: 0
  7482  003B16  0E01               	movlw	1
  7483  003B18  6E20               	movwf	___llmod@counter,c
  7484  003B1A  D00B               	goto	l3760
  7485  003B1C                     l3758:
  7486                           
  7487                           ; BSR set to: 0
  7488  003B1C  0100               	movlb	0	; () banked
  7489  003B1E  90D8               	bcf	status,0,c
  7490  003B20  0100               	movlb	0	; () banked
  7491  003B22  3764               	rlcf	___llmod@divisor& (0+255),f,b
  7492  003B24  0100               	movlb	0	; () banked
  7493  003B26  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  7494  003B28  0100               	movlb	0	; () banked
  7495  003B2A  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  7496  003B2C  0100               	movlb	0	; () banked
  7497  003B2E  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  7498  003B30  2A20               	incf	___llmod@counter,f,c
  7499  003B32                     l3760:
  7500                           
  7501                           ; BSR set to: 0
  7502  003B32  0100               	movlb	0	; () banked
  7503  003B34  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  7504  003B36  D7F2               	goto	l3758
  7505  003B38                     l3762:
  7506                           
  7507                           ; BSR set to: 0
  7508  003B38  0100               	movlb	0	; () banked
  7509  003B3A  5164               	movf	___llmod@divisor& (0+255),w,b
  7510  003B3C  0100               	movlb	0	; () banked
  7511  003B3E  5D60               	subwf	___llmod@dividend& (0+255),w,b
  7512  003B40  0100               	movlb	0	; () banked
  7513  003B42  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  7514  003B44  0100               	movlb	0	; () banked
  7515  003B46  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  7516  003B48  0100               	movlb	0	; () banked
  7517  003B4A  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  7518  003B4C  0100               	movlb	0	; () banked
  7519  003B4E  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  7520  003B50  0100               	movlb	0	; () banked
  7521  003B52  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  7522  003B54  0100               	movlb	0	; () banked
  7523  003B56  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  7524  003B58  A0D8               	btfss	status,0,c
  7525  003B5A  D010               	goto	l3766
  7526                           
  7527                           ; BSR set to: 0
  7528  003B5C  0100               	movlb	0	; () banked
  7529  003B5E  5164               	movf	___llmod@divisor& (0+255),w,b
  7530  003B60  0100               	movlb	0	; () banked
  7531  003B62  5F60               	subwf	___llmod@dividend& (0+255),f,b
  7532  003B64  0100               	movlb	0	; () banked
  7533  003B66  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  7534  003B68  0100               	movlb	0	; () banked
  7535  003B6A  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  7536  003B6C  0100               	movlb	0	; () banked
  7537  003B6E  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  7538  003B70  0100               	movlb	0	; () banked
  7539  003B72  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  7540  003B74  0100               	movlb	0	; () banked
  7541  003B76  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  7542  003B78  0100               	movlb	0	; () banked
  7543  003B7A  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  7544  003B7C                     l3766:
  7545                           
  7546                           ; BSR set to: 0
  7547  003B7C  0100               	movlb	0	; () banked
  7548  003B7E  90D8               	bcf	status,0,c
  7549  003B80  0100               	movlb	0	; () banked
  7550  003B82  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  7551  003B84  0100               	movlb	0	; () banked
  7552  003B86  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  7553  003B88  0100               	movlb	0	; () banked
  7554  003B8A  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  7555  003B8C  0100               	movlb	0	; () banked
  7556  003B8E  3364               	rrcf	___llmod@divisor& (0+255),f,b
  7557                           
  7558                           ; BSR set to: 0
  7559  003B90  2E20               	decfsz	___llmod@counter,f,c
  7560  003B92  D7D2               	goto	l3762
  7561  003B94                     l960:
  7562                           
  7563                           ; BSR set to: 0
  7564  003B94  C060  F060         	movff	___llmod@dividend,?___llmod
  7565  003B98  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  7566  003B9C  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  7567  003BA0  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  7568                           
  7569                           ; BSR set to: 0
  7570  003BA4  0012               	return	
  7571  003BA6                     __end_of___llmod:
  7572                           	opt stack 0
  7573                           tblptru	equ	0xFF8
  7574                           tblptrh	equ	0xFF7
  7575                           tblptrl	equ	0xFF6
  7576                           tablat	equ	0xFF5
  7577                           prodh	equ	0xFF4
  7578                           prodl	equ	0xFF3
  7579                           postinc0	equ	0xFEE
  7580                           wreg	equ	0xFE8
  7581                           indf1	equ	0xFE7
  7582                           postinc1	equ	0xFE6
  7583                           postdec1	equ	0xFE5
  7584                           fsr1h	equ	0xFE2
  7585                           fsr1l	equ	0xFE1
  7586                           indf2	equ	0xFDF
  7587                           postinc2	equ	0xFDE
  7588                           postdec2	equ	0xFDD
  7589                           fsr2h	equ	0xFDA
  7590                           fsr2l	equ	0xFD9
  7591                           status	equ	0xFD8
  7592                           
  7593 ;; *************** function _F32_getBootSectorData *****************
  7594 ;; Defined at:
  7595 ;;		line 179 in file "../my_lib.X/rosso_f32.h"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;		None
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;  dataSectors     4   48[BANK0 ] unsigned long 
  7600 ;;  bpb             2   56[BANK0 ] PTR struct BS_Structure
  7601 ;;		 -> SD_buffer(512), 
  7602 ;;  partition       2   54[BANK0 ] PTR struct partitionInfo
  7603 ;;		 -> SD_buffer.partitionData(64), SD_buffer(512), 
  7604 ;;  mbr             2   52[BANK0 ] PTR struct MBRinfo_Struc
  7605 ;;		 -> SD_buffer(512), 
  7606 ;; Return value:  Size  Location     Type
  7607 ;;                  1    wreg      unsigned char 
  7608 ;; Registers used:
  7609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7610 ;; Tracked objects:
  7611 ;;		On entry : 0/0
  7612 ;;		On exit  : 0/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;      Temps:          0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;Total ram usage:       25 bytes
  7620 ;; Hardware stack levels used:    1
  7621 ;; Hardware stack levels required when called:    6
  7622 ;; This function calls:
  7623 ;;		_F32_getSetFreeCluster
  7624 ;;		_SD_readSingleBlock
  7625 ;;		___lldiv
  7626 ;;		___lmul
  7627 ;; This function is called by:
  7628 ;;		_main
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           	psect	text19
  7633  0021F4                     __ptext19:
  7634                           	opt stack 0
  7635  0021F4                     _F32_getBootSectorData:
  7636                           	opt stack 24
  7637                           
  7638                           ;rosso_f32.h: 180: struct BS_Structure *bpb;
  7639                           ;rosso_f32.h: 181: struct MBRinfo_Structure *mbr;
  7640                           ;rosso_f32.h: 182: struct partitionInfo_Structure *partition;
  7641                           ;rosso_f32.h: 183: UINT32 dataSectors;
  7642                           ;rosso_f32.h: 185: unusedSectors = 0;
  7643                           
  7644                           ; BSR set to: 0
  7645                           ;incstack = 0
  7646  0021F4  0E00               	movlw	0
  7647  0021F6  6E33               	movwf	_unusedSectors,c
  7648  0021F8  0E00               	movlw	0
  7649  0021FA  6E34               	movwf	_unusedSectors+1,c
  7650  0021FC  0E00               	movlw	0
  7651  0021FE  6E35               	movwf	_unusedSectors+2,c
  7652  002200  0E00               	movlw	0
  7653  002202  6E36               	movwf	_unusedSectors+3,c
  7654                           
  7655                           ;rosso_f32.h: 187: SD_readSingleBlock(0);
  7656  002204  0E00               	movlw	0
  7657  002206  0100               	movlb	0	; () banked
  7658  002208  6F6C               	movwf	SD_readSingleBlock@SD_startBlock& (0+255),b
  7659  00220A  0E00               	movlw	0
  7660  00220C  0100               	movlb	0	; () banked
  7661  00220E  6F6D               	movwf	(SD_readSingleBlock@SD_startBlock+1)& (0+255),b
  7662  002210  0E00               	movlw	0
  7663  002212  0100               	movlb	0	; () banked
  7664  002214  6F6E               	movwf	(SD_readSingleBlock@SD_startBlock+2)& (0+255),b
  7665  002216  0E00               	movlw	0
  7666  002218  0100               	movlb	0	; () banked
  7667  00221A  6F6F               	movwf	(SD_readSingleBlock@SD_startBlock+3)& (0+255),b
  7668  00221C  EC2C  F01D         	call	_SD_readSingleBlock	;wreg free
  7669                           
  7670                           ;rosso_f32.h: 188: bpb = (struct BS_Structure *) SD_buffer;
  7671  002220  0E01               	movlw	high _SD_buffer
  7672  002222  0100               	movlb	0	; () banked
  7673  002224  6F99               	movwf	(F32_getBootSectorData@bpb+1)& (0+255),b
  7674  002226  0EEE               	movlw	low _SD_buffer
  7675  002228  0100               	movlb	0	; () banked
  7676  00222A  6F98               	movwf	F32_getBootSectorData@bpb& (0+255),b
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;rosso_f32.h: 190: if (bpb->jumpBoot[0] != 0xE9 && bpb->jumpBoot[0] != 0xEB)
  7680  00222C  C098  FFD9         	movff	F32_getBootSectorData@bpb,fsr2l
  7681  002230  C099  FFDA         	movff	F32_getBootSectorData@bpb+1,fsr2h
  7682  002234  50DF               	movf	indf2,w,c
  7683  002236  0AE9               	xorlw	233
  7684  002238  B4D8               	btfsc	status,2,c
  7685  00223A  D06B               	goto	l4212
  7686                           
  7687                           ; BSR set to: 0
  7688  00223C  C098  FFD9         	movff	F32_getBootSectorData@bpb,fsr2l
  7689  002240  C099  FFDA         	movff	F32_getBootSectorData@bpb+1,fsr2h
  7690  002244  50DF               	movf	indf2,w,c
  7691  002246  0AEB               	xorlw	235
  7692  002248  B4D8               	btfsc	status,2,c
  7693  00224A  D063               	goto	l4212
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;rosso_f32.h: 191: {
  7697                           ;rosso_f32.h: 192: mbr = (struct MBRinfo_Structure *) SD_buffer;
  7698  00224C  0E01               	movlw	high _SD_buffer
  7699  00224E  0100               	movlb	0	; () banked
  7700  002250  6F95               	movwf	(F32_getBootSectorData@mbr+1)& (0+255),b
  7701  002252  0EEE               	movlw	low _SD_buffer
  7702  002254  0100               	movlb	0	; () banked
  7703  002256  6F94               	movwf	F32_getBootSectorData@mbr& (0+255),b
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;rosso_f32.h: 194: if (mbr->signature != 0xaa55)
  7707  002258  0100               	movlb	0	; () banked
  7708  00225A  EE21 F0FE          	lfsr	2,510
  7709  00225E  0100               	movlb	0	; () banked
  7710  002260  5194               	movf	F32_getBootSectorData@mbr& (0+255),w,b
  7711  002262  26D9               	addwf	fsr2l,f,c
  7712  002264  0100               	movlb	0	; () banked
  7713  002266  5195               	movf	(F32_getBootSectorData@mbr+1)& (0+255),w,b
  7714  002268  22DA               	addwfc	fsr2h,f,c
  7715  00226A  2AD9               	incf	fsr2l,f,c
  7716  00226C  50DD               	movf	postdec2,w,c
  7717  00226E  0AAA               	xorlw	170
  7718  002270  0E55               	movlw	85
  7719  002272  B4D8               	btfsc	status,2,c
  7720  002274  18DF               	xorwf	indf2,w,c
  7721  002276  B4D8               	btfsc	status,2,c
  7722  002278  D002               	goto	l4196
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;rosso_f32.h: 195: return 1;
  7726  00227A  0E01               	movlw	1
  7727  00227C  0012               	return	
  7728  00227E                     l4196:
  7729                           
  7730                           ; BSR set to: 0
  7731                           ;rosso_f32.h: 197: partition = (struct partitionInfo_Structure *) (mbr->partitionData);
  7732  00227E  0EBE               	movlw	190
  7733  002280  0100               	movlb	0	; () banked
  7734  002282  2594               	addwf	F32_getBootSectorData@mbr& (0+255),w,b
  7735  002284  0100               	movlb	0	; () banked
  7736  002286  6F96               	movwf	F32_getBootSectorData@partition& (0+255),b
  7737  002288  0E01               	movlw	1
  7738  00228A  0100               	movlb	0	; () banked
  7739  00228C  2195               	addwfc	(F32_getBootSectorData@mbr+1)& (0+255),w,b
  7740  00228E  0100               	movlb	0	; () banked
  7741  002290  6F97               	movwf	(F32_getBootSectorData@partition+1)& (0+255),b
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;rosso_f32.h: 198: unusedSectors = partition->firstSector;
  7745  002292  0100               	movlb	0	; () banked
  7746  002294  EE20 F008          	lfsr	2,8
  7747  002298  0100               	movlb	0	; () banked
  7748  00229A  5196               	movf	F32_getBootSectorData@partition& (0+255),w,b
  7749  00229C  26D9               	addwf	fsr2l,f,c
  7750  00229E  0100               	movlb	0	; () banked
  7751  0022A0  5197               	movf	(F32_getBootSectorData@partition+1)& (0+255),w,b
  7752  0022A2  22DA               	addwfc	fsr2h,f,c
  7753  0022A4  CFDE F033          	movff	postinc2,_unusedSectors
  7754  0022A8  CFDE F034          	movff	postinc2,_unusedSectors+1
  7755  0022AC  CFDE F035          	movff	postinc2,_unusedSectors+2
  7756  0022B0  CFDE F036          	movff	postinc2,_unusedSectors+3
  7757                           
  7758                           ; BSR set to: 0
  7759                           ;rosso_f32.h: 200: SD_readSingleBlock(partition->firstSector);
  7760  0022B4  0100               	movlb	0	; () banked
  7761  0022B6  EE20 F008          	lfsr	2,8
  7762  0022BA  0100               	movlb	0	; () banked
  7763  0022BC  5196               	movf	F32_getBootSectorData@partition& (0+255),w,b
  7764  0022BE  26D9               	addwf	fsr2l,f,c
  7765  0022C0  0100               	movlb	0	; () banked
  7766  0022C2  5197               	movf	(F32_getBootSectorData@partition+1)& (0+255),w,b
  7767  0022C4  22DA               	addwfc	fsr2h,f,c
  7768  0022C6  0100               	movlb	0	; () banked
  7769  0022C8  CFDE F06C          	movff	postinc2,SD_readSingleBlock@SD_startBlock
  7770  0022CC  0100               	movlb	0	; () banked
  7771  0022CE  CFDE F06D          	movff	postinc2,SD_readSingleBlock@SD_startBlock+1
  7772  0022D2  0100               	movlb	0	; () banked
  7773  0022D4  CFDE F06E          	movff	postinc2,SD_readSingleBlock@SD_startBlock+2
  7774  0022D8  0100               	movlb	0	; () banked
  7775  0022DA  CFDE F06F          	movff	postinc2,SD_readSingleBlock@SD_startBlock+3
  7776  0022DE  EC2C  F01D         	call	_SD_readSingleBlock	;wreg free
  7777                           
  7778                           ;rosso_f32.h: 201: bpb = (struct BS_Structure *) SD_buffer;
  7779  0022E2  0E01               	movlw	high _SD_buffer
  7780  0022E4  0100               	movlb	0	; () banked
  7781  0022E6  6F99               	movwf	(F32_getBootSectorData@bpb+1)& (0+255),b
  7782  0022E8  0EEE               	movlw	low _SD_buffer
  7783  0022EA  0100               	movlb	0	; () banked
  7784  0022EC  6F98               	movwf	F32_getBootSectorData@bpb& (0+255),b
  7785                           
  7786                           ; BSR set to: 0
  7787                           ;rosso_f32.h: 202: if (bpb->jumpBoot[0] != 0xE9 && bpb->jumpBoot[0] != 0xEB)
  7788  0022EE  C098  FFD9         	movff	F32_getBootSectorData@bpb,fsr2l
  7789  0022F2  C099  FFDA         	movff	F32_getBootSectorData@bpb+1,fsr2h
  7790  0022F6  50DF               	movf	indf2,w,c
  7791  0022F8  0AE9               	xorlw	233
  7792  0022FA  B4D8               	btfsc	status,2,c
  7793  0022FC  D00A               	goto	l4212
  7794                           
  7795                           ; BSR set to: 0
  7796  0022FE  C098  FFD9         	movff	F32_getBootSectorData@bpb,fsr2l
  7797  002302  C099  FFDA         	movff	F32_getBootSectorData@bpb+1,fsr2h
  7798  002306  50DF               	movf	indf2,w,c
  7799  002308  0AEB               	xorlw	235
  7800  00230A  B4D8               	btfsc	status,2,c
  7801  00230C  D002               	goto	l4212
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;rosso_f32.h: 203: return 1;
  7805  00230E  0E01               	movlw	1
  7806  002310  0012               	return	
  7807  002312                     l4212:
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;rosso_f32.h: 204: }
  7811                           ;rosso_f32.h: 206: bytesPerSector = bpb->bytesPerSector;
  7812  002312  0100               	movlb	0	; () banked
  7813  002314  EE20 F00B          	lfsr	2,11
  7814  002318  0100               	movlb	0	; () banked
  7815  00231A  5198               	movf	F32_getBootSectorData@bpb& (0+255),w,b
  7816  00231C  26D9               	addwf	fsr2l,f,c
  7817  00231E  0100               	movlb	0	; () banked
  7818  002320  5199               	movf	(F32_getBootSectorData@bpb+1)& (0+255),w,b
  7819  002322  22DA               	addwfc	fsr2h,f,c
  7820  002324  0100               	movlb	0	; () banked
  7821  002326  CFDE F0EE          	movff	postinc2,_bytesPerSector	;volatile
  7822  00232A  0100               	movlb	0	; () banked
  7823  00232C  CFDD F0EF          	movff	postdec2,_bytesPerSector+1	;volatile
  7824                           
  7825                           ;rosso_f32.h: 210: sectorPerCluster = bpb->sectorPerCluster;
  7826  002330  0100               	movlb	0	; () banked
  7827  002332  EE20 F00D          	lfsr	2,13
  7828  002336  0100               	movlb	0	; () banked
  7829  002338  5198               	movf	F32_getBootSectorData@bpb& (0+255),w,b
  7830  00233A  26D9               	addwf	fsr2l,f,c
  7831  00233C  0100               	movlb	0	; () banked
  7832  00233E  5199               	movf	(F32_getBootSectorData@bpb+1)& (0+255),w,b
  7833  002340  22DA               	addwfc	fsr2h,f,c
  7834  002342  50DF               	movf	indf2,w,c
  7835  002344  0100               	movlb	0	; () banked
  7836  002346  6F81               	movwf	??_F32_getBootSectorData& (0+255),b
  7837  002348  0100               	movlb	0	; () banked
  7838  00234A  5181               	movf	??_F32_getBootSectorData& (0+255),w,b
  7839  00234C  6E3F               	movwf	_sectorPerCluster,c	;volatile
  7840  00234E  6A40               	clrf	_sectorPerCluster+1,c	;volatile
  7841                           
  7842                           ;rosso_f32.h: 214: reservedSectorCount = bpb->reservedSectorCount;
  7843  002350  0100               	movlb	0	; () banked
  7844  002352  EE20 F00E          	lfsr	2,14
  7845  002356  0100               	movlb	0	; () banked
  7846  002358  5198               	movf	F32_getBootSectorData@bpb& (0+255),w,b
  7847  00235A  26D9               	addwf	fsr2l,f,c
  7848  00235C  0100               	movlb	0	; () banked
  7849  00235E  5199               	movf	(F32_getBootSectorData@bpb+1)& (0+255),w,b
  7850  002360  22DA               	addwfc	fsr2h,f,c
  7851  002362  CFDE F039          	movff	postinc2,_reservedSectorCount	;volatile
  7852  002366  CFDD F03A          	movff	postdec2,_reservedSectorCount+1	;volatile
  7853                           
  7854                           ;rosso_f32.h: 215: rootCluster = bpb->rootCluster;
  7855  00236A  0100               	movlb	0	; () banked
  7856  00236C  EE20 F02C          	lfsr	2,44
  7857  002370  0100               	movlb	0	; () banked
  7858  002372  5198               	movf	F32_getBootSectorData@bpb& (0+255),w,b
  7859  002374  26D9               	addwf	fsr2l,f,c
  7860  002376  0100               	movlb	0	; () banked
  7861  002378  5199               	movf	(F32_getBootSectorData@bpb+1)& (0+255),w,b
  7862  00237A  22DA               	addwfc	fsr2h,f,c
  7863  00237C  CFDE F02B          	movff	postinc2,_rootCluster	;volatile
  7864  002380  CFDE F02C          	movff	postinc2,_rootCluster+1	;volatile
  7865  002384  CFDE F02D          	movff	postinc2,_rootCluster+2	;volatile
  7866  002388  CFDE F02E          	movff	postinc2,_rootCluster+3	;volatile
  7867                           
  7868                           ; BSR set to: 0
  7869                           ;rosso_f32.h: 216: firstDataSector = bpb->hiddenSectors + reservedSectorCount
  7870                           ;rosso_f32.h: 217: + (bpb->numberofFATs * bpb->FATsize_F32);
  7871  00238C  0100               	movlb	0	; () banked
  7872  00238E  EE20 F01C          	lfsr	2,28
  7873  002392  0100               	movlb	0	; () banked
  7874  002394  5198               	movf	F32_getBootSectorData@bpb& (0+255),w,b
  7875  002396  26D9               	addwf	fsr2l,f,c
  7876  002398  0100               	movlb	0	; () banked
  7877  00239A  5199               	movf	(F32_getBootSectorData@bpb+1)& (0+255),w,b
  7878  00239C  22DA               	addwfc	fsr2h,f,c
  7879  00239E  CFDE F081          	movff	postinc2,??_F32_getBootSectorData
  7880  0023A2  CFDE F082          	movff	postinc2,??_F32_getBootSectorData+1
  7881  0023A6  CFDE F083          	movff	postinc2,??_F32_getBootSectorData+2
  7882  0023AA  CFDE F084          	movff	postinc2,??_F32_getBootSectorData+3
  7883  0023AE  0100               	movlb	0	; () banked
  7884  0023B0  EE20 F010          	lfsr	2,16
  7885  0023B4  0100               	movlb	0	; () banked
  7886  0023B6  5198               	movf	F32_getBootSectorData@bpb& (0+255),w,b
  7887  0023B8  26D9               	addwf	fsr2l,f,c
  7888  0023BA  0100               	movlb	0	; () banked
  7889  0023BC  5199               	movf	(F32_getBootSectorData@bpb+1)& (0+255),w,b
  7890  0023BE  22DA               	addwfc	fsr2h,f,c
  7891  0023C0  50DF               	movf	indf2,w,c
  7892  0023C2  0100               	movlb	0	; () banked
  7893  0023C4  6F85               	movwf	(??_F32_getBootSectorData+4)& (0+255),b
  7894  0023C6  0100               	movlb	0	; () banked
  7895  0023C8  5185               	movf	(??_F32_getBootSectorData+4)& (0+255),w,b
  7896  0023CA  0100               	movlb	0	; () banked
  7897  0023CC  6F60               	movwf	___lmul@multiplier& (0+255),b
  7898  0023CE  0100               	movlb	0	; () banked
  7899  0023D0  6B61               	clrf	(___lmul@multiplier+1)& (0+255),b
  7900  0023D2  0100               	movlb	0	; () banked
  7901  0023D4  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  7902  0023D6  0100               	movlb	0	; () banked
  7903  0023D8  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  7904  0023DA  0100               	movlb	0	; () banked
  7905  0023DC  EE20 F024          	lfsr	2,36
  7906  0023E0  0100               	movlb	0	; () banked
  7907  0023E2  5198               	movf	F32_getBootSectorData@bpb& (0+255),w,b
  7908  0023E4  26D9               	addwf	fsr2l,f,c
  7909  0023E6  0100               	movlb	0	; () banked
  7910  0023E8  5199               	movf	(F32_getBootSectorData@bpb+1)& (0+255),w,b
  7911  0023EA  22DA               	addwfc	fsr2h,f,c
  7912  0023EC  0100               	movlb	0	; () banked
  7913  0023EE  CFDE F064          	movff	postinc2,___lmul@multiplicand
  7914  0023F2  0100               	movlb	0	; () banked
  7915  0023F4  CFDE F065          	movff	postinc2,___lmul@multiplicand+1
  7916  0023F8  0100               	movlb	0	; () banked
  7917  0023FA  CFDE F066          	movff	postinc2,___lmul@multiplicand+2
  7918  0023FE  0100               	movlb	0	; () banked
  7919  002400  CFDE F067          	movff	postinc2,___lmul@multiplicand+3
  7920  002404  ECD3  F01D         	call	___lmul	;wreg free
  7921  002408  C060  F086         	movff	?___lmul,??_F32_getBootSectorData+5
  7922  00240C  C061  F087         	movff	?___lmul+1,??_F32_getBootSectorData+6
  7923  002410  C062  F088         	movff	?___lmul+2,??_F32_getBootSectorData+7
  7924  002414  C063  F089         	movff	?___lmul+3,??_F32_getBootSectorData+8
  7925  002418  5039               	movf	_reservedSectorCount,w,c	;volatile
  7926  00241A  0100               	movlb	0	; () banked
  7927  00241C  2586               	addwf	(??_F32_getBootSectorData+5)& (0+255),w,b
  7928  00241E  0100               	movlb	0	; () banked
  7929  002420  6F8A               	movwf	(??_F32_getBootSectorData+9)& (0+255),b
  7930  002422  503A               	movf	_reservedSectorCount+1,w,c	;volatile
  7931  002424  0100               	movlb	0	; () banked
  7932  002426  2187               	addwfc	(??_F32_getBootSectorData+6)& (0+255),w,b
  7933  002428  0100               	movlb	0	; () banked
  7934  00242A  6F8B               	movwf	(??_F32_getBootSectorData+10)& (0+255),b
  7935  00242C  0E00               	movlw	0
  7936  00242E  0100               	movlb	0	; () banked
  7937  002430  2188               	addwfc	(??_F32_getBootSectorData+7)& (0+255),w,b
  7938  002432  0100               	movlb	0	; () banked
  7939  002434  6F8C               	movwf	(??_F32_getBootSectorData+11)& (0+255),b
  7940  002436  0E00               	movlw	0
  7941  002438  0100               	movlb	0	; () banked
  7942  00243A  2189               	addwfc	(??_F32_getBootSectorData+8)& (0+255),w,b
  7943  00243C  0100               	movlb	0	; () banked
  7944  00243E  6F8D               	movwf	(??_F32_getBootSectorData+12)& (0+255),b
  7945  002440  0100               	movlb	0	; () banked
  7946  002442  5181               	movf	??_F32_getBootSectorData& (0+255),w,b
  7947  002444  0100               	movlb	0	; () banked
  7948  002446  258A               	addwf	(??_F32_getBootSectorData+9)& (0+255),w,b
  7949  002448  0101               	movlb	1	; () banked
  7950  00244A  6F10               	movwf	_firstDataSector& (0+255),b	;volatile
  7951  00244C  0100               	movlb	0	; () banked
  7952  00244E  5182               	movf	(??_F32_getBootSectorData+1)& (0+255),w,b
  7953  002450  0100               	movlb	0	; () banked
  7954  002452  218B               	addwfc	(??_F32_getBootSectorData+10)& (0+255),w,b
  7955  002454  0101               	movlb	1	; () banked
  7956  002456  6F11               	movwf	(_firstDataSector+1)& (0+255),b	;volatile
  7957  002458  0100               	movlb	0	; () banked
  7958  00245A  5183               	movf	(??_F32_getBootSectorData+2)& (0+255),w,b
  7959  00245C  0100               	movlb	0	; () banked
  7960  00245E  218C               	addwfc	(??_F32_getBootSectorData+11)& (0+255),w,b
  7961  002460  0101               	movlb	1	; () banked
  7962  002462  6F12               	movwf	(_firstDataSector+2)& (0+255),b	;volatile
  7963  002464  0100               	movlb	0	; () banked
  7964  002466  5184               	movf	(??_F32_getBootSectorData+3)& (0+255),w,b
  7965  002468  0100               	movlb	0	; () banked
  7966  00246A  218D               	addwfc	(??_F32_getBootSectorData+12)& (0+255),w,b
  7967  00246C  0101               	movlb	1	; () banked
  7968  00246E  6F13               	movwf	(_firstDataSector+3)& (0+255),b	;volatile
  7969                           
  7970                           ; BSR set to: 1
  7971                           ;rosso_f32.h: 219: dataSectors = bpb->totalSectors_F32 - bpb->reservedSectorCount
  7972                           ;rosso_f32.h: 220: - (bpb->numberofFATs * bpb->FATsize_F32);
  7973  002470  0100               	movlb	0	; () banked
  7974  002472  EE20 F020          	lfsr	2,32
  7975  002476  0100               	movlb	0	; () banked
  7976  002478  5198               	movf	F32_getBootSectorData@bpb& (0+255),w,b
  7977  00247A  26D9               	addwf	fsr2l,f,c
  7978  00247C  0100               	movlb	0	; () banked
  7979  00247E  5199               	movf	(F32_getBootSectorData@bpb+1)& (0+255),w,b
  7980  002480  22DA               	addwfc	fsr2h,f,c
  7981  002482  CFDE F081          	movff	postinc2,??_F32_getBootSectorData
  7982  002486  CFDE F082          	movff	postinc2,??_F32_getBootSectorData+1
  7983  00248A  CFDE F083          	movff	postinc2,??_F32_getBootSectorData+2
  7984  00248E  CFDE F084          	movff	postinc2,??_F32_getBootSectorData+3
  7985  002492  0100               	movlb	0	; () banked
  7986  002494  EE20 F010          	lfsr	2,16
  7987  002498  0100               	movlb	0	; () banked
  7988  00249A  5198               	movf	F32_getBootSectorData@bpb& (0+255),w,b
  7989  00249C  26D9               	addwf	fsr2l,f,c
  7990  00249E  0100               	movlb	0	; () banked
  7991  0024A0  5199               	movf	(F32_getBootSectorData@bpb+1)& (0+255),w,b
  7992  0024A2  22DA               	addwfc	fsr2h,f,c
  7993  0024A4  50DF               	movf	indf2,w,c
  7994  0024A6  0100               	movlb	0	; () banked
  7995  0024A8  6F85               	movwf	(??_F32_getBootSectorData+4)& (0+255),b
  7996  0024AA  0100               	movlb	0	; () banked
  7997  0024AC  5185               	movf	(??_F32_getBootSectorData+4)& (0+255),w,b
  7998  0024AE  0100               	movlb	0	; () banked
  7999  0024B0  6F60               	movwf	___lmul@multiplier& (0+255),b
  8000  0024B2  0100               	movlb	0	; () banked
  8001  0024B4  6B61               	clrf	(___lmul@multiplier+1)& (0+255),b
  8002  0024B6  0100               	movlb	0	; () banked
  8003  0024B8  6B62               	clrf	(___lmul@multiplier+2)& (0+255),b
  8004  0024BA  0100               	movlb	0	; () banked
  8005  0024BC  6B63               	clrf	(___lmul@multiplier+3)& (0+255),b
  8006  0024BE  0100               	movlb	0	; () banked
  8007  0024C0  EE20 F024          	lfsr	2,36
  8008  0024C4  0100               	movlb	0	; () banked
  8009  0024C6  5198               	movf	F32_getBootSectorData@bpb& (0+255),w,b
  8010  0024C8  26D9               	addwf	fsr2l,f,c
  8011  0024CA  0100               	movlb	0	; () banked
  8012  0024CC  5199               	movf	(F32_getBootSectorData@bpb+1)& (0+255),w,b
  8013  0024CE  22DA               	addwfc	fsr2h,f,c
  8014  0024D0  0100               	movlb	0	; () banked
  8015  0024D2  CFDE F064          	movff	postinc2,___lmul@multiplicand
  8016  0024D6  0100               	movlb	0	; () banked
  8017  0024D8  CFDE F065          	movff	postinc2,___lmul@multiplicand+1
  8018  0024DC  0100               	movlb	0	; () banked
  8019  0024DE  CFDE F066          	movff	postinc2,___lmul@multiplicand+2
  8020  0024E2  0100               	movlb	0	; () banked
  8021  0024E4  CFDE F067          	movff	postinc2,___lmul@multiplicand+3
  8022  0024E8  ECD3  F01D         	call	___lmul	;wreg free
  8023  0024EC  C060  F086         	movff	?___lmul,??_F32_getBootSectorData+5
  8024  0024F0  C061  F087         	movff	?___lmul+1,??_F32_getBootSectorData+6
  8025  0024F4  C062  F088         	movff	?___lmul+2,??_F32_getBootSectorData+7
  8026  0024F8  C063  F089         	movff	?___lmul+3,??_F32_getBootSectorData+8
  8027  0024FC  0100               	movlb	0	; () banked
  8028  0024FE  EE20 F00E          	lfsr	2,14
  8029  002502  0100               	movlb	0	; () banked
  8030  002504  5198               	movf	F32_getBootSectorData@bpb& (0+255),w,b
  8031  002506  26D9               	addwf	fsr2l,f,c
  8032  002508  0100               	movlb	0	; () banked
  8033  00250A  5199               	movf	(F32_getBootSectorData@bpb+1)& (0+255),w,b
  8034  00250C  22DA               	addwfc	fsr2h,f,c
  8035  00250E  CFDE F08A          	movff	postinc2,??_F32_getBootSectorData+9
  8036  002512  CFDD F08B          	movff	postdec2,??_F32_getBootSectorData+10
  8037  002516  0100               	movlb	0	; () banked
  8038  002518  518A               	movf	(??_F32_getBootSectorData+9)& (0+255),w,b
  8039  00251A  0100               	movlb	0	; () banked
  8040  00251C  2586               	addwf	(??_F32_getBootSectorData+5)& (0+255),w,b
  8041  00251E  0100               	movlb	0	; () banked
  8042  002520  6F8C               	movwf	(??_F32_getBootSectorData+11)& (0+255),b
  8043  002522  0100               	movlb	0	; () banked
  8044  002524  518B               	movf	(??_F32_getBootSectorData+10)& (0+255),w,b
  8045  002526  0100               	movlb	0	; () banked
  8046  002528  2187               	addwfc	(??_F32_getBootSectorData+6)& (0+255),w,b
  8047  00252A  0100               	movlb	0	; () banked
  8048  00252C  6F8D               	movwf	(??_F32_getBootSectorData+12)& (0+255),b
  8049  00252E  0E00               	movlw	0
  8050  002530  0100               	movlb	0	; () banked
  8051  002532  2188               	addwfc	(??_F32_getBootSectorData+7)& (0+255),w,b
  8052  002534  0100               	movlb	0	; () banked
  8053  002536  6F8E               	movwf	(??_F32_getBootSectorData+13)& (0+255),b
  8054  002538  0E00               	movlw	0
  8055  00253A  0100               	movlb	0	; () banked
  8056  00253C  2189               	addwfc	(??_F32_getBootSectorData+8)& (0+255),w,b
  8057  00253E  0100               	movlb	0	; () banked
  8058  002540  6F8F               	movwf	(??_F32_getBootSectorData+14)& (0+255),b
  8059  002542  0100               	movlb	0	; () banked
  8060  002544  1F8C               	comf	(??_F32_getBootSectorData+11)& (0+255),f,b
  8061  002546  1F8D               	comf	(??_F32_getBootSectorData+12)& (0+255),f,b
  8062  002548  1F8E               	comf	(??_F32_getBootSectorData+13)& (0+255),f,b
  8063  00254A  1F8F               	comf	(??_F32_getBootSectorData+14)& (0+255),f,b
  8064  00254C  2B8C               	incf	(??_F32_getBootSectorData+11)& (0+255),f,b
  8065  00254E  0E00               	movlw	0
  8066  002550  238D               	addwfc	(??_F32_getBootSectorData+12)& (0+255),f,b
  8067  002552  238E               	addwfc	(??_F32_getBootSectorData+13)& (0+255),f,b
  8068  002554  238F               	addwfc	(??_F32_getBootSectorData+14)& (0+255),f,b
  8069  002556  0100               	movlb	0	; () banked
  8070  002558  5181               	movf	??_F32_getBootSectorData& (0+255),w,b
  8071  00255A  0100               	movlb	0	; () banked
  8072  00255C  258C               	addwf	(??_F32_getBootSectorData+11)& (0+255),w,b
  8073  00255E  0100               	movlb	0	; () banked
  8074  002560  6F90               	movwf	F32_getBootSectorData@dataSectors& (0+255),b
  8075  002562  0100               	movlb	0	; () banked
  8076  002564  5182               	movf	(??_F32_getBootSectorData+1)& (0+255),w,b
  8077  002566  0100               	movlb	0	; () banked
  8078  002568  218D               	addwfc	(??_F32_getBootSectorData+12)& (0+255),w,b
  8079  00256A  0100               	movlb	0	; () banked
  8080  00256C  6F91               	movwf	(F32_getBootSectorData@dataSectors+1)& (0+255),b
  8081  00256E  0100               	movlb	0	; () banked
  8082  002570  5183               	movf	(??_F32_getBootSectorData+2)& (0+255),w,b
  8083  002572  0100               	movlb	0	; () banked
  8084  002574  218E               	addwfc	(??_F32_getBootSectorData+13)& (0+255),w,b
  8085  002576  0100               	movlb	0	; () banked
  8086  002578  6F92               	movwf	(F32_getBootSectorData@dataSectors+2)& (0+255),b
  8087  00257A  0100               	movlb	0	; () banked
  8088  00257C  5184               	movf	(??_F32_getBootSectorData+3)& (0+255),w,b
  8089  00257E  0100               	movlb	0	; () banked
  8090  002580  218F               	addwfc	(??_F32_getBootSectorData+14)& (0+255),w,b
  8091  002582  0100               	movlb	0	; () banked
  8092  002584  6F93               	movwf	(F32_getBootSectorData@dataSectors+3)& (0+255),b
  8093                           
  8094                           ; BSR set to: 0
  8095                           ;rosso_f32.h: 221: totalClusters = dataSectors / sectorPerCluster;
  8096  002586  C090  F06C         	movff	F32_getBootSectorData@dataSectors,___lldiv@dividend
  8097  00258A  C091  F06D         	movff	F32_getBootSectorData@dataSectors+1,___lldiv@dividend+1
  8098  00258E  C092  F06E         	movff	F32_getBootSectorData@dataSectors+2,___lldiv@dividend+2
  8099  002592  C093  F06F         	movff	F32_getBootSectorData@dataSectors+3,___lldiv@dividend+3
  8100  002596  0100               	movlb	0	; () banked
  8101  002598  C03F  F070         	movff	_sectorPerCluster,___lldiv@divisor	;volatile
  8102  00259C  0100               	movlb	0	; () banked
  8103  00259E  C040  F071         	movff	_sectorPerCluster+1,___lldiv@divisor+1	;volatile
  8104  0025A2  0100               	movlb	0	; () banked
  8105  0025A4  6B72               	clrf	(___lldiv@divisor+2)& (0+255),b
  8106  0025A6  0100               	movlb	0	; () banked
  8107  0025A8  6B73               	clrf	(___lldiv@divisor+3)& (0+255),b
  8108  0025AA  ECC2  F01C         	call	___lldiv	;wreg free
  8109  0025AE  C06C  F02F         	movff	?___lldiv,_totalClusters	;volatile
  8110  0025B2  C06D  F030         	movff	?___lldiv+1,_totalClusters+1	;volatile
  8111  0025B6  C06E  F031         	movff	?___lldiv+2,_totalClusters+2	;volatile
  8112  0025BA  C06F  F032         	movff	?___lldiv+3,_totalClusters+3	;volatile
  8113                           
  8114                           ;rosso_f32.h: 225: if ((F32_getSetFreeCluster(1, 0, 0)) > totalClusters)
  8115  0025BE  0E00               	movlw	0
  8116  0025C0  0100               	movlb	0	; () banked
  8117  0025C2  6F75               	movwf	F32_getSetFreeCluster@get_set& (0+255),b
  8118  0025C4  0E00               	movlw	0
  8119  0025C6  0100               	movlb	0	; () banked
  8120  0025C8  6F76               	movwf	F32_getSetFreeCluster@FSEntry& (0+255),b
  8121  0025CA  0E00               	movlw	0
  8122  0025CC  0100               	movlb	0	; () banked
  8123  0025CE  6F77               	movwf	(F32_getSetFreeCluster@FSEntry+1)& (0+255),b
  8124  0025D0  0E00               	movlw	0
  8125  0025D2  0100               	movlb	0	; () banked
  8126  0025D4  6F78               	movwf	(F32_getSetFreeCluster@FSEntry+2)& (0+255),b
  8127  0025D6  0E00               	movlw	0
  8128  0025D8  0100               	movlb	0	; () banked
  8129  0025DA  6F79               	movwf	(F32_getSetFreeCluster@FSEntry+3)& (0+255),b
  8130  0025DC  0E01               	movlw	1
  8131  0025DE  EC4C  F019         	call	_F32_getSetFreeCluster
  8132  0025E2  C075  F081         	movff	?_F32_getSetFreeCluster,??_F32_getBootSectorData
  8133  0025E6  C076  F082         	movff	?_F32_getSetFreeCluster+1,??_F32_getBootSectorData+1
  8134  0025EA  C077  F083         	movff	?_F32_getSetFreeCluster+2,??_F32_getBootSectorData+2
  8135  0025EE  C078  F084         	movff	?_F32_getSetFreeCluster+3,??_F32_getBootSectorData+3
  8136  0025F2  0100               	movlb	0	; () banked
  8137  0025F4  5181               	movf	??_F32_getBootSectorData& (0+255),w,b
  8138  0025F6  5C2F               	subwf	_totalClusters,w,c	;volatile
  8139  0025F8  0100               	movlb	0	; () banked
  8140  0025FA  5182               	movf	(??_F32_getBootSectorData+1)& (0+255),w,b
  8141  0025FC  5830               	subwfb	_totalClusters+1,w,c	;volatile
  8142  0025FE  0100               	movlb	0	; () banked
  8143  002600  5183               	movf	(??_F32_getBootSectorData+2)& (0+255),w,b
  8144  002602  5831               	subwfb	_totalClusters+2,w,c	;volatile
  8145  002604  0100               	movlb	0	; () banked
  8146  002606  5184               	movf	(??_F32_getBootSectorData+3)& (0+255),w,b
  8147  002608  5832               	subwfb	_totalClusters+3,w,c	;volatile
  8148  00260A  B0D8               	btfsc	status,0,c
  8149  00260C  D002               	goto	l4224
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;rosso_f32.h: 226: freeClusterCountUpdated = 0;
  8153  00260E  0E00               	movlw	0
  8154  002610  D001               	goto	L13
  8155  002612                     l4224:
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;rosso_f32.h: 227: else
  8159                           ;rosso_f32.h: 228: freeClusterCountUpdated = 1;
  8160  002612  0E01               	movlw	1
  8161  002614                     L13:
  8162  002614  0100               	movlb	0	; () banked
  8163  002616  6FF0               	movwf	_freeClusterCountUpdated& (0+255),b
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;rosso_f32.h: 229: return 0;
  8167                           
  8168                           ; BSR set to: 0
  8169  002618  0E00               	movlw	0
  8170  00261A  0012               	return	
  8171  00261C                     __end_of_F32_getBootSectorData:
  8172                           	opt stack 0
  8173                           tblptru	equ	0xFF8
  8174                           tblptrh	equ	0xFF7
  8175                           tblptrl	equ	0xFF6
  8176                           tablat	equ	0xFF5
  8177                           prodh	equ	0xFF4
  8178                           prodl	equ	0xFF3
  8179                           postinc0	equ	0xFEE
  8180                           wreg	equ	0xFE8
  8181                           indf1	equ	0xFE7
  8182                           postinc1	equ	0xFE6
  8183                           postdec1	equ	0xFE5
  8184                           fsr1h	equ	0xFE2
  8185                           fsr1l	equ	0xFE1
  8186                           indf2	equ	0xFDF
  8187                           postinc2	equ	0xFDE
  8188                           postdec2	equ	0xFDD
  8189                           fsr2h	equ	0xFDA
  8190                           fsr2l	equ	0xFD9
  8191                           status	equ	0xFD8
  8192                           
  8193 ;; *************** function ___lmul *****************
  8194 ;; Defined at:
  8195 ;;		line 15 in file "/opt/microchip/xc8/v1.33/sources/common/Umul32.c"
  8196 ;; Parameters:    Size  Location     Type
  8197 ;;  multiplier      4    0[BANK0 ] unsigned long 
  8198 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;  product         4    8[BANK0 ] unsigned long 
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  4    0[BANK0 ] unsigned long 
  8203 ;; Registers used:
  8204 ;;		wreg, status,2, status,0
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8210 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8211 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8213 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8214 ;;Total ram usage:       12 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    2
  8217 ;; This function calls:
  8218 ;;		Nothing
  8219 ;; This function is called by:
  8220 ;;		_F32_getFirstSector
  8221 ;;		_F32_getBootSectorData
  8222 ;;		_F32_writeFile
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           	psect	text20
  8227  003BA6                     __ptext20:
  8228                           	opt stack 0
  8229  003BA6                     ___lmul:
  8230                           	opt stack 27
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;incstack = 0
  8234  003BA6  0E00               	movlw	0
  8235  003BA8  0100               	movlb	0	; () banked
  8236  003BAA  6F68               	movwf	___lmul@product& (0+255),b
  8237  003BAC  0E00               	movlw	0
  8238  003BAE  0100               	movlb	0	; () banked
  8239  003BB0  6F69               	movwf	(___lmul@product+1)& (0+255),b
  8240  003BB2  0E00               	movlw	0
  8241  003BB4  0100               	movlb	0	; () banked
  8242  003BB6  6F6A               	movwf	(___lmul@product+2)& (0+255),b
  8243  003BB8  0E00               	movlw	0
  8244  003BBA  0100               	movlb	0	; () banked
  8245  003BBC  6F6B               	movwf	(___lmul@product+3)& (0+255),b
  8246  003BBE                     l3724:
  8247                           
  8248                           ; BSR set to: 0
  8249  003BBE  0100               	movlb	0	; () banked
  8250  003BC0  A160               	btfss	___lmul@multiplier& (0+255),0,b
  8251  003BC2  D010               	goto	l3728
  8252                           
  8253                           ; BSR set to: 0
  8254  003BC4  0100               	movlb	0	; () banked
  8255  003BC6  5164               	movf	___lmul@multiplicand& (0+255),w,b
  8256  003BC8  0100               	movlb	0	; () banked
  8257  003BCA  2768               	addwf	___lmul@product& (0+255),f,b
  8258  003BCC  0100               	movlb	0	; () banked
  8259  003BCE  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  8260  003BD0  0100               	movlb	0	; () banked
  8261  003BD2  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
  8262  003BD4  0100               	movlb	0	; () banked
  8263  003BD6  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  8264  003BD8  0100               	movlb	0	; () banked
  8265  003BDA  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
  8266  003BDC  0100               	movlb	0	; () banked
  8267  003BDE  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  8268  003BE0  0100               	movlb	0	; () banked
  8269  003BE2  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
  8270  003BE4                     l3728:
  8271                           
  8272                           ; BSR set to: 0
  8273  003BE4  0100               	movlb	0	; () banked
  8274  003BE6  90D8               	bcf	status,0,c
  8275  003BE8  0100               	movlb	0	; () banked
  8276  003BEA  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
  8277  003BEC  0100               	movlb	0	; () banked
  8278  003BEE  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  8279  003BF0  0100               	movlb	0	; () banked
  8280  003BF2  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  8281  003BF4  0100               	movlb	0	; () banked
  8282  003BF6  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  8283                           
  8284                           ; BSR set to: 0
  8285  003BF8  0100               	movlb	0	; () banked
  8286  003BFA  90D8               	bcf	status,0,c
  8287  003BFC  0100               	movlb	0	; () banked
  8288  003BFE  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  8289  003C00  0100               	movlb	0	; () banked
  8290  003C02  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  8291  003C04  0100               	movlb	0	; () banked
  8292  003C06  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  8293  003C08  0100               	movlb	0	; () banked
  8294  003C0A  3360               	rrcf	___lmul@multiplier& (0+255),f,b
  8295  003C0C  0100               	movlb	0	; () banked
  8296  003C0E  5163               	movf	(___lmul@multiplier+3)& (0+255),w,b
  8297  003C10  1160               	iorwf	___lmul@multiplier& (0+255),w,b
  8298  003C12  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  8299  003C14  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  8300  003C16  A4D8               	btfss	status,2,c
  8301  003C18  D7D2               	goto	l3724
  8302                           
  8303                           ; BSR set to: 0
  8304  003C1A  C068  F060         	movff	___lmul@product,?___lmul
  8305  003C1E  C069  F061         	movff	___lmul@product+1,?___lmul+1
  8306  003C22  C06A  F062         	movff	___lmul@product+2,?___lmul+2
  8307  003C26  C06B  F063         	movff	___lmul@product+3,?___lmul+3
  8308                           
  8309                           ; BSR set to: 0
  8310  003C2A  0012               	return	
  8311  003C2C                     __end_of___lmul:
  8312                           	opt stack 0
  8313                           tblptru	equ	0xFF8
  8314                           tblptrh	equ	0xFF7
  8315                           tblptrl	equ	0xFF6
  8316                           tablat	equ	0xFF5
  8317                           prodh	equ	0xFF4
  8318                           prodl	equ	0xFF3
  8319                           postinc0	equ	0xFEE
  8320                           wreg	equ	0xFE8
  8321                           indf1	equ	0xFE7
  8322                           postinc1	equ	0xFE6
  8323                           postdec1	equ	0xFE5
  8324                           fsr1h	equ	0xFE2
  8325                           fsr1l	equ	0xFE1
  8326                           indf2	equ	0xFDF
  8327                           postinc2	equ	0xFDE
  8328                           postdec2	equ	0xFDD
  8329                           fsr2h	equ	0xFDA
  8330                           fsr2l	equ	0xFD9
  8331                           status	equ	0xFD8
  8332                           
  8333 ;; *************** function ___lldiv *****************
  8334 ;; Defined at:
  8335 ;;		line 8 in file "/opt/microchip/xc8/v1.33/sources/common/lldiv.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;  dividend        4   12[BANK0 ] unsigned long 
  8338 ;;  divisor         4   16[BANK0 ] unsigned long 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;  quotient        4   20[BANK0 ] unsigned long 
  8341 ;;  counter         1   24[BANK0 ] unsigned char 
  8342 ;; Return value:  Size  Location     Type
  8343 ;;                  4   12[BANK0 ] unsigned long 
  8344 ;; Registers used:
  8345 ;;		wreg, status,2, status,0
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8351 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8355 ;;Total ram usage:       13 bytes
  8356 ;; Hardware stack levels used:    1
  8357 ;; Hardware stack levels required when called:    2
  8358 ;; This function calls:
  8359 ;;		Nothing
  8360 ;; This function is called by:
  8361 ;;		_F32_getBootSectorData
  8362 ;;		_F32_getSetNextCluster
  8363 ;;		_F32_displayMemory
  8364 ;;		_F32_searchNextFreeCluster
  8365 ;;		_F32_writeFile
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           	psect	text21
  8370  003984                     __ptext21:
  8371                           	opt stack 0
  8372  003984                     ___lldiv:
  8373                           	opt stack 27
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;incstack = 0
  8377  003984  0E00               	movlw	0
  8378  003986  0100               	movlb	0	; () banked
  8379  003988  6F74               	movwf	___lldiv@quotient& (0+255),b
  8380  00398A  0E00               	movlw	0
  8381  00398C  0100               	movlb	0	; () banked
  8382  00398E  6F75               	movwf	(___lldiv@quotient+1)& (0+255),b
  8383  003990  0E00               	movlw	0
  8384  003992  0100               	movlb	0	; () banked
  8385  003994  6F76               	movwf	(___lldiv@quotient+2)& (0+255),b
  8386  003996  0E00               	movlw	0
  8387  003998  0100               	movlb	0	; () banked
  8388  00399A  6F77               	movwf	(___lldiv@quotient+3)& (0+255),b
  8389                           
  8390                           ; BSR set to: 0
  8391  00399C  0100               	movlb	0	; () banked
  8392  00399E  5173               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8393  0039A0  1170               	iorwf	___lldiv@divisor& (0+255),w,b
  8394  0039A2  1171               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8395  0039A4  1172               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8396  0039A6  B4D8               	btfsc	status,2,c
  8397  0039A8  D04E               	goto	l950
  8398                           
  8399                           ; BSR set to: 0
  8400  0039AA  0E01               	movlw	1
  8401  0039AC  0100               	movlb	0	; () banked
  8402  0039AE  6F78               	movwf	___lldiv@counter& (0+255),b
  8403  0039B0  D00C               	goto	l3740
  8404  0039B2                     l3738:
  8405                           
  8406                           ; BSR set to: 0
  8407  0039B2  0100               	movlb	0	; () banked
  8408  0039B4  90D8               	bcf	status,0,c
  8409  0039B6  0100               	movlb	0	; () banked
  8410  0039B8  3770               	rlcf	___lldiv@divisor& (0+255),f,b
  8411  0039BA  0100               	movlb	0	; () banked
  8412  0039BC  3771               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8413  0039BE  0100               	movlb	0	; () banked
  8414  0039C0  3772               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8415  0039C2  0100               	movlb	0	; () banked
  8416  0039C4  3773               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8417  0039C6  0100               	movlb	0	; () banked
  8418  0039C8  2B78               	incf	___lldiv@counter& (0+255),f,b
  8419  0039CA                     l3740:
  8420                           
  8421                           ; BSR set to: 0
  8422  0039CA  0100               	movlb	0	; () banked
  8423  0039CC  AF73               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8424  0039CE  D7F1               	goto	l3738
  8425  0039D0                     l3742:
  8426                           
  8427                           ; BSR set to: 0
  8428  0039D0  0100               	movlb	0	; () banked
  8429  0039D2  90D8               	bcf	status,0,c
  8430  0039D4  0100               	movlb	0	; () banked
  8431  0039D6  3774               	rlcf	___lldiv@quotient& (0+255),f,b
  8432  0039D8  0100               	movlb	0	; () banked
  8433  0039DA  3775               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8434  0039DC  0100               	movlb	0	; () banked
  8435  0039DE  3776               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8436  0039E0  0100               	movlb	0	; () banked
  8437  0039E2  3777               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8438                           
  8439                           ; BSR set to: 0
  8440  0039E4  0100               	movlb	0	; () banked
  8441  0039E6  5170               	movf	___lldiv@divisor& (0+255),w,b
  8442  0039E8  0100               	movlb	0	; () banked
  8443  0039EA  5D6C               	subwf	___lldiv@dividend& (0+255),w,b
  8444  0039EC  0100               	movlb	0	; () banked
  8445  0039EE  5171               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8446  0039F0  0100               	movlb	0	; () banked
  8447  0039F2  596D               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8448  0039F4  0100               	movlb	0	; () banked
  8449  0039F6  5172               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8450  0039F8  0100               	movlb	0	; () banked
  8451  0039FA  596E               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8452  0039FC  0100               	movlb	0	; () banked
  8453  0039FE  5173               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8454  003A00  0100               	movlb	0	; () banked
  8455  003A02  596F               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8456  003A04  A0D8               	btfss	status,0,c
  8457  003A06  D012               	goto	l3750
  8458                           
  8459                           ; BSR set to: 0
  8460  003A08  0100               	movlb	0	; () banked
  8461  003A0A  5170               	movf	___lldiv@divisor& (0+255),w,b
  8462  003A0C  0100               	movlb	0	; () banked
  8463  003A0E  5F6C               	subwf	___lldiv@dividend& (0+255),f,b
  8464  003A10  0100               	movlb	0	; () banked
  8465  003A12  5171               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8466  003A14  0100               	movlb	0	; () banked
  8467  003A16  5B6D               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8468  003A18  0100               	movlb	0	; () banked
  8469  003A1A  5172               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8470  003A1C  0100               	movlb	0	; () banked
  8471  003A1E  5B6E               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8472  003A20  0100               	movlb	0	; () banked
  8473  003A22  5173               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8474  003A24  0100               	movlb	0	; () banked
  8475  003A26  5B6F               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8476                           
  8477                           ; BSR set to: 0
  8478  003A28  0100               	movlb	0	; () banked
  8479  003A2A  8174               	bsf	___lldiv@quotient& (0+255),0,b
  8480  003A2C                     l3750:
  8481                           
  8482                           ; BSR set to: 0
  8483  003A2C  0100               	movlb	0	; () banked
  8484  003A2E  90D8               	bcf	status,0,c
  8485  003A30  0100               	movlb	0	; () banked
  8486  003A32  3373               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8487  003A34  0100               	movlb	0	; () banked
  8488  003A36  3372               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8489  003A38  0100               	movlb	0	; () banked
  8490  003A3A  3371               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8491  003A3C  0100               	movlb	0	; () banked
  8492  003A3E  3370               	rrcf	___lldiv@divisor& (0+255),f,b
  8493                           
  8494                           ; BSR set to: 0
  8495  003A40  0100               	movlb	0	; () banked
  8496  003A42  2F78               	decfsz	___lldiv@counter& (0+255),f,b
  8497  003A44  D7C5               	goto	l3742
  8498  003A46                     l950:
  8499                           
  8500                           ; BSR set to: 0
  8501  003A46  C074  F06C         	movff	___lldiv@quotient,?___lldiv
  8502  003A4A  C075  F06D         	movff	___lldiv@quotient+1,?___lldiv+1
  8503  003A4E  C076  F06E         	movff	___lldiv@quotient+2,?___lldiv+2
  8504  003A52  C077  F06F         	movff	___lldiv@quotient+3,?___lldiv+3
  8505                           
  8506                           ; BSR set to: 0
  8507  003A56  0012               	return	
  8508  003A58                     __end_of___lldiv:
  8509                           	opt stack 0
  8510                           tblptru	equ	0xFF8
  8511                           tblptrh	equ	0xFF7
  8512                           tblptrl	equ	0xFF6
  8513                           tablat	equ	0xFF5
  8514                           prodh	equ	0xFF4
  8515                           prodl	equ	0xFF3
  8516                           postinc0	equ	0xFEE
  8517                           wreg	equ	0xFE8
  8518                           indf1	equ	0xFE7
  8519                           postinc1	equ	0xFE6
  8520                           postdec1	equ	0xFE5
  8521                           fsr1h	equ	0xFE2
  8522                           fsr1l	equ	0xFE1
  8523                           indf2	equ	0xFDF
  8524                           postinc2	equ	0xFDE
  8525                           postdec2	equ	0xFDD
  8526                           fsr2h	equ	0xFDA
  8527                           fsr2l	equ	0xFD9
  8528                           status	equ	0xFD8
  8529                           
  8530 ;; *************** function _F32_getSetFreeCluster *****************
  8531 ;; Defined at:
  8532 ;;		line 149 in file "../my_lib.X/rosso_f32.h"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;  totOrNext       1    wreg     unsigned char 
  8535 ;;  get_set         1   21[BANK0 ] unsigned char 
  8536 ;;  FSEntry         4   22[BANK0 ] unsigned long 
  8537 ;; Auto vars:     Size  Location     Type
  8538 ;;  totOrNext       1   30[BANK0 ] unsigned char 
  8539 ;;  FS              2   31[BANK0 ] PTR struct FSInfo_Struct
  8540 ;;		 -> SD_buffer(512), 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  4   21[BANK0 ] unsigned long 
  8543 ;; Registers used:
  8544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8550 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8551 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8552 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8553 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8554 ;;Total ram usage:       12 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    5
  8557 ;; This function calls:
  8558 ;;		_SD_readSingleBlock
  8559 ;;		_SD_writeSingleBlock
  8560 ;; This function is called by:
  8561 ;;		_F32_getBootSectorData
  8562 ;;		_F32_freeMemoryUpdate
  8563 ;;		_F32_findFiles
  8564 ;;		_F32_writeFile
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568                           	psect	text22
  8569  003298                     __ptext22:
  8570                           	opt stack 0
  8571  003298                     _F32_getSetFreeCluster:
  8572                           	opt stack 22
  8573                           
  8574                           ; BSR set to: 0
  8575                           ;incstack = 0
  8576                           ;F32_getSetFreeCluster@totOrNext stored from wreg
  8577  003298  0100               	movlb	0	; () banked
  8578  00329A  6F7E               	movwf	F32_getSetFreeCluster@totOrNext& (0+255),b
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;rosso_f32.h: 152: struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &SD_buffer;
  8582  00329C  0E01               	movlw	high _SD_buffer
  8583  00329E  0100               	movlb	0	; () banked
  8584  0032A0  6F80               	movwf	(F32_getSetFreeCluster@FS+1)& (0+255),b
  8585  0032A2  0EEE               	movlw	low _SD_buffer
  8586  0032A4  0100               	movlb	0	; () banked
  8587  0032A6  6F7F               	movwf	F32_getSetFreeCluster@FS& (0+255),b
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;rosso_f32.h: 154: SD_readSingleBlock(unusedSectors + 1);
  8591  0032A8  0E01               	movlw	1
  8592  0032AA  2433               	addwf	_unusedSectors,w,c
  8593  0032AC  0100               	movlb	0	; () banked
  8594  0032AE  6F6C               	movwf	SD_readSingleBlock@SD_startBlock& (0+255),b
  8595  0032B0  0E00               	movlw	0
  8596  0032B2  2034               	addwfc	_unusedSectors+1,w,c
  8597  0032B4  0100               	movlb	0	; () banked
  8598  0032B6  6F6D               	movwf	(SD_readSingleBlock@SD_startBlock+1)& (0+255),b
  8599  0032B8  0E00               	movlw	0
  8600  0032BA  2035               	addwfc	_unusedSectors+2,w,c
  8601  0032BC  0100               	movlb	0	; () banked
  8602  0032BE  6F6E               	movwf	(SD_readSingleBlock@SD_startBlock+2)& (0+255),b
  8603  0032C0  0E00               	movlw	0
  8604  0032C2  2036               	addwfc	_unusedSectors+3,w,c
  8605  0032C4  0100               	movlb	0	; () banked
  8606  0032C6  6F6F               	movwf	(SD_readSingleBlock@SD_startBlock+3)& (0+255),b
  8607  0032C8  EC2C  F01D         	call	_SD_readSingleBlock	;wreg free
  8608                           
  8609                           ;rosso_f32.h: 156: if ((FS->leadSignature != 0x41615252)
  8610                           ;rosso_f32.h: 157: || (FS->structureSignature != 0x61417272)
  8611                           ;rosso_f32.h: 158: || (FS->trailSignature != 0xaa550000))
  8612  0032CC  C07F  FFD9         	movff	F32_getSetFreeCluster@FS,fsr2l
  8613  0032D0  C080  FFDA         	movff	F32_getSetFreeCluster@FS+1,fsr2h
  8614  0032D4  CFDE F07A          	movff	postinc2,??_F32_getSetFreeCluster
  8615  0032D8  CFDE F07B          	movff	postinc2,??_F32_getSetFreeCluster+1
  8616  0032DC  CFDE F07C          	movff	postinc2,??_F32_getSetFreeCluster+2
  8617  0032E0  CFDE F07D          	movff	postinc2,??_F32_getSetFreeCluster+3
  8618  0032E4  0100               	movlb	0	; () banked
  8619  0032E6  517D               	movf	(??_F32_getSetFreeCluster+3)& (0+255),w,b
  8620  0032E8  0A41               	xorlw	65
  8621  0032EA  0E52               	movlw	82
  8622  0032EC  B4D8               	btfsc	status,2,c
  8623  0032EE  197A               	xorwf	??_F32_getSetFreeCluster& (0+255),w,b
  8624  0032F0  0E52               	movlw	82
  8625  0032F2  B4D8               	btfsc	status,2,c
  8626  0032F4  197B               	xorwf	(??_F32_getSetFreeCluster+1)& (0+255),w,b
  8627  0032F6  0E61               	movlw	97
  8628  0032F8  B4D8               	btfsc	status,2,c
  8629  0032FA  197C               	xorwf	(??_F32_getSetFreeCluster+2)& (0+255),w,b
  8630  0032FC  A4D8               	btfss	status,2,c
  8631  0032FE  D03A               	goto	l260
  8632                           
  8633                           ; BSR set to: 0
  8634  003300  0100               	movlb	0	; () banked
  8635  003302  EE21 F0E4          	lfsr	2,484
  8636  003306  0100               	movlb	0	; () banked
  8637  003308  517F               	movf	F32_getSetFreeCluster@FS& (0+255),w,b
  8638  00330A  26D9               	addwf	fsr2l,f,c
  8639  00330C  0100               	movlb	0	; () banked
  8640  00330E  5180               	movf	(F32_getSetFreeCluster@FS+1)& (0+255),w,b
  8641  003310  22DA               	addwfc	fsr2h,f,c
  8642  003312  CFDE F07A          	movff	postinc2,??_F32_getSetFreeCluster
  8643  003316  CFDE F07B          	movff	postinc2,??_F32_getSetFreeCluster+1
  8644  00331A  CFDE F07C          	movff	postinc2,??_F32_getSetFreeCluster+2
  8645  00331E  CFDE F07D          	movff	postinc2,??_F32_getSetFreeCluster+3
  8646  003322  0100               	movlb	0	; () banked
  8647  003324  517D               	movf	(??_F32_getSetFreeCluster+3)& (0+255),w,b
  8648  003326  0A61               	xorlw	97
  8649  003328  0E72               	movlw	114
  8650  00332A  B4D8               	btfsc	status,2,c
  8651  00332C  197A               	xorwf	??_F32_getSetFreeCluster& (0+255),w,b
  8652  00332E  0E72               	movlw	114
  8653  003330  B4D8               	btfsc	status,2,c
  8654  003332  197B               	xorwf	(??_F32_getSetFreeCluster+1)& (0+255),w,b
  8655  003334  0E41               	movlw	65
  8656  003336  B4D8               	btfsc	status,2,c
  8657  003338  197C               	xorwf	(??_F32_getSetFreeCluster+2)& (0+255),w,b
  8658  00333A  A4D8               	btfss	status,2,c
  8659  00333C  D01B               	goto	l260
  8660                           
  8661                           ; BSR set to: 0
  8662  00333E  0100               	movlb	0	; () banked
  8663  003340  EE21 F0FC          	lfsr	2,508
  8664  003344  0100               	movlb	0	; () banked
  8665  003346  517F               	movf	F32_getSetFreeCluster@FS& (0+255),w,b
  8666  003348  26D9               	addwf	fsr2l,f,c
  8667  00334A  0100               	movlb	0	; () banked
  8668  00334C  5180               	movf	(F32_getSetFreeCluster@FS+1)& (0+255),w,b
  8669  00334E  22DA               	addwfc	fsr2h,f,c
  8670  003350  CFDE F07A          	movff	postinc2,??_F32_getSetFreeCluster
  8671  003354  CFDE F07B          	movff	postinc2,??_F32_getSetFreeCluster+1
  8672  003358  CFDE F07C          	movff	postinc2,??_F32_getSetFreeCluster+2
  8673  00335C  CFDE F07D          	movff	postinc2,??_F32_getSetFreeCluster+3
  8674  003360  0100               	movlb	0	; () banked
  8675  003362  517D               	movf	(??_F32_getSetFreeCluster+3)& (0+255),w,b
  8676  003364  0AAA               	xorlw	170
  8677  003366  0E55               	movlw	85
  8678  003368  B4D8               	btfsc	status,2,c
  8679  00336A  197C               	xorwf	(??_F32_getSetFreeCluster+2)& (0+255),w,b
  8680  00336C  117A               	iorwf	??_F32_getSetFreeCluster& (0+255),w,b
  8681  00336E  117B               	iorwf	(??_F32_getSetFreeCluster+1)& (0+255),w,b
  8682  003370  B4D8               	btfsc	status,2,c
  8683  003372  D009               	goto	l258
  8684  003374                     l260:
  8685                           
  8686                           ; BSR set to: 0
  8687                           ;rosso_f32.h: 159: return 0xffffffff;
  8688  003374  0100               	movlb	0	; () banked
  8689  003376  6975               	setf	?_F32_getSetFreeCluster& (0+255),b
  8690  003378  0100               	movlb	0	; () banked
  8691  00337A  6976               	setf	(?_F32_getSetFreeCluster+1)& (0+255),b
  8692  00337C  0100               	movlb	0	; () banked
  8693  00337E  6977               	setf	(?_F32_getSetFreeCluster+2)& (0+255),b
  8694  003380  0100               	movlb	0	; () banked
  8695  003382  6978               	setf	(?_F32_getSetFreeCluster+3)& (0+255),b
  8696  003384  0012               	return	
  8697  003386                     l258:
  8698                           
  8699                           ; BSR set to: 0
  8700                           ;rosso_f32.h: 161: if (get_set == 0) {
  8701  003386  0100               	movlb	0	; () banked
  8702  003388  6775               	tstfsz	F32_getSetFreeCluster@get_set& (0+255),b
  8703  00338A  D030               	goto	l3710
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;rosso_f32.h: 162: if (totOrNext == 1)
  8707  00338C  0100               	movlb	0	; () banked
  8708  00338E  057E               	decf	F32_getSetFreeCluster@totOrNext& (0+255),w,b
  8709  003390  A4D8               	btfss	status,2,c
  8710  003392  D016               	goto	l3706
  8711                           
  8712                           ; BSR set to: 0
  8713                           ;rosso_f32.h: 163: return (FS->freeClusterCount);
  8714  003394  0100               	movlb	0	; () banked
  8715  003396  EE21 F0E8          	lfsr	2,488
  8716  00339A  0100               	movlb	0	; () banked
  8717  00339C  517F               	movf	F32_getSetFreeCluster@FS& (0+255),w,b
  8718  00339E  26D9               	addwf	fsr2l,f,c
  8719  0033A0  0100               	movlb	0	; () banked
  8720  0033A2  5180               	movf	(F32_getSetFreeCluster@FS+1)& (0+255),w,b
  8721  0033A4  22DA               	addwfc	fsr2h,f,c
  8722  0033A6  0100               	movlb	0	; () banked
  8723  0033A8  CFDE F075          	movff	postinc2,?_F32_getSetFreeCluster
  8724  0033AC  0100               	movlb	0	; () banked
  8725  0033AE  CFDE F076          	movff	postinc2,?_F32_getSetFreeCluster+1
  8726  0033B2  0100               	movlb	0	; () banked
  8727  0033B4  CFDE F077          	movff	postinc2,?_F32_getSetFreeCluster+2
  8728  0033B8  0100               	movlb	0	; () banked
  8729  0033BA  CFDE F078          	movff	postinc2,?_F32_getSetFreeCluster+3
  8730  0033BE  0012               	return	
  8731  0033C0                     l3706:
  8732                           
  8733                           ; BSR set to: 0
  8734                           ;rosso_f32.h: 164: else
  8735                           ;rosso_f32.h: 166: return (FS->nextFreeCluster);
  8736  0033C0  0100               	movlb	0	; () banked
  8737  0033C2  EE21 F0EC          	lfsr	2,492
  8738  0033C6  0100               	movlb	0	; () banked
  8739  0033C8  517F               	movf	F32_getSetFreeCluster@FS& (0+255),w,b
  8740  0033CA  26D9               	addwf	fsr2l,f,c
  8741  0033CC  0100               	movlb	0	; () banked
  8742  0033CE  5180               	movf	(F32_getSetFreeCluster@FS+1)& (0+255),w,b
  8743  0033D0  22DA               	addwfc	fsr2h,f,c
  8744  0033D2  0100               	movlb	0	; () banked
  8745  0033D4  CFDE F075          	movff	postinc2,?_F32_getSetFreeCluster
  8746  0033D8  0100               	movlb	0	; () banked
  8747  0033DA  CFDE F076          	movff	postinc2,?_F32_getSetFreeCluster+1
  8748  0033DE  0100               	movlb	0	; () banked
  8749  0033E0  CFDE F077          	movff	postinc2,?_F32_getSetFreeCluster+2
  8750  0033E4  0100               	movlb	0	; () banked
  8751  0033E6  CFDE F078          	movff	postinc2,?_F32_getSetFreeCluster+3
  8752  0033EA  0012               	return	
  8753  0033EC                     l3710:
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;rosso_f32.h: 168: if (totOrNext == 1)
  8757  0033EC  0100               	movlb	0	; () banked
  8758  0033EE  057E               	decf	F32_getSetFreeCluster@totOrNext& (0+255),w,b
  8759  0033F0  A4D8               	btfss	status,2,c
  8760  0033F2  D004               	goto	l3714
  8761                           
  8762                           ; BSR set to: 0
  8763                           ;rosso_f32.h: 169: FS->freeClusterCount = FSEntry;
  8764  0033F4  0100               	movlb	0	; () banked
  8765  0033F6  EE21 F0E8          	lfsr	2,488
  8766  0033FA  D003               	goto	L14
  8767  0033FC                     l3714:
  8768                           
  8769                           ; BSR set to: 0
  8770                           ;rosso_f32.h: 170: else
  8771                           ;rosso_f32.h: 172: FS->nextFreeCluster = FSEntry;
  8772  0033FC  0100               	movlb	0	; () banked
  8773  0033FE  EE21 F0EC          	lfsr	2,492
  8774  003402                     L14:
  8775  003402  0100               	movlb	0	; () banked
  8776  003404  517F               	movf	F32_getSetFreeCluster@FS& (0+255),w,b
  8777  003406  26D9               	addwf	fsr2l,f,c
  8778  003408  0100               	movlb	0	; () banked
  8779  00340A  5180               	movf	(F32_getSetFreeCluster@FS+1)& (0+255),w,b
  8780  00340C  22DA               	addwfc	fsr2h,f,c
  8781  00340E  0100               	movlb	0	; () banked
  8782  003410  C076  FFDE         	movff	F32_getSetFreeCluster@FSEntry,postinc2
  8783  003414  0100               	movlb	0	; () banked
  8784  003416  C077  FFDE         	movff	F32_getSetFreeCluster@FSEntry+1,postinc2
  8785  00341A  0100               	movlb	0	; () banked
  8786  00341C  C078  FFDE         	movff	F32_getSetFreeCluster@FSEntry+2,postinc2
  8787  003420  0100               	movlb	0	; () banked
  8788  003422  C079  FFDE         	movff	F32_getSetFreeCluster@FSEntry+3,postinc2
  8789                           
  8790                           ; BSR set to: 0
  8791                           ;rosso_f32.h: 174: SD_writeSingleBlock(unusedSectors + 1);
  8792                           
  8793                           ; BSR set to: 0
  8794  003426  0E01               	movlw	1
  8795  003428  2433               	addwf	_unusedSectors,w,c
  8796  00342A  0100               	movlb	0	; () banked
  8797  00342C  6F6C               	movwf	SD_writeSingleBlock@SD_startBlock& (0+255),b
  8798  00342E  0E00               	movlw	0
  8799  003430  2034               	addwfc	_unusedSectors+1,w,c
  8800  003432  0100               	movlb	0	; () banked
  8801  003434  6F6D               	movwf	(SD_writeSingleBlock@SD_startBlock+1)& (0+255),b
  8802  003436  0E00               	movlw	0
  8803  003438  2035               	addwfc	_unusedSectors+2,w,c
  8804  00343A  0100               	movlb	0	; () banked
  8805  00343C  6F6E               	movwf	(SD_writeSingleBlock@SD_startBlock+2)& (0+255),b
  8806  00343E  0E00               	movlw	0
  8807  003440  2036               	addwfc	_unusedSectors+3,w,c
  8808  003442  0100               	movlb	0	; () banked
  8809  003444  6F6F               	movwf	(SD_writeSingleBlock@SD_startBlock+3)& (0+255),b
  8810  003446  EC48  F01C         	call	_SD_writeSingleBlock	;wreg free
  8811                           
  8812                           ;rosso_f32.h: 175: }
  8813                           ;rosso_f32.h: 176: return 0xffffffff;
  8814  00344A  0100               	movlb	0	; () banked
  8815  00344C  6975               	setf	?_F32_getSetFreeCluster& (0+255),b
  8816  00344E  0100               	movlb	0	; () banked
  8817  003450  6976               	setf	(?_F32_getSetFreeCluster+1)& (0+255),b
  8818  003452  0100               	movlb	0	; () banked
  8819  003454  6977               	setf	(?_F32_getSetFreeCluster+2)& (0+255),b
  8820  003456  0100               	movlb	0	; () banked
  8821  003458  6978               	setf	(?_F32_getSetFreeCluster+3)& (0+255),b
  8822  00345A  0012               	return	
  8823  00345C                     __end_of_F32_getSetFreeCluster:
  8824                           	opt stack 0
  8825                           tblptru	equ	0xFF8
  8826                           tblptrh	equ	0xFF7
  8827                           tblptrl	equ	0xFF6
  8828                           tablat	equ	0xFF5
  8829                           prodh	equ	0xFF4
  8830                           prodl	equ	0xFF3
  8831                           postinc0	equ	0xFEE
  8832                           wreg	equ	0xFE8
  8833                           indf1	equ	0xFE7
  8834                           postinc1	equ	0xFE6
  8835                           postdec1	equ	0xFE5
  8836                           fsr1h	equ	0xFE2
  8837                           fsr1l	equ	0xFE1
  8838                           indf2	equ	0xFDF
  8839                           postinc2	equ	0xFDE
  8840                           postdec2	equ	0xFDD
  8841                           fsr2h	equ	0xFDA
  8842                           fsr2l	equ	0xFD9
  8843                           status	equ	0xFD8
  8844                           
  8845 ;; *************** function _SD_writeSingleBlock *****************
  8846 ;; Defined at:
  8847 ;;		line 249 in file "../my_lib.X/rosso_sdcard.h"
  8848 ;; Parameters:    Size  Location     Type
  8849 ;;  SD_startBloc    4   12[BANK0 ] unsigned long 
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;  i               2   18[BANK0 ] unsigned short 
  8852 ;;  retry           2   16[BANK0 ] unsigned short 
  8853 ;;  response        1   20[BANK0 ] unsigned char 
  8854 ;; Return value:  Size  Location     Type
  8855 ;;                  1    wreg      unsigned char 
  8856 ;; Registers used:
  8857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8863 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8864 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8865 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8866 ;;      Totals:         1       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8867 ;;Total ram usage:       10 bytes
  8868 ;; Hardware stack levels used:    1
  8869 ;; Hardware stack levels required when called:    4
  8870 ;; This function calls:
  8871 ;;		_SD_sendCommand
  8872 ;;		_SPI2_read
  8873 ;;		_SPI2_write
  8874 ;; This function is called by:
  8875 ;;		_F32_getSetFreeCluster
  8876 ;;		_F32_getSetNextCluster
  8877 ;;		_F32_findFiles
  8878 ;;		_F32_writeFile
  8879 ;; This function uses a non-reentrant model
  8880 ;;
  8881                           
  8882                           	psect	text23
  8883  003890                     __ptext23:
  8884                           	opt stack 0
  8885  003890                     _SD_writeSingleBlock:
  8886                           	opt stack 25
  8887                           
  8888                           ;rosso_sdcard.h: 250: UINT8 response;
  8889                           ;rosso_sdcard.h: 251: UINT16 i, retry = 0;
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;incstack = 0
  8893  003890  0E00               	movlw	0
  8894  003892  0100               	movlb	0	; () banked
  8895  003894  6F71               	movwf	(SD_writeSingleBlock@retry+1)& (0+255),b
  8896  003896  0E00               	movlw	0
  8897  003898  0100               	movlb	0	; () banked
  8898  00389A  6F70               	movwf	SD_writeSingleBlock@retry& (0+255),b
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;rosso_sdcard.h: 253: response = SD_sendCommand(24, SD_startBlock);
  8902  00389C  C06C  F060         	movff	SD_writeSingleBlock@SD_startBlock,SD_sendCommand@arg
  8903  0038A0  C06D  F061         	movff	SD_writeSingleBlock@SD_startBlock+1,SD_sendCommand@arg+1
  8904  0038A4  C06E  F062         	movff	SD_writeSingleBlock@SD_startBlock+2,SD_sendCommand@arg+2
  8905  0038A8  C06F  F063         	movff	SD_writeSingleBlock@SD_startBlock+3,SD_sendCommand@arg+3
  8906  0038AC  0E18               	movlw	24
  8907  0038AE  ECB6  F01B         	call	_SD_sendCommand
  8908  0038B2  0100               	movlb	0	; () banked
  8909  0038B4  6F74               	movwf	SD_writeSingleBlock@response& (0+255),b
  8910                           
  8911                           ; BSR set to: 0
  8912                           ;rosso_sdcard.h: 255: if (response != 0x00)
  8913  0038B6  0100               	movlb	0	; () banked
  8914  0038B8  5174               	movf	SD_writeSingleBlock@response& (0+255),w,b
  8915  0038BA  B4D8               	btfsc	status,2,c
  8916  0038BC  D003               	goto	l207
  8917                           
  8918                           ; BSR set to: 0
  8919                           ;rosso_sdcard.h: 256: return response;
  8920  0038BE  0100               	movlb	0	; () banked
  8921  0038C0  5174               	movf	SD_writeSingleBlock@response& (0+255),w,b
  8922  0038C2  0012               	return	
  8923  0038C4                     l207:
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;rosso_sdcard.h: 257: {LATBbits.LATB0=0;};
  8927  0038C4  908A               	bcf	3978,0,c	;volatile
  8928                           
  8929                           ; BSR set to: 0
  8930                           ;rosso_sdcard.h: 259: SPI2_write(0xfe);
  8931  0038C6  0EFE               	movlw	254
  8932  0038C8  EC36  F01F         	call	_SPI2_write
  8933                           
  8934                           ;rosso_sdcard.h: 261: for (i = 0; i < 512; i++)
  8935  0038CC  0E00               	movlw	0
  8936  0038CE  0100               	movlb	0	; () banked
  8937  0038D0  6F73               	movwf	(SD_writeSingleBlock@i+1)& (0+255),b
  8938  0038D2  0E00               	movlw	0
  8939  0038D4  0100               	movlb	0	; () banked
  8940  0038D6  6F72               	movwf	SD_writeSingleBlock@i& (0+255),b
  8941  0038D8                     
  8942                           ; BSR set to: 0
  8943  0038D8  0E00               	movlw	0
  8944  0038DA  0100               	movlb	0	; () banked
  8945  0038DC  5D72               	subwf	SD_writeSingleBlock@i& (0+255),w,b
  8946  0038DE  0E02               	movlw	2
  8947  0038E0  0100               	movlb	0	; () banked
  8948  0038E2  5973               	subwfb	(SD_writeSingleBlock@i+1)& (0+255),w,b
  8949  0038E4  B0D8               	btfsc	status,0,c
  8950  0038E6  D00F               	goto	l3648
  8951                           
  8952                           ; BSR set to: 0
  8953                           ;rosso_sdcard.h: 262: SPI2_write(SD_buffer[i]);
  8954                           
  8955                           ; BSR set to: 0
  8956                           
  8957                           ; BSR set to: 0
  8958  0038E8  0EEE               	movlw	low _SD_buffer
  8959  0038EA  0100               	movlb	0	; () banked
  8960  0038EC  2572               	addwf	SD_writeSingleBlock@i& (0+255),w,b
  8961  0038EE  6ED9               	movwf	fsr2l,c
  8962  0038F0  0E01               	movlw	high _SD_buffer
  8963  0038F2  0100               	movlb	0	; () banked
  8964  0038F4  2173               	addwfc	(SD_writeSingleBlock@i+1)& (0+255),w,b
  8965  0038F6  6EDA               	movwf	fsr2h,c
  8966  0038F8  50DF               	movf	indf2,w,c
  8967  0038FA  EC36  F01F         	call	_SPI2_write
  8968  0038FE  0100               	movlb	0	; () banked
  8969  003900  4B72               	infsnz	SD_writeSingleBlock@i& (0+255),f,b
  8970  003902  2B73               	incf	(SD_writeSingleBlock@i+1)& (0+255),f,b
  8971  003904  D7E9               	goto	L15
  8972  003906                     l3648:
  8973                           
  8974                           ; BSR set to: 0
  8975                           ;rosso_sdcard.h: 264: SPI2_write(0xff);
  8976  003906  0EFF               	movlw	255
  8977  003908  EC36  F01F         	call	_SPI2_write
  8978                           
  8979                           ;rosso_sdcard.h: 265: SPI2_write(0xff);
  8980  00390C  0EFF               	movlw	255
  8981  00390E  EC36  F01F         	call	_SPI2_write
  8982                           
  8983                           ;rosso_sdcard.h: 267: response = SPI2_read();
  8984  003912  EC4D  F01F         	call	_SPI2_read	;wreg free
  8985  003916  0100               	movlb	0	; () banked
  8986  003918  6F74               	movwf	SD_writeSingleBlock@response& (0+255),b
  8987                           
  8988                           ; BSR set to: 0
  8989                           ;rosso_sdcard.h: 269: if ((response & 0x1f) != 0x05)
  8990  00391A  C074  F022         	movff	SD_writeSingleBlock@response,??_SD_writeSingleBlock
  8991  00391E  0E1F               	movlw	31
  8992  003920  1622               	andwf	??_SD_writeSingleBlock,f,c
  8993  003922  5022               	movf	??_SD_writeSingleBlock,w,c
  8994  003924  0A05               	xorlw	5
  8995  003926  B4D8               	btfsc	status,2,c
  8996  003928  D00F               	goto	l3668
  8997                           
  8998                           ; BSR set to: 0
  8999                           ;rosso_sdcard.h: 270: {
  9000                           ;rosso_sdcard.h: 271: {LATBbits.LATB0=1;};
  9001  00392A  808A               	bsf	3978,0,c	;volatile
  9002                           
  9003                           ; BSR set to: 0
  9004                           ;rosso_sdcard.h: 272: return response;
  9005  00392C  0100               	movlb	0	; () banked
  9006  00392E  5174               	movf	SD_writeSingleBlock@response& (0+255),w,b
  9007  003930  0012               	return	
  9008  003932                     l3660:
  9009                           
  9010                           ;rosso_sdcard.h: 276: if (retry++ > 0xfffe) {
  9011  003932  0100               	movlb	0	; () banked
  9012  003934  4B70               	infsnz	SD_writeSingleBlock@retry& (0+255),f,b
  9013  003936  2B71               	incf	(SD_writeSingleBlock@retry+1)& (0+255),f,b
  9014  003938  0100               	movlb	0	; () banked
  9015  00393A  5171               	movf	(SD_writeSingleBlock@retry+1)& (0+255),w,b
  9016  00393C  1170               	iorwf	SD_writeSingleBlock@retry& (0+255),w,b
  9017  00393E  A4D8               	btfss	status,2,c
  9018  003940  D003               	goto	l3668
  9019                           
  9020                           ; BSR set to: 0
  9021                           ;rosso_sdcard.h: 277: {LATBbits.LATB0=1;};
  9022  003942  808A               	bsf	3978,0,c	;volatile
  9023                           
  9024                           ; BSR set to: 0
  9025                           ;rosso_sdcard.h: 278: return 1;
  9026  003944  0E01               	movlw	1
  9027  003946  0012               	return	
  9028  003948                     l3668:
  9029                           
  9030                           ; BSR set to: 0
  9031  003948  EC4D  F01F         	call	_SPI2_read	;wreg free
  9032  00394C  0900               	iorlw	0
  9033  00394E  B4D8               	btfsc	status,2,c
  9034  003950  D7F0               	goto	l3660
  9035                           
  9036                           ;rosso_sdcard.h: 279: }
  9037                           ;rosso_sdcard.h: 281: {LATBbits.LATB0=1;};
  9038  003952  808A               	bsf	3978,0,c	;volatile
  9039                           
  9040                           ;rosso_sdcard.h: 282: SPI2_write(0xff);
  9041  003954  0EFF               	movlw	255
  9042  003956  EC36  F01F         	call	_SPI2_write
  9043                           
  9044                           ;rosso_sdcard.h: 283: {LATBbits.LATB0=0;};
  9045  00395A  908A               	bcf	3978,0,c	;volatile
  9046                           
  9047                           ;rosso_sdcard.h: 285: while (!SPI2_read())
  9048  00395C  D00B               	goto	l3682
  9049  00395E                     l3674:
  9050                           
  9051                           ;rosso_sdcard.h: 286: if (retry++ > 0xfffe) {
  9052  00395E  0100               	movlb	0	; () banked
  9053  003960  4B70               	infsnz	SD_writeSingleBlock@retry& (0+255),f,b
  9054  003962  2B71               	incf	(SD_writeSingleBlock@retry+1)& (0+255),f,b
  9055  003964  0100               	movlb	0	; () banked
  9056  003966  5171               	movf	(SD_writeSingleBlock@retry+1)& (0+255),w,b
  9057  003968  1170               	iorwf	SD_writeSingleBlock@retry& (0+255),w,b
  9058  00396A  A4D8               	btfss	status,2,c
  9059  00396C  D003               	goto	l3682
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;rosso_sdcard.h: 287: {LATBbits.LATB0=1;};
  9063  00396E  808A               	bsf	3978,0,c	;volatile
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;rosso_sdcard.h: 288: return 1;
  9067  003970  0E01               	movlw	1
  9068  003972  0012               	return	
  9069  003974                     l3682:
  9070  003974  EC4D  F01F         	call	_SPI2_read	;wreg free
  9071  003978  0900               	iorlw	0
  9072  00397A  B4D8               	btfsc	status,2,c
  9073  00397C  D7F0               	goto	l3674
  9074                           
  9075                           ;rosso_sdcard.h: 289: }
  9076                           ;rosso_sdcard.h: 290: {LATBbits.LATB0=1;};
  9077  00397E  808A               	bsf	3978,0,c	;volatile
  9078                           
  9079                           ;rosso_sdcard.h: 292: return 0;
  9080  003980  0E00               	movlw	0
  9081  003982  0012               	return	
  9082  003984                     __end_of_SD_writeSingleBlock:
  9083                           	opt stack 0
  9084                           tblptru	equ	0xFF8
  9085                           tblptrh	equ	0xFF7
  9086                           tblptrl	equ	0xFF6
  9087                           tablat	equ	0xFF5
  9088                           prodh	equ	0xFF4
  9089                           prodl	equ	0xFF3
  9090                           postinc0	equ	0xFEE
  9091                           wreg	equ	0xFE8
  9092                           indf1	equ	0xFE7
  9093                           postinc1	equ	0xFE6
  9094                           postdec1	equ	0xFE5
  9095                           fsr1h	equ	0xFE2
  9096                           fsr1l	equ	0xFE1
  9097                           indf2	equ	0xFDF
  9098                           postinc2	equ	0xFDE
  9099                           postdec2	equ	0xFDD
  9100                           fsr2h	equ	0xFDA
  9101                           fsr2l	equ	0xFD9
  9102                           status	equ	0xFD8
  9103                           
  9104 ;; *************** function _SD_readSingleBlock *****************
  9105 ;; Defined at:
  9106 ;;		line 219 in file "../my_lib.X/rosso_sdcard.h"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;  SD_startBloc    4   12[BANK0 ] unsigned long 
  9109 ;; Auto vars:     Size  Location     Type
  9110 ;;  i               2   19[BANK0 ] unsigned short 
  9111 ;;  retry           2   16[BANK0 ] unsigned short 
  9112 ;;  response        1   18[BANK0 ] unsigned char 
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  1    wreg      unsigned char 
  9115 ;; Registers used:
  9116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9122 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9125 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;Total ram usage:        9 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:    4
  9129 ;; This function calls:
  9130 ;;		_SD_sendCommand
  9131 ;;		_SPI2_read
  9132 ;; This function is called by:
  9133 ;;		_F32_getSetFreeCluster
  9134 ;;		_F32_getBootSectorData
  9135 ;;		_F32_getSetNextCluster
  9136 ;;		_F32_findFiles
  9137 ;;		_F32_readFile
  9138 ;;		_F32_searchNextFreeCluster
  9139 ;;		_F32_writeFile
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           	psect	text24
  9144  003A58                     __ptext24:
  9145                           	opt stack 0
  9146  003A58                     _SD_readSingleBlock:
  9147                           	opt stack 25
  9148                           
  9149                           ;rosso_sdcard.h: 220: UINT8 response;
  9150                           ;rosso_sdcard.h: 221: UINT16 i, retry = 0;
  9151                           
  9152                           ;incstack = 0
  9153  003A58  0E00               	movlw	0
  9154  003A5A  0100               	movlb	0	; () banked
  9155  003A5C  6F71               	movwf	(SD_readSingleBlock@retry+1)& (0+255),b
  9156  003A5E  0E00               	movlw	0
  9157  003A60  0100               	movlb	0	; () banked
  9158  003A62  6F70               	movwf	SD_readSingleBlock@retry& (0+255),b
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;rosso_sdcard.h: 223: response = SD_sendCommand(17, SD_startBlock);
  9162  003A64  C06C  F060         	movff	SD_readSingleBlock@SD_startBlock,SD_sendCommand@arg
  9163  003A68  C06D  F061         	movff	SD_readSingleBlock@SD_startBlock+1,SD_sendCommand@arg+1
  9164  003A6C  C06E  F062         	movff	SD_readSingleBlock@SD_startBlock+2,SD_sendCommand@arg+2
  9165  003A70  C06F  F063         	movff	SD_readSingleBlock@SD_startBlock+3,SD_sendCommand@arg+3
  9166  003A74  0E11               	movlw	17
  9167  003A76  ECB6  F01B         	call	_SD_sendCommand
  9168  003A7A  0100               	movlb	0	; () banked
  9169  003A7C  6F72               	movwf	SD_readSingleBlock@response& (0+255),b
  9170                           
  9171                           ; BSR set to: 0
  9172                           ;rosso_sdcard.h: 225: if (response != 0x00)
  9173  003A7E  0100               	movlb	0	; () banked
  9174  003A80  5172               	movf	SD_readSingleBlock@response& (0+255),w,b
  9175  003A82  B4D8               	btfsc	status,2,c
  9176  003A84  D003               	goto	l197
  9177                           
  9178                           ; BSR set to: 0
  9179                           ;rosso_sdcard.h: 226: return response;
  9180  003A86  0100               	movlb	0	; () banked
  9181  003A88  5172               	movf	SD_readSingleBlock@response& (0+255),w,b
  9182  003A8A  0012               	return	
  9183  003A8C                     l197:
  9184                           
  9185                           ; BSR set to: 0
  9186                           ;rosso_sdcard.h: 228: {LATBbits.LATB0=0;};
  9187  003A8C  908A               	bcf	3978,0,c	;volatile
  9188                           
  9189                           ; BSR set to: 0
  9190                           ;rosso_sdcard.h: 230: retry = 0;
  9191  003A8E  0E00               	movlw	0
  9192  003A90  0100               	movlb	0	; () banked
  9193  003A92  6F71               	movwf	(SD_readSingleBlock@retry+1)& (0+255),b
  9194  003A94  0E00               	movlw	0
  9195  003A96  0100               	movlb	0	; () banked
  9196  003A98  6F70               	movwf	SD_readSingleBlock@retry& (0+255),b
  9197                           
  9198                           ;rosso_sdcard.h: 231: while (SPI2_read() != 0xfe)
  9199  003A9A  D00B               	goto	l3602
  9200  003A9C                     l3594:
  9201                           
  9202                           ;rosso_sdcard.h: 232: if (retry++ > 0xfffe) {
  9203  003A9C  0100               	movlb	0	; () banked
  9204  003A9E  4B70               	infsnz	SD_readSingleBlock@retry& (0+255),f,b
  9205  003AA0  2B71               	incf	(SD_readSingleBlock@retry+1)& (0+255),f,b
  9206  003AA2  0100               	movlb	0	; () banked
  9207  003AA4  5171               	movf	(SD_readSingleBlock@retry+1)& (0+255),w,b
  9208  003AA6  1170               	iorwf	SD_readSingleBlock@retry& (0+255),w,b
  9209  003AA8  A4D8               	btfss	status,2,c
  9210  003AAA  D003               	goto	l3602
  9211                           
  9212                           ; BSR set to: 0
  9213                           ;rosso_sdcard.h: 233: {LATBbits.LATB0=1;};
  9214  003AAC  808A               	bsf	3978,0,c	;volatile
  9215                           
  9216                           ; BSR set to: 0
  9217                           ;rosso_sdcard.h: 234: return 1;
  9218  003AAE  0E01               	movlw	1
  9219  003AB0  0012               	return	
  9220  003AB2                     l3602:
  9221                           
  9222                           ; BSR set to: 0
  9223  003AB2  EC4D  F01F         	call	_SPI2_read	;wreg free
  9224  003AB6  0AFE               	xorlw	254
  9225  003AB8  A4D8               	btfss	status,2,c
  9226  003ABA  D7F0               	goto	l3594
  9227                           
  9228                           ;rosso_sdcard.h: 235: }
  9229                           ;rosso_sdcard.h: 237: for (i = 0; i < 512; i++)
  9230  003ABC  0E00               	movlw	0
  9231  003ABE  0100               	movlb	0	; () banked
  9232  003AC0  6F74               	movwf	(SD_readSingleBlock@i+1)& (0+255),b
  9233  003AC2  0E00               	movlw	0
  9234  003AC4  0100               	movlb	0	; () banked
  9235  003AC6  6F73               	movwf	SD_readSingleBlock@i& (0+255),b
  9236  003AC8                     
  9237                           ; BSR set to: 0
  9238  003AC8  0E00               	movlw	0
  9239  003ACA  0100               	movlb	0	; () banked
  9240  003ACC  5D73               	subwf	SD_readSingleBlock@i& (0+255),w,b
  9241  003ACE  0E02               	movlw	2
  9242  003AD0  0100               	movlb	0	; () banked
  9243  003AD2  5974               	subwfb	(SD_readSingleBlock@i+1)& (0+255),w,b
  9244  003AD4  B0D8               	btfsc	status,0,c
  9245  003AD6  D00F               	goto	l3616
  9246                           
  9247                           ; BSR set to: 0
  9248                           ;rosso_sdcard.h: 238: SD_buffer[i] = SPI2_read();
  9249                           
  9250                           ; BSR set to: 0
  9251                           
  9252                           ; BSR set to: 0
  9253  003AD8  0EEE               	movlw	low _SD_buffer
  9254  003ADA  0100               	movlb	0	; () banked
  9255  003ADC  2573               	addwf	SD_readSingleBlock@i& (0+255),w,b
  9256  003ADE  6ED9               	movwf	fsr2l,c
  9257  003AE0  0E01               	movlw	high _SD_buffer
  9258  003AE2  0100               	movlb	0	; () banked
  9259  003AE4  2174               	addwfc	(SD_readSingleBlock@i+1)& (0+255),w,b
  9260  003AE6  6EDA               	movwf	fsr2h,c
  9261  003AE8  EC4D  F01F         	call	_SPI2_read	;wreg free
  9262  003AEC  6EDF               	movwf	indf2,c
  9263  003AEE  0100               	movlb	0	; () banked
  9264  003AF0  4B73               	infsnz	SD_readSingleBlock@i& (0+255),f,b
  9265  003AF2  2B74               	incf	(SD_readSingleBlock@i+1)& (0+255),f,b
  9266  003AF4  D7E9               	goto	L16
  9267  003AF6                     l3616:
  9268                           
  9269                           ; BSR set to: 0
  9270                           ;rosso_sdcard.h: 240: SPI2_read();
  9271  003AF6  EC4D  F01F         	call	_SPI2_read	;wreg free
  9272                           
  9273                           ;rosso_sdcard.h: 241: SPI2_read();
  9274  003AFA  EC4D  F01F         	call	_SPI2_read	;wreg free
  9275                           
  9276                           ;rosso_sdcard.h: 243: SPI2_read();
  9277  003AFE  EC4D  F01F         	call	_SPI2_read	;wreg free
  9278                           
  9279                           ;rosso_sdcard.h: 244: {LATBbits.LATB0=1;};
  9280  003B02  808A               	bsf	3978,0,c	;volatile
  9281                           
  9282                           ;rosso_sdcard.h: 246: return 0;
  9283  003B04  0E00               	movlw	0
  9284  003B06  0012               	return	
  9285  003B08                     __end_of_SD_readSingleBlock:
  9286                           	opt stack 0
  9287                           tblptru	equ	0xFF8
  9288                           tblptrh	equ	0xFF7
  9289                           tblptrl	equ	0xFF6
  9290                           tablat	equ	0xFF5
  9291                           prodh	equ	0xFF4
  9292                           prodl	equ	0xFF3
  9293                           postinc0	equ	0xFEE
  9294                           wreg	equ	0xFE8
  9295                           indf1	equ	0xFE7
  9296                           postinc1	equ	0xFE6
  9297                           postdec1	equ	0xFE5
  9298                           fsr1h	equ	0xFE2
  9299                           fsr1l	equ	0xFE1
  9300                           indf2	equ	0xFDF
  9301                           postinc2	equ	0xFDE
  9302                           postdec2	equ	0xFDD
  9303                           fsr2h	equ	0xFDA
  9304                           fsr2l	equ	0xFD9
  9305                           status	equ	0xFD8
  9306                           
  9307 ;; *************** function _SD_sendCommand *****************
  9308 ;; Defined at:
  9309 ;;		line 64 in file "../my_lib.X/rosso_sdcard.h"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;  cmd             1    wreg     unsigned char 
  9312 ;;  arg             4    0[BANK0 ] unsigned long 
  9313 ;; Auto vars:     Size  Location     Type
  9314 ;;  cmd             1   11[BANK0 ] unsigned char 
  9315 ;;  response        1   10[BANK0 ] unsigned char 
  9316 ;;  status          1    9[BANK0 ] unsigned char 
  9317 ;;  retry           1    8[BANK0 ] unsigned char 
  9318 ;; Return value:  Size  Location     Type
  9319 ;;                  1    wreg      unsigned char 
  9320 ;; Registers used:
  9321 ;;		wreg, status,2, status,0, cstack
  9322 ;; Tracked objects:
  9323 ;;		On entry : 0/0
  9324 ;;		On exit  : 0/0
  9325 ;;		Unchanged: 0/0
  9326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9327 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9328 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9329 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9330 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9331 ;;Total ram usage:       12 bytes
  9332 ;; Hardware stack levels used:    1
  9333 ;; Hardware stack levels required when called:    3
  9334 ;; This function calls:
  9335 ;;		_SPI2_read
  9336 ;;		_SPI2_write
  9337 ;; This function is called by:
  9338 ;;		_SD_init
  9339 ;;		_SD_readSingleBlock
  9340 ;;		_SD_writeSingleBlock
  9341 ;;		_SD_erase
  9342 ;; This function uses a non-reentrant model
  9343 ;;
  9344                           
  9345                           	psect	text25
  9346  00376C                     __ptext25:
  9347                           	opt stack 0
  9348  00376C                     _SD_sendCommand:
  9349                           	opt stack 26
  9350                           
  9351                           ;incstack = 0
  9352                           ;SD_sendCommand@cmd stored from wreg
  9353  00376C  0100               	movlb	0	; () banked
  9354  00376E  6F6B               	movwf	SD_sendCommand@cmd& (0+255),b
  9355                           
  9356                           ; BSR set to: 0
  9357                           ;rosso_sdcard.h: 65: UINT8 response, retry = 0, status;
  9358  003770  0E00               	movlw	0
  9359  003772  0100               	movlb	0	; () banked
  9360  003774  6F68               	movwf	SD_sendCommand@retry& (0+255),b
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;rosso_sdcard.h: 72: if (SDHC_flag == 0)
  9364  003776  663D               	tstfsz	_SDHC_flag,c	;volatile
  9365  003778  D03B               	goto	l3538
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;rosso_sdcard.h: 73: if (cmd == 17 || cmd == 18
  9369                           ;rosso_sdcard.h: 74: || cmd == 24 || cmd == 25
  9370                           ;rosso_sdcard.h: 75: || cmd == 32 || cmd == 33) {
  9371  00377A  0100               	movlb	0	; () banked
  9372  00377C  516B               	movf	SD_sendCommand@cmd& (0+255),w,b
  9373  00377E  0A11               	xorlw	17
  9374  003780  B4D8               	btfsc	status,2,c
  9375  003782  D019               	goto	l3536
  9376                           
  9377                           ; BSR set to: 0
  9378  003784  0100               	movlb	0	; () banked
  9379  003786  516B               	movf	SD_sendCommand@cmd& (0+255),w,b
  9380  003788  0A12               	xorlw	18
  9381  00378A  B4D8               	btfsc	status,2,c
  9382  00378C  D014               	goto	l3536
  9383                           
  9384                           ; BSR set to: 0
  9385  00378E  0100               	movlb	0	; () banked
  9386  003790  516B               	movf	SD_sendCommand@cmd& (0+255),w,b
  9387  003792  0A18               	xorlw	24
  9388  003794  B4D8               	btfsc	status,2,c
  9389  003796  D00F               	goto	l3536
  9390                           
  9391                           ; BSR set to: 0
  9392  003798  0100               	movlb	0	; () banked
  9393  00379A  516B               	movf	SD_sendCommand@cmd& (0+255),w,b
  9394  00379C  0A19               	xorlw	25
  9395  00379E  B4D8               	btfsc	status,2,c
  9396  0037A0  D00A               	goto	l3536
  9397                           
  9398                           ; BSR set to: 0
  9399  0037A2  0100               	movlb	0	; () banked
  9400  0037A4  516B               	movf	SD_sendCommand@cmd& (0+255),w,b
  9401  0037A6  0A20               	xorlw	32
  9402  0037A8  B4D8               	btfsc	status,2,c
  9403  0037AA  D005               	goto	l3536
  9404                           
  9405                           ; BSR set to: 0
  9406  0037AC  0100               	movlb	0	; () banked
  9407  0037AE  516B               	movf	SD_sendCommand@cmd& (0+255),w,b
  9408  0037B0  0A21               	xorlw	33
  9409  0037B2  A4D8               	btfss	status,2,c
  9410  0037B4  D01D               	goto	l3538
  9411  0037B6                     l3536:
  9412                           
  9413                           ; BSR set to: 0
  9414                           ;rosso_sdcard.h: 76: arg = arg << 9;
  9415  0037B6  0100               	movlb	0	; () banked
  9416  0037B8  C060  F064         	movff	SD_sendCommand@arg,??_SD_sendCommand
  9417  0037BC  0100               	movlb	0	; () banked
  9418  0037BE  C061  F065         	movff	SD_sendCommand@arg+1,??_SD_sendCommand+1
  9419  0037C2  0100               	movlb	0	; () banked
  9420  0037C4  C062  F066         	movff	SD_sendCommand@arg+2,??_SD_sendCommand+2
  9421  0037C8  0100               	movlb	0	; () banked
  9422  0037CA  C063  F067         	movff	SD_sendCommand@arg+3,??_SD_sendCommand+3
  9423  0037CE  0E09               	movlw	9
  9424  0037D0                     u3595:
  9425  0037D0  90D8               	bcf	status,0,c
  9426  0037D2  0100               	movlb	0	; () banked
  9427  0037D4  3764               	rlcf	??_SD_sendCommand& (0+255),f,b
  9428  0037D6  3765               	rlcf	(??_SD_sendCommand+1)& (0+255),f,b
  9429  0037D8  3766               	rlcf	(??_SD_sendCommand+2)& (0+255),f,b
  9430  0037DA  3767               	rlcf	(??_SD_sendCommand+3)& (0+255),f,b
  9431  0037DC  2EE8               	decfsz	wreg,f,c
  9432  0037DE  D7F8               	goto	u3595
  9433  0037E0  C064  F060         	movff	??_SD_sendCommand,SD_sendCommand@arg
  9434  0037E4  C065  F061         	movff	??_SD_sendCommand+1,SD_sendCommand@arg+1
  9435  0037E8  C066  F062         	movff	??_SD_sendCommand+2,SD_sendCommand@arg+2
  9436  0037EC  C067  F063         	movff	??_SD_sendCommand+3,SD_sendCommand@arg+3
  9437  0037F0                     l3538:
  9438                           
  9439                           ; BSR set to: 0
  9440                           ;rosso_sdcard.h: 77: }
  9441                           ;rosso_sdcard.h: 79: {LATBbits.LATB0=0;};
  9442  0037F0  908A               	bcf	3978,0,c	;volatile
  9443                           
  9444                           ; BSR set to: 0
  9445                           ;rosso_sdcard.h: 81: SPI2_write(cmd | 0x40);
  9446  0037F2  0100               	movlb	0	; () banked
  9447  0037F4  516B               	movf	SD_sendCommand@cmd& (0+255),w,b
  9448  0037F6  0940               	iorlw	64
  9449  0037F8  EC36  F01F         	call	_SPI2_write
  9450                           
  9451                           ;rosso_sdcard.h: 82: SPI2_write(arg >> 24);
  9452  0037FC  0100               	movlb	0	; () banked
  9453  0037FE  5163               	movf	(SD_sendCommand@arg+3)& (0+255),w,b
  9454  003800  EC36  F01F         	call	_SPI2_write
  9455                           
  9456                           ;rosso_sdcard.h: 83: SPI2_write(arg >> 16);
  9457  003804  0100               	movlb	0	; () banked
  9458  003806  5162               	movf	(SD_sendCommand@arg+2)& (0+255),w,b
  9459  003808  EC36  F01F         	call	_SPI2_write
  9460                           
  9461                           ;rosso_sdcard.h: 84: SPI2_write(arg >> 8);
  9462  00380C  0100               	movlb	0	; () banked
  9463  00380E  5161               	movf	(SD_sendCommand@arg+1)& (0+255),w,b
  9464  003810  EC36  F01F         	call	_SPI2_write
  9465                           
  9466                           ;rosso_sdcard.h: 85: SPI2_write(arg);
  9467  003814  0100               	movlb	0	; () banked
  9468  003816  5160               	movf	SD_sendCommand@arg& (0+255),w,b
  9469  003818  EC36  F01F         	call	_SPI2_write
  9470                           
  9471                           ;rosso_sdcard.h: 87: if (cmd == 8)
  9472  00381C  0100               	movlb	0	; () banked
  9473  00381E  516B               	movf	SD_sendCommand@cmd& (0+255),w,b
  9474  003820  0A08               	xorlw	8
  9475  003822  A4D8               	btfss	status,2,c
  9476  003824  D004               	goto	l3554
  9477                           
  9478                           ; BSR set to: 0
  9479                           ;rosso_sdcard.h: 88: SPI2_write(0x87);
  9480  003826  0E87               	movlw	135
  9481  003828  EC36  F01F         	call	_SPI2_write
  9482  00382C  D007               	goto	l3558
  9483  00382E                     l3554:
  9484                           
  9485                           ;rosso_sdcard.h: 89: else
  9486                           ;rosso_sdcard.h: 90: SPI2_write(0x95);
  9487  00382E  0E95               	movlw	149
  9488  003830  EC36  F01F         	call	_SPI2_write
  9489  003834  D003               	goto	l3558
  9490  003836                     l3556:
  9491                           
  9492                           ;rosso_sdcard.h: 93: if (retry++ > 0xfe)
  9493  003836  0100               	movlb	0	; () banked
  9494  003838  2B68               	incf	SD_sendCommand@retry& (0+255),f,b
  9495                           
  9496                           ;rosso_sdcard.h: 94: break;
  9497  00383A  D008               	goto	l161
  9498  00383C                     l3558:
  9499  00383C  EC4D  F01F         	call	_SPI2_read	;wreg free
  9500  003840  0100               	movlb	0	; () banked
  9501  003842  6F6A               	movwf	SD_sendCommand@response& (0+255),b
  9502  003844  0100               	movlb	0	; () banked
  9503  003846  296A               	incf	SD_sendCommand@response& (0+255),w,b
  9504  003848  B4D8               	btfsc	status,2,c
  9505  00384A  D7F5               	goto	l3556
  9506  00384C                     l161:
  9507                           
  9508                           ; BSR set to: 0
  9509                           ;rosso_sdcard.h: 96: if (response == 0x00 && cmd == 58)
  9510  00384C  0100               	movlb	0	; () banked
  9511  00384E  676A               	tstfsz	SD_sendCommand@response& (0+255),b
  9512  003850  D019               	goto	l3576
  9513                           
  9514                           ; BSR set to: 0
  9515  003852  0100               	movlb	0	; () banked
  9516  003854  516B               	movf	SD_sendCommand@cmd& (0+255),w,b
  9517  003856  0A3A               	xorlw	58
  9518  003858  A4D8               	btfss	status,2,c
  9519  00385A  D014               	goto	l3576
  9520                           
  9521                           ; BSR set to: 0
  9522                           ;rosso_sdcard.h: 97: {
  9523                           ;rosso_sdcard.h: 98: status = SPI2_read() & 0x40;
  9524  00385C  EC4D  F01F         	call	_SPI2_read	;wreg free
  9525  003860  0B40               	andlw	64
  9526  003862  0100               	movlb	0	; () banked
  9527  003864  6F69               	movwf	SD_sendCommand@status& (0+255),b
  9528                           
  9529                           ; BSR set to: 0
  9530                           ;rosso_sdcard.h: 99: if (status == 0x40)
  9531  003866  0100               	movlb	0	; () banked
  9532  003868  5169               	movf	SD_sendCommand@status& (0+255),w,b
  9533  00386A  0A40               	xorlw	64
  9534  00386C  A4D8               	btfss	status,2,c
  9535  00386E  D002               	goto	l3568
  9536                           
  9537                           ; BSR set to: 0
  9538                           ;rosso_sdcard.h: 100: SDHC_flag = 1;
  9539  003870  0E01               	movlw	1
  9540  003872  D001               	goto	L17
  9541  003874                     l3568:
  9542                           
  9543                           ; BSR set to: 0
  9544                           ;rosso_sdcard.h: 101: else
  9545                           ;rosso_sdcard.h: 102: SDHC_flag = 0;
  9546  003874  0E00               	movlw	0
  9547  003876                     L17:
  9548  003876  6E3D               	movwf	_SDHC_flag,c	;volatile
  9549                           
  9550                           ; BSR set to: 0
  9551                           ;rosso_sdcard.h: 104: SPI2_read();
  9552                           
  9553                           ; BSR set to: 0
  9554  003878  EC4D  F01F         	call	_SPI2_read	;wreg free
  9555                           
  9556                           ;rosso_sdcard.h: 105: SPI2_read();
  9557  00387C  EC4D  F01F         	call	_SPI2_read	;wreg free
  9558                           
  9559                           ;rosso_sdcard.h: 106: SPI2_read();
  9560  003880  EC4D  F01F         	call	_SPI2_read	;wreg free
  9561  003884                     l3576:
  9562                           
  9563                           ;rosso_sdcard.h: 107: }
  9564                           ;rosso_sdcard.h: 109: SPI2_read();
  9565  003884  EC4D  F01F         	call	_SPI2_read	;wreg free
  9566                           
  9567                           ;rosso_sdcard.h: 110: {LATBbits.LATB0=1;};
  9568  003888  808A               	bsf	3978,0,c	;volatile
  9569                           
  9570                           ;rosso_sdcard.h: 112: return response;
  9571  00388A  0100               	movlb	0	; () banked
  9572  00388C  516A               	movf	SD_sendCommand@response& (0+255),w,b
  9573  00388E  0012               	return	
  9574  003890                     __end_of_SD_sendCommand:
  9575                           	opt stack 0
  9576                           tblptru	equ	0xFF8
  9577                           tblptrh	equ	0xFF7
  9578                           tblptrl	equ	0xFF6
  9579                           tablat	equ	0xFF5
  9580                           prodh	equ	0xFF4
  9581                           prodl	equ	0xFF3
  9582                           postinc0	equ	0xFEE
  9583                           wreg	equ	0xFE8
  9584                           indf1	equ	0xFE7
  9585                           postinc1	equ	0xFE6
  9586                           postdec1	equ	0xFE5
  9587                           fsr1h	equ	0xFE2
  9588                           fsr1l	equ	0xFE1
  9589                           indf2	equ	0xFDF
  9590                           postinc2	equ	0xFDE
  9591                           postdec2	equ	0xFDD
  9592                           fsr2h	equ	0xFDA
  9593                           fsr2l	equ	0xFD9
  9594                           status	equ	0xFD8
  9595                           
  9596 ;; *************** function _SPI2_write *****************
  9597 ;; Defined at:
  9598 ;;		line 88 in file "../my_lib.X/rosso_hwspi2.h"
  9599 ;; Parameters:    Size  Location     Type
  9600 ;;  data_out        1    wreg     unsigned char 
  9601 ;; Auto vars:     Size  Location     Type
  9602 ;;  data_out        1   32[COMRAM] unsigned char 
  9603 ;;  TempVar         1   31[COMRAM] unsigned char 
  9604 ;; Return value:  Size  Location     Type
  9605 ;;                  1    wreg      char 
  9606 ;; Registers used:
  9607 ;;		wreg
  9608 ;; Tracked objects:
  9609 ;;		On entry : 0/0
  9610 ;;		On exit  : 0/0
  9611 ;;		Unchanged: 0/0
  9612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9614 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9616 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9617 ;;Total ram usage:        2 bytes
  9618 ;; Hardware stack levels used:    1
  9619 ;; Hardware stack levels required when called:    2
  9620 ;; This function calls:
  9621 ;;		Nothing
  9622 ;; This function is called by:
  9623 ;;		_SD_sendCommand
  9624 ;;		_SD_init
  9625 ;;		_SD_writeSingleBlock
  9626 ;; This function uses a non-reentrant model
  9627 ;;
  9628                           
  9629                           	psect	text26
  9630  003E6C                     __ptext26:
  9631                           	opt stack 0
  9632  003E6C                     _SPI2_write:
  9633                           	opt stack 27
  9634                           
  9635                           ; BSR set to: 0
  9636                           ;incstack = 0
  9637                           ;SPI2_write@data_out stored from wreg
  9638  003E6C  6E21               	movwf	SPI2_write@data_out,c
  9639                           
  9640                           ;rosso_hwspi2.h: 89: UINT8 TempVar;
  9641                           ;rosso_hwspi2.h: 90: TempVar = SSP2BUF;
  9642  003E6E  CF6F F020          	movff	3951,SPI2_write@TempVar	;volatile
  9643                           
  9644                           ;rosso_hwspi2.h: 91: PIR3bits.SSP2IF = 0;
  9645  003E72  9EA4               	bcf	4004,7,c	;volatile
  9646                           
  9647                           ;rosso_hwspi2.h: 92: SSP2CON1bits.WCOL = 0;
  9648  003E74  9E6C               	bcf	3948,7,c	;volatile
  9649                           
  9650                           ;rosso_hwspi2.h: 93: SSP2BUF = data_out;
  9651  003E76  C021  FF6F         	movff	SPI2_write@data_out,3951	;volatile
  9652                           
  9653                           ;rosso_hwspi2.h: 94: if (SSP2CON1 & 0x80)
  9654  003E7A  BE6C               	btfsc	3948,7,c	;volatile
  9655  003E7C  0012               	return	
  9656  003E7E                     l137:
  9657  003E7E  BEA4               	btfsc	4004,7,c	;volatile
  9658                           
  9659                           ;rosso_hwspi2.h: 99: return ( 0);
  9660                           ;	Return value of _SPI2_write is never used
  9661  003E80  0012               	return	
  9662  003E82  D7FD               	goto	l137
  9663  003E84                     __end_of_SPI2_write:
  9664                           	opt stack 0
  9665                           tblptru	equ	0xFF8
  9666                           tblptrh	equ	0xFF7
  9667                           tblptrl	equ	0xFF6
  9668                           tablat	equ	0xFF5
  9669                           prodh	equ	0xFF4
  9670                           prodl	equ	0xFF3
  9671                           postinc0	equ	0xFEE
  9672                           wreg	equ	0xFE8
  9673                           indf1	equ	0xFE7
  9674                           postinc1	equ	0xFE6
  9675                           postdec1	equ	0xFE5
  9676                           fsr1h	equ	0xFE2
  9677                           fsr1l	equ	0xFE1
  9678                           indf2	equ	0xFDF
  9679                           postinc2	equ	0xFDE
  9680                           postdec2	equ	0xFDD
  9681                           fsr2h	equ	0xFDA
  9682                           fsr2l	equ	0xFD9
  9683                           status	equ	0xFD8
  9684                           
  9685 ;; *************** function _SPI2_read *****************
  9686 ;; Defined at:
  9687 ;;		line 78 in file "../my_lib.X/rosso_hwspi2.h"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;		None
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;  TempVar         1   31[COMRAM] unsigned char 
  9692 ;; Return value:  Size  Location     Type
  9693 ;;                  1    wreg      unsigned char 
  9694 ;; Registers used:
  9695 ;;		wreg, status,2
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;Total ram usage:        1 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    2
  9708 ;; This function calls:
  9709 ;;		Nothing
  9710 ;; This function is called by:
  9711 ;;		_SD_sendCommand
  9712 ;;		_SD_readSingleBlock
  9713 ;;		_SD_writeSingleBlock
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           	psect	text27
  9718  003E9A                     __ptext27:
  9719                           	opt stack 0
  9720  003E9A                     _SPI2_read:
  9721                           	opt stack 26
  9722                           
  9723                           ;rosso_hwspi2.h: 79: UINT8 TempVar;
  9724                           ;rosso_hwspi2.h: 80: TempVar = SSP2BUF;
  9725                           
  9726                           ;incstack = 0
  9727  003E9A  CF6F F020          	movff	3951,SPI2_read@TempVar	;volatile
  9728                           
  9729                           ;rosso_hwspi2.h: 81: PIR3bits.SSP2IF = 0;
  9730  003E9E  9EA4               	bcf	4004,7,c	;volatile
  9731                           
  9732                           ;rosso_hwspi2.h: 82: SSP2BUF = 0x00;
  9733  003EA0  0E00               	movlw	0
  9734  003EA2  6E6F               	movwf	3951,c	;volatile
  9735  003EA4                     l128:
  9736  003EA4  AEA4               	btfss	4004,7,c	;volatile
  9737  003EA6  D7FE               	goto	l128
  9738                           
  9739                           ;rosso_hwspi2.h: 85: return ( SSP2BUF );
  9740  003EA8  506F               	movf	3951,w,c	;volatile
  9741  003EAA  0012               	return	
  9742  003EAC                     __end_of_SPI2_read:
  9743                           	opt stack 0
  9744                           tblptru	equ	0xFF8
  9745                           tblptrh	equ	0xFF7
  9746                           tblptrl	equ	0xFF6
  9747                           tablat	equ	0xFF5
  9748                           prodh	equ	0xFF4
  9749                           prodl	equ	0xFF3
  9750                           postinc0	equ	0xFEE
  9751                           wreg	equ	0xFE8
  9752                           indf1	equ	0xFE7
  9753                           postinc1	equ	0xFE6
  9754                           postdec1	equ	0xFE5
  9755                           fsr1h	equ	0xFE2
  9756                           fsr1l	equ	0xFE1
  9757                           indf2	equ	0xFDF
  9758                           postinc2	equ	0xFDE
  9759                           postdec2	equ	0xFDD
  9760                           fsr2h	equ	0xFDA
  9761                           fsr2l	equ	0xFD9
  9762                           status	equ	0xFD8
  9763                           
  9764 ;; *************** function _Delay100TCYx *****************
  9765 ;; Defined at:
  9766 ;;		line 8 in file "/opt/microchip/xc8/v1.33/sources/pic18/d100tcyx.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;  unit            1    wreg     unsigned char 
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;  unit            1   31[COMRAM] unsigned char 
  9771 ;; Return value:  Size  Location     Type
  9772 ;;		None               void
  9773 ;; Registers used:
  9774 ;;		wreg
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9781 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;Total ram usage:        1 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    2
  9787 ;; This function calls:
  9788 ;;		Nothing
  9789 ;; This function is called by:
  9790 ;;		_main
  9791 ;;		__delay_ms
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795                           	psect	text28
  9796  003EAC                     __ptext28:
  9797                           	opt stack 0
  9798  003EAC                     _Delay100TCYx:
  9799                           	opt stack 28
  9800                           
  9801                           ;incstack = 0
  9802                           ;Delay100TCYx@unit stored from wreg
  9803  003EAC  6E20               	movwf	Delay100TCYx@unit,c
  9804  003EAE                     l710:
  9805  003EAE  0E21               	movlw	33
  9806  003EB0                     u5167:
  9807  003EB0  2EE8               	decfsz	wreg,f,c
  9808  003EB2  D7FE               	goto	u5167
  9809  003EB4  F000               	nop	
  9810  003EB6  2E20               	decfsz	Delay100TCYx@unit,f,c
  9811  003EB8  D7FA               	goto	l710
  9812  003EBA  0012               	return	
  9813  003EBC                     __end_of_Delay100TCYx:
  9814                           	opt stack 0
  9815                           tblptru	equ	0xFF8
  9816                           tblptrh	equ	0xFF7
  9817                           tblptrl	equ	0xFF6
  9818                           tablat	equ	0xFF5
  9819                           prodh	equ	0xFF4
  9820                           prodl	equ	0xFF3
  9821                           postinc0	equ	0xFEE
  9822                           wreg	equ	0xFE8
  9823                           indf1	equ	0xFE7
  9824                           postinc1	equ	0xFE6
  9825                           postdec1	equ	0xFE5
  9826                           fsr1h	equ	0xFE2
  9827                           fsr1l	equ	0xFE1
  9828                           indf2	equ	0xFDF
  9829                           postinc2	equ	0xFDE
  9830                           postdec2	equ	0xFDD
  9831                           fsr2h	equ	0xFDA
  9832                           fsr2l	equ	0xFD9
  9833                           status	equ	0xFD8
  9834                           
  9835 ;; *************** function _low_isr *****************
  9836 ;; Defined at:
  9837 ;;		line 194 in file "main.c"
  9838 ;; Parameters:    Size  Location     Type
  9839 ;;		None
  9840 ;; Auto vars:     Size  Location     Type
  9841 ;;		None
  9842 ;; Return value:  Size  Location     Type
  9843 ;;		None               void
  9844 ;; Registers used:
  9845 ;;		None
  9846 ;; Tracked objects:
  9847 ;;		On entry : 0/0
  9848 ;;		On exit  : 0/0
  9849 ;;		Unchanged: 0/0
  9850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9853 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9854 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9855 ;;Total ram usage:       17 bytes
  9856 ;; Hardware stack levels used:    1
  9857 ;; Hardware stack levels required when called:    1
  9858 ;; This function calls:
  9859 ;;		Nothing
  9860 ;; This function is called by:
  9861 ;;		Interrupt level 1
  9862 ;; This function uses a non-reentrant model
  9863 ;;
  9864                           
  9865                           	psect	intcodelo
  9866  000318                     __pintcodelo:
  9867                           	opt stack 0
  9868  000318                     _low_isr:
  9869                           	opt stack 21
  9870                           
  9871                           ;incstack = 0
  9872  000318  CFD8 F001          	movff	status,??_low_isr
  9873  00031C  CFE8 F002          	movff	wreg,??_low_isr+1
  9874  000320  CFE0 F003          	movff	bsr,??_low_isr+2
  9875  000324  CFFA F004          	movff	pclath,??_low_isr+3
  9876  000328  CFFB F005          	movff	pclatu,??_low_isr+4
  9877  00032C  CFE9 F006          	movff	fsr0l,??_low_isr+5
  9878  000330  CFEA F007          	movff	fsr0h,??_low_isr+6
  9879  000334  CFE1 F008          	movff	fsr1l,??_low_isr+7
  9880  000338  CFE2 F009          	movff	fsr1h,??_low_isr+8
  9881  00033C  CFD9 F00A          	movff	fsr2l,??_low_isr+9
  9882  000340  CFDA F00B          	movff	fsr2h,??_low_isr+10
  9883  000344  CFF3 F00C          	movff	prodl,??_low_isr+11
  9884  000348  CFF4 F00D          	movff	prodh,??_low_isr+12
  9885  00034C  CFF6 F00E          	movff	tblptrl,??_low_isr+13
  9886  000350  CFF7 F00F          	movff	tblptrh,??_low_isr+14
  9887  000354  CFF8 F010          	movff	tblptru,??_low_isr+15
  9888  000358  CFF5 F011          	movff	tablat,??_low_isr+16
  9889  00035C  C011  FFF5         	movff	??_low_isr+16,tablat
  9890  000360  C010  FFF8         	movff	??_low_isr+15,tblptru
  9891  000364  C00F  FFF7         	movff	??_low_isr+14,tblptrh
  9892  000368  C00E  FFF6         	movff	??_low_isr+13,tblptrl
  9893  00036C  C00D  FFF4         	movff	??_low_isr+12,prodh
  9894  000370  C00C  FFF3         	movff	??_low_isr+11,prodl
  9895  000374  C00B  FFDA         	movff	??_low_isr+10,fsr2h
  9896  000378  C00A  FFD9         	movff	??_low_isr+9,fsr2l
  9897  00037C  C009  FFE2         	movff	??_low_isr+8,fsr1h
  9898  000380  C008  FFE1         	movff	??_low_isr+7,fsr1l
  9899  000384  C007  FFEA         	movff	??_low_isr+6,fsr0h
  9900  000388  C006  FFE9         	movff	??_low_isr+5,fsr0l
  9901  00038C  C005  FFFB         	movff	??_low_isr+4,pclatu
  9902  000390  C004  FFFA         	movff	??_low_isr+3,pclath
  9903  000394  C003  FFE0         	movff	??_low_isr+2,bsr
  9904  000398  C002  FFE8         	movff	??_low_isr+1,wreg
  9905  00039C  C001  FFD8         	movff	??_low_isr,status
  9906  0003A0  0010               	retfie	
  9907  0003A2                     __end_of_low_isr:
  9908                           	opt stack 0
  9909                           pclatu	equ	0xFFB
  9910                           pclath	equ	0xFFA
  9911                           tblptru	equ	0xFF8
  9912                           tblptrh	equ	0xFF7
  9913                           tblptrl	equ	0xFF6
  9914                           tablat	equ	0xFF5
  9915                           prodh	equ	0xFF4
  9916                           prodl	equ	0xFF3
  9917                           postinc0	equ	0xFEE
  9918                           fsr0h	equ	0xFEA
  9919                           fsr0l	equ	0xFE9
  9920                           wreg	equ	0xFE8
  9921                           indf1	equ	0xFE7
  9922                           postinc1	equ	0xFE6
  9923                           postdec1	equ	0xFE5
  9924                           fsr1h	equ	0xFE2
  9925                           fsr1l	equ	0xFE1
  9926                           bsr	equ	0xFE0
  9927                           indf2	equ	0xFDF
  9928                           postinc2	equ	0xFDE
  9929                           postdec2	equ	0xFDD
  9930                           fsr2h	equ	0xFDA
  9931                           fsr2l	equ	0xFD9
  9932                           status	equ	0xFD8
  9933                           
  9934 ;; *************** function _high_isr *****************
  9935 ;; Defined at:
  9936 ;;		line 188 in file "main.c"
  9937 ;; Parameters:    Size  Location     Type
  9938 ;;		None
  9939 ;; Auto vars:     Size  Location     Type
  9940 ;;		None
  9941 ;; Return value:  Size  Location     Type
  9942 ;;		None               void
  9943 ;; Registers used:
  9944 ;;		None
  9945 ;; Tracked objects:
  9946 ;;		On entry : 0/0
  9947 ;;		On exit  : 0/0
  9948 ;;		Unchanged: 0/0
  9949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9952 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9953 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9954 ;;Total ram usage:       14 bytes
  9955 ;; Hardware stack levels used:    1
  9956 ;; This function calls:
  9957 ;;		Nothing
  9958 ;; This function is called by:
  9959 ;;		Interrupt level 2
  9960 ;; This function uses a non-reentrant model
  9961 ;;
  9962                           
  9963                           	psect	intcode
  9964  000308                     __pintcode:
  9965                           	opt stack 0
  9966  000308                     _high_isr:
  9967                           	opt stack 21
  9968                           
  9969                           ;incstack = 0
  9970  000308  CFFA F012          	movff	pclath,??_high_isr
  9971  00030C  CFFB F013          	movff	pclatu,??_high_isr+1
  9972  000310  CFE9 F014          	movff	fsr0l,??_high_isr+2
  9973  000314  EF57  F01E         	goto	int_func
  9974                           pclatu	equ	0xFFB
  9975                           pclath	equ	0xFFA
  9976                           tblptru	equ	0xFF8
  9977                           tblptrh	equ	0xFF7
  9978                           tblptrl	equ	0xFF6
  9979                           tablat	equ	0xFF5
  9980                           prodh	equ	0xFF4
  9981                           prodl	equ	0xFF3
  9982                           postinc0	equ	0xFEE
  9983                           fsr0h	equ	0xFEA
  9984                           fsr0l	equ	0xFE9
  9985                           wreg	equ	0xFE8
  9986                           indf1	equ	0xFE7
  9987                           postinc1	equ	0xFE6
  9988                           postdec1	equ	0xFE5
  9989                           fsr1h	equ	0xFE2
  9990                           fsr1l	equ	0xFE1
  9991                           bsr	equ	0xFE0
  9992                           indf2	equ	0xFDF
  9993                           postinc2	equ	0xFDE
  9994                           postdec2	equ	0xFDD
  9995                           fsr2h	equ	0xFDA
  9996                           fsr2l	equ	0xFD9
  9997                           status	equ	0xFD8
  9998                           
  9999                           	psect	intcode_body
 10000  003CAE                     __pintcode_body:
 10001                           	opt stack 21
 10002  003CAE                     int_func:
 10003                           	opt stack 21
 10004  003CAE  CFEA F015          	movff	fsr0h,??_high_isr+3
 10005  003CB2  CFE1 F016          	movff	fsr1l,??_high_isr+4
 10006  003CB6  CFE2 F017          	movff	fsr1h,??_high_isr+5
 10007  003CBA  CFD9 F018          	movff	fsr2l,??_high_isr+6
 10008  003CBE  CFDA F019          	movff	fsr2h,??_high_isr+7
 10009  003CC2  CFF3 F01A          	movff	prodl,??_high_isr+8
 10010  003CC6  CFF4 F01B          	movff	prodh,??_high_isr+9
 10011  003CCA  CFF6 F01C          	movff	tblptrl,??_high_isr+10
 10012  003CCE  CFF7 F01D          	movff	tblptrh,??_high_isr+11
 10013  003CD2  CFF8 F01E          	movff	tblptru,??_high_isr+12
 10014  003CD6  CFF5 F01F          	movff	tablat,??_high_isr+13
 10015  003CDA  C01F  FFF5         	movff	??_high_isr+13,tablat
 10016  003CDE  C01E  FFF8         	movff	??_high_isr+12,tblptru
 10017  003CE2  C01D  FFF7         	movff	??_high_isr+11,tblptrh
 10018  003CE6  C01C  FFF6         	movff	??_high_isr+10,tblptrl
 10019  003CEA  C01B  FFF4         	movff	??_high_isr+9,prodh
 10020  003CEE  C01A  FFF3         	movff	??_high_isr+8,prodl
 10021  003CF2  C019  FFDA         	movff	??_high_isr+7,fsr2h
 10022  003CF6  C018  FFD9         	movff	??_high_isr+6,fsr2l
 10023  003CFA  C017  FFE2         	movff	??_high_isr+5,fsr1h
 10024  003CFE  C016  FFE1         	movff	??_high_isr+4,fsr1l
 10025  003D02  C015  FFEA         	movff	??_high_isr+3,fsr0h
 10026  003D06  C014  FFE9         	movff	??_high_isr+2,fsr0l
 10027  003D0A  C013  FFFB         	movff	??_high_isr+1,pclatu
 10028  003D0E  C012  FFFA         	movff	??_high_isr,pclath
 10029  003D12  0011               	retfie		f
 10030  003D14                     __end_of_high_isr:
 10031                           	opt stack 0
 10032                           pclatu	equ	0xFFB
 10033                           pclath	equ	0xFFA
 10034                           tblptru	equ	0xFF8
 10035                           tblptrh	equ	0xFF7
 10036                           tblptrl	equ	0xFF6
 10037                           tablat	equ	0xFF5
 10038                           prodh	equ	0xFF4
 10039                           prodl	equ	0xFF3
 10040                           postinc0	equ	0xFEE
 10041                           fsr0h	equ	0xFEA
 10042                           fsr0l	equ	0xFE9
 10043                           wreg	equ	0xFE8
 10044                           indf1	equ	0xFE7
 10045                           postinc1	equ	0xFE6
 10046                           postdec1	equ	0xFE5
 10047                           fsr1h	equ	0xFE2
 10048                           fsr1l	equ	0xFE1
 10049                           bsr	equ	0xFE0
 10050                           indf2	equ	0xFDF
 10051                           postinc2	equ	0xFDE
 10052                           postdec2	equ	0xFDD
 10053                           fsr2h	equ	0xFDA
 10054                           fsr2l	equ	0xFD9
 10055                           status	equ	0xFD8
 10056                           pclatu	equ	0xFFB
 10057                           pclath	equ	0xFFA
 10058                           tblptru	equ	0xFF8
 10059                           tblptrh	equ	0xFF7
 10060                           tblptrl	equ	0xFF6
 10061                           tablat	equ	0xFF5
 10062                           prodh	equ	0xFF4
 10063                           prodl	equ	0xFF3
 10064                           postinc0	equ	0xFEE
 10065                           fsr0h	equ	0xFEA
 10066                           fsr0l	equ	0xFE9
 10067                           wreg	equ	0xFE8
 10068                           indf1	equ	0xFE7
 10069                           postinc1	equ	0xFE6
 10070                           postdec1	equ	0xFE5
 10071                           fsr1h	equ	0xFE2
 10072                           fsr1l	equ	0xFE1
 10073                           bsr	equ	0xFE0
 10074                           indf2	equ	0xFDF
 10075                           postinc2	equ	0xFDE
 10076                           postdec2	equ	0xFDD
 10077                           fsr2h	equ	0xFDA
 10078                           fsr2l	equ	0xFD9
 10079                           status	equ	0xFD8
 10080                           
 10081                           	psect	rparam
 10082  0000                     pclatu	equ	0xFFB
 10083                           pclath	equ	0xFFA
 10084                           tblptru	equ	0xFF8
 10085                           tblptrh	equ	0xFF7
 10086                           tblptrl	equ	0xFF6
 10087                           tablat	equ	0xFF5
 10088                           prodh	equ	0xFF4
 10089                           prodl	equ	0xFF3
 10090                           postinc0	equ	0xFEE
 10091                           fsr0h	equ	0xFEA
 10092                           fsr0l	equ	0xFE9
 10093                           wreg	equ	0xFE8
 10094                           indf1	equ	0xFE7
 10095                           postinc1	equ	0xFE6
 10096                           postdec1	equ	0xFE5
 10097                           fsr1h	equ	0xFE2
 10098                           fsr1l	equ	0xFE1
 10099                           bsr	equ	0xFE0
 10100                           indf2	equ	0xFDF
 10101                           postinc2	equ	0xFDE
 10102                           postdec2	equ	0xFDD
 10103                           fsr2h	equ	0xFDA
 10104                           fsr2l	equ	0xFD9
 10105                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    252
    Data        74
    BSS         665
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     34      64
    BANK0           160    142     145
    BANK1           256     44     238
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    F32_writeFile@dir	PTR struct dir_Structure size(2) Largest target is 512
		 -> SD_buffer(BIGRAM[512]), 

    F32_writeFile@dataString	PTR unsigned char  size(2) Largest target is 100
		 -> dataString(BANK1[100]), 

    F32_writeFile@fileName	PTR unsigned char  size(2) Largest target is 12
		 -> fileName(BANK1[12]), 

    F32_searchNextFreeCluster@value	PTR unsigned long  size(2) Largest target is 512
		 -> SD_buffer(BIGRAM[512]), 

    F32_readFile@fileName	PTR unsigned char  size(2) Largest target is 12
		 -> fileName(BANK1[12]), 

    F32_readFile@dir	PTR struct dir_Structure size(2) Largest target is 512
		 -> NULL(NULL[0]), SD_buffer(BIGRAM[512]), 

    F32_findFiles@fileName	PTR unsigned char  size(2) Largest target is 12
		 -> fileName(BANK1[12]), NULL(NULL[0]), 

    sp__F32_findFiles	PTR struct dir_Structure size(2) Largest target is 512
		 -> NULL(NULL[0]), SD_buffer(BIGRAM[512]), 

    F32_findFiles@dir	PTR struct dir_Structure size(2) Largest target is 512
		 -> SD_buffer(BIGRAM[512]), 

    F32_getSetNextCluster@FATEntryValue	PTR unsigned long  size(2) Largest target is 512
		 -> SD_buffer(BIGRAM[512]), 

    F32_getBootSectorData@partition	PTR struct partitionInfo_Structure size(2) Largest target is 512
		 -> SD_buffer.partitionData(BIGRAM[64]), SD_buffer(BIGRAM[512]), 

    F32_getBootSectorData@mbr	PTR struct MBRinfo_Structure size(2) Largest target is 512
		 -> SD_buffer(BIGRAM[512]), 

    F32_getBootSectorData@bpb	PTR struct BS_Structure size(2) Largest target is 512
		 -> SD_buffer(BIGRAM[512]), 

    F32_getSetFreeCluster@FS	PTR struct FSInfo_Structure size(2) Largest target is 512
		 -> SD_buffer(BIGRAM[512]), 

    USART_HW_putstr@s	PTR unsigned char  size(2) Largest target is 45
		 -> err3(CODE[19]), err4(CODE[28]), msg3(CODE[45]), msg2(CODE[31]), 
		 -> msg1(CODE[45]), err2(CODE[31]), err1(CODE[25]), test_start(CODE[28]), 


Critical Paths under _main in COMRAM

    _main->_SPI2_init
    _main->_USART_HW_init
    _main->_USART_HW_putstr
    _blinkErrorLED->_Delay10KTCYx
    _USART_HW_putstr->_USART_HW_write
    _SD_init->_SPI2_write
    _F32_writeFile->_SD_writeSingleBlock
    _F32_findFiles->_SD_writeSingleBlock
    _F32_getSetNextCluster->_SD_writeSingleBlock
    _F32_displayMemory->___llmod
    _F32_getSetFreeCluster->_SD_writeSingleBlock
    _SD_writeSingleBlock->_SPI2_write
    _SD_sendCommand->_SPI2_write

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_F32_writeFile
    _SD_init->_SD_sendCommand
    _F32_writeFile->_F32_readFile
    _F32_searchNextFreeCluster->___lldiv
    _F32_readFile->_F32_findFiles
    _F32_findFiles->_F32_displayMemory
    _F32_getSetNextCluster->___lldiv
    _F32_getFirstSector->___lmul
    _F32_freeMemoryUpdate->_F32_getSetFreeCluster
    _F32_displayMemory->___lldiv
    _F32_getBootSectorData->_F32_getSetFreeCluster
    ___lldiv->___lmul
    _F32_getSetFreeCluster->_SD_readSingleBlock
    _F32_getSetFreeCluster->_SD_writeSingleBlock
    _SD_writeSingleBlock->_SD_sendCommand
    _SD_readSingleBlock->_SD_sendCommand

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_F32_writeFile

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  130139
                                            139 BANK0      3     3      0
                       _Delay100TCYx
                      _F32_findFiles
              _F32_getBootSectorData
                      _F32_writeFile
                       _SD_card_type
                            _SD_init
                          _SPI2_init
                      _USART_HW_init
                    _USART_HW_putstr
                      _blinkErrorLED
 ---------------------------------------------------------------------------------
 (1) _blinkErrorLED                                        0     0      0      22
                       _Delay10KTCYx
 ---------------------------------------------------------------------------------
 (2) _Delay10KTCYx                                         2     2      0      22
                                             31 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _USART_HW_putstr                                      3     1      2     712
                                             32 COMRAM     2     0      2
                                              0 BANK0      1     1      0
                     _USART_HW_write
 ---------------------------------------------------------------------------------
 (2) _USART_HW_write                                       1     1      0      31
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_HW_init                                        5     5      0      65
                                             31 COMRAM     3     3      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPI2_init                                            3     1      2     410
                                             31 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _SD_init                                              5     5      0    1775
                                             12 BANK0      5     5      0
                     _SD_sendCommand
                         _SPI2_write
 ---------------------------------------------------------------------------------
 (1) _SD_card_type                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _F32_writeFile                                       56    52      4   83687
                                            127 BANK0     12     8      4
                                              0 BANK1     44    44      0
               _F32_freeMemoryUpdate
                 _F32_getFirstSector
              _F32_getSetFreeCluster
              _F32_getSetNextCluster
                       _F32_readFile
          _F32_searchNextFreeCluster
                 _SD_readSingleBlock
                _SD_writeSingleBlock
                            ___lldiv
                            ___llmod
                             ___lmul
                    _getDateTime_FAT
 ---------------------------------------------------------------------------------
 (2) _getDateTime_FAT                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _F32_searchNextFreeCluster                           27    23      4    3958
                                             25 BANK0     27    23      4
                 _SD_readSingleBlock
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _F32_readFile                                        33    31      2   45170
                                             95 BANK0     32    30      2
                      _F32_findFiles
                 _F32_getFirstSector
              _F32_getSetNextCluster
                 _SD_readSingleBlock
 ---------------------------------------------------------------------------------
 (3) _F32_findFiles                                       36    34      2   31739
                                             59 BANK0     36    34      2
                  _F32_displayMemory
               _F32_freeMemoryUpdate
                 _F32_getFirstSector
              _F32_getSetFreeCluster
              _F32_getSetNextCluster
                 _SD_readSingleBlock
                _SD_writeSingleBlock
 ---------------------------------------------------------------------------------
 (3) _F32_getSetNextCluster                               30    21      9    9175
                                             25 BANK0     30    21      9
                 _SD_readSingleBlock
                _SD_writeSingleBlock
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) _F32_getFirstSector                                   8     4      4    1268
                                             12 BANK0      8     4      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) _F32_freeMemoryUpdate                                13     9      4    6681
                                             33 BANK0     13     9      4
              _F32_getSetFreeCluster
 ---------------------------------------------------------------------------------
 (4) _F32_displayMemory                                   34    30      4    2218
                                             25 BANK0     34    30      4
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     694
                                             31 COMRAM     1     1      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (1) _F32_getBootSectorData                               25    25      0   10909
                                             33 BANK0     25    25      0
              _F32_getSetFreeCluster
                 _SD_readSingleBlock
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     852
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    1011
                                             12 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _F32_getSetFreeCluster                               12     7      5    6057
                                             21 BANK0     12     7      5
                 _SD_readSingleBlock
                _SD_writeSingleBlock
 ---------------------------------------------------------------------------------
 (2) _SD_writeSingleBlock                                 10     6      4    2250
                                             33 COMRAM     1     1      0
                                             12 BANK0      9     5      4
                     _SD_sendCommand
                          _SPI2_read
                         _SPI2_write
 ---------------------------------------------------------------------------------
 (2) _SD_readSingleBlock                                   9     5      4    2354
                                             12 BANK0      9     5      4
                     _SD_sendCommand
                          _SPI2_read
 ---------------------------------------------------------------------------------
 (2) _SD_sendCommand                                      12     8      4    1349
                                              0 BANK0     12     8      4
                          _SPI2_read
                         _SPI2_write
 ---------------------------------------------------------------------------------
 (2) _SPI2_write                                           2     2      0      34
                                             31 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _SPI2_read                                            1     1      0       3
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Delay100TCYx                                         1     1      0      22
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _low_isr                                             17    17      0       0
                                              0 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _high_isr                                           14    14      0       0
                                             17 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay100TCYx
   _F32_findFiles
     _F32_displayMemory
       ___lldiv
         ___lmul (ARG)
       ___llmod
     _F32_freeMemoryUpdate
       _F32_getSetFreeCluster
         _SD_readSingleBlock
           _SD_sendCommand
             _SPI2_read
             _SPI2_write
           _SPI2_read
         _SD_writeSingleBlock
           _SD_sendCommand
             _SPI2_read
             _SPI2_write
           _SPI2_read
           _SPI2_write
     _F32_getFirstSector
       ___lmul
     _F32_getSetFreeCluster
       _SD_readSingleBlock
         _SD_sendCommand
           _SPI2_read
           _SPI2_write
         _SPI2_read
       _SD_writeSingleBlock
         _SD_sendCommand
           _SPI2_read
           _SPI2_write
         _SPI2_read
         _SPI2_write
     _F32_getSetNextCluster
       _SD_readSingleBlock
         _SD_sendCommand
           _SPI2_read
           _SPI2_write
         _SPI2_read
       _SD_writeSingleBlock
         _SD_sendCommand
           _SPI2_read
           _SPI2_write
         _SPI2_read
         _SPI2_write
       ___lldiv
         ___lmul (ARG)
       ___llmod
     _SD_readSingleBlock
       _SD_sendCommand
         _SPI2_read
         _SPI2_write
       _SPI2_read
     _SD_writeSingleBlock
       _SD_sendCommand
         _SPI2_read
         _SPI2_write
       _SPI2_read
       _SPI2_write
   _F32_getBootSectorData
     _F32_getSetFreeCluster
       _SD_readSingleBlock
         _SD_sendCommand
           _SPI2_read
           _SPI2_write
         _SPI2_read
       _SD_writeSingleBlock
         _SD_sendCommand
           _SPI2_read
           _SPI2_write
         _SPI2_read
         _SPI2_write
     _SD_readSingleBlock
       _SD_sendCommand
         _SPI2_read
         _SPI2_write
       _SPI2_read
     ___lldiv
       ___lmul (ARG)
     ___lmul
   _F32_writeFile
     _F32_freeMemoryUpdate
       _F32_getSetFreeCluster
         _SD_readSingleBlock
           _SD_sendCommand
             _SPI2_read
             _SPI2_write
           _SPI2_read
         _SD_writeSingleBlock
           _SD_sendCommand
             _SPI2_read
             _SPI2_write
           _SPI2_read
           _SPI2_write
     _F32_getFirstSector
       ___lmul
     _F32_getSetFreeCluster
       _SD_readSingleBlock
         _SD_sendCommand
           _SPI2_read
           _SPI2_write
         _SPI2_read
       _SD_writeSingleBlock
         _SD_sendCommand
           _SPI2_read
           _SPI2_write
         _SPI2_read
         _SPI2_write
     _F32_getSetNextCluster
       _SD_readSingleBlock
         _SD_sendCommand
           _SPI2_read
           _SPI2_write
         _SPI2_read
       _SD_writeSingleBlock
         _SD_sendCommand
           _SPI2_read
           _SPI2_write
         _SPI2_read
         _SPI2_write
       ___lldiv
         ___lmul (ARG)
       ___llmod
     _F32_readFile
       _F32_findFiles
         _F32_displayMemory
           ___lldiv
             ___lmul (ARG)
           ___llmod
         _F32_freeMemoryUpdate
           _F32_getSetFreeCluster
             _SD_readSingleBlock
               _SD_sendCommand
                 _SPI2_read
                 _SPI2_write
               _SPI2_read
             _SD_writeSingleBlock
               _SD_sendCommand
                 _SPI2_read
                 _SPI2_write
               _SPI2_read
               _SPI2_write
         _F32_getFirstSector
           ___lmul
         _F32_getSetFreeCluster
           _SD_readSingleBlock
             _SD_sendCommand
               _SPI2_read
               _SPI2_write
             _SPI2_read
           _SD_writeSingleBlock
             _SD_sendCommand
               _SPI2_read
               _SPI2_write
             _SPI2_read
             _SPI2_write
         _F32_getSetNextCluster
           _SD_readSingleBlock
             _SD_sendCommand
               _SPI2_read
               _SPI2_write
             _SPI2_read
           _SD_writeSingleBlock
             _SD_sendCommand
               _SPI2_read
               _SPI2_write
             _SPI2_read
             _SPI2_write
           ___lldiv
             ___lmul (ARG)
           ___llmod
         _SD_readSingleBlock
           _SD_sendCommand
             _SPI2_read
             _SPI2_write
           _SPI2_read
         _SD_writeSingleBlock
           _SD_sendCommand
             _SPI2_read
             _SPI2_write
           _SPI2_read
           _SPI2_write
       _F32_getFirstSector
         ___lmul
       _F32_getSetNextCluster
         _SD_readSingleBlock
           _SD_sendCommand
             _SPI2_read
             _SPI2_write
           _SPI2_read
         _SD_writeSingleBlock
           _SD_sendCommand
             _SPI2_read
             _SPI2_write
           _SPI2_read
           _SPI2_write
         ___lldiv
           ___lmul (ARG)
         ___llmod
       _SD_readSingleBlock
         _SD_sendCommand
           _SPI2_read
           _SPI2_write
         _SPI2_read
     _F32_searchNextFreeCluster
       _SD_readSingleBlock
         _SD_sendCommand
           _SPI2_read
           _SPI2_write
         _SPI2_read
       ___lldiv
         ___lmul (ARG)
     _SD_readSingleBlock
       _SD_sendCommand
         _SPI2_read
         _SPI2_write
       _SPI2_read
     _SD_writeSingleBlock
       _SD_sendCommand
         _SPI2_read
         _SPI2_write
       _SPI2_read
       _SPI2_write
     ___lldiv
       ___lmul (ARG)
     ___llmod
     ___lmul
     _getDateTime_FAT
   _SD_card_type
   _SD_init
     _SD_sendCommand
       _SPI2_read
       _SPI2_write
     _SPI2_write
   _SPI2_init
   _USART_HW_init
   _USART_HW_putstr
     _USART_HW_write
   _blinkErrorLED
     _Delay10KTCYx

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     200      37       13.1%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     2C      EE       7       93.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8E      91       5       90.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     22      40       1       67.4%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1BF      12        0.0%
DATA                 0      0     3BF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu Feb 12 13:21:56 2015

    __end_of_F32_searchNextFreeCluster 30AE             __size_of_F32_displayMemory 0152  
                                   l98 3EBE                         ?_F32_writeFile 00DF  
                                   bsr 000FE0          __size_of_F32_freeMemoryUpdate 027E  
                       ?_USART_HW_init 0001                                    l122 3DBC  
                                  l123 3DBA                                    l207 38C4  
                                  l311 210C                                    l128 3EA4  
                                  l137 3E7E                                    l161 384C  
                                  l260 3374                                    l309 2134  
                                  l326 1FD8                                    l182 3602  
                                  l327 2076                                    l415 1BEE  
                                  l360 3078                                    l258 3386  
                                  l178 35A4                                    l443 3EC8  
                                  l197 3A8C                                    l710 3EAE  
                                  l384 15AE                                    l299 2AA8  
                                  l475 29DA                                    l397 16F8  
                                  l389 1618                                    l717 3E86  
                                  l398 1832                                    l950 3A46  
                                  l960 3B94                  _F32_getSetFreeCluster 3298  
                          _SD_cardType 003E                                    fsr2 000FD9  
                        F32_readFile@j 00D8                          F32_readFile@k 00D6  
                                  prod 000FF3                                    wreg 000FE8  
  F32_getSetNextCluster@FATEntryOffset 008E    F32_getSetNextCluster@FATEntrySector 0091  
                      ??_F32_findFiles 009D                                   l4000 2CAC  
                                 l4012 2D94                                   l4100 3E50  
                                 l4030 2E38                                   l4006 2CB8  
                                 l4110 3476                                   l4032 2E3C  
                                 l4008 2D68                                   l4026 2E30  
                                 l4050 2F04                                   l4212 2312  
                                 l4060 2FD2                                   l4140 3532  
                                 l4116 348A                                   l4302 14FE  
                                 l4142 353A                                   l4134 34EE  
                                 l4126 34C6                                   l4224 2612  
                                 l4400 18D8                                   l4240 1180  
                                 l4160 35C4                                   l4144 3546  
                                 l3602 3AB2                                   l4410 18FC  
                                 l4068 3058                                   l4404 18F4  
                                 l4332 15D2                                   l4324 15A2  
                                 l4260 12F0                                   l4252 12E2  
                                 l4172 3612                                   l3710 33EC  
                                 l4430 1AC8                                   l4342 15FE  
                                 l4174 3616                                   l3536 37B6  
                                 l3616 3AF6                                   l4424 1AA4  
                                 l4352 165E                                   l4328 15C0  
                                 l4248 11FE                                   l4168 3608  
                                 l4512 26AE                                   l3554 382E  
                                 l3538 37F0                                   l3714 33FC  
                                 l3706 33C0                                   l4426 1AB0  
                                 l4354 16BC                                   l4274 1386  
                                 l4266 1350                                   l4282 1414  
                                 l4098 3E48                                   l4522 26CA  
                                 l3556 3836                                   l3660 3932  
                                 l3740 39CA                                   l3724 3BBE  
                                 l4196 227E                                   l3820 368C  
                                 l3812 3638                                   l4444 1BD8  
                                 l4284 141A                                   l2932 3DA0  
                                 l2924 3D8C                                   l4540 2726  
                                 l4532 26FC                                   l3558 383C  
                                 l3750 3A2C                                   l3742 39D0  
                                 l4542 2734                                   l4534 2700  
                                 l4518 26BE                                   l3568 3874  
                                 l3576 3884                                   l3648 3906  
                                 l3728 3BE4                                   l3760 3B32  
                                 l3816 364C                                   l3832 375C  
                                 l3840 2A54                                   l4448 1BDC  
                                 l4392 18AA                                   l4384 1842  
                                 l4296 14C8                                   l2936 3DAE  
                                 l2928 3D98                                   l4536 270A  
                                 l4528 26E6                                   l3594 3A9C  
                                 l3674 395E                                   l3682 3974  
                                 l3738 39B2                                   l3762 3B38  
                                 l4570 27AA                                   l4538 2718  
                                 l4546 2742                                   l3668 3948  
                                 l3844 2B1C                                   l3780 31D2  
                                 l3916 1E6E                                   l3860 1C14  
                                 l4388 186E                                   l4556 277A  
                                 l4548 275A                                   l3766 3B7C  
                                 l3758 3B1C                                   l3854 2BE0  
                                 l3846 2B70                                   l3942 2090  
                                 l3936 2088                                   l3952 2100  
                                 l3864 1C52                                   l3786 31F0  
                                 l3890 1D16                                   l4498 2674  
                                 l3796 324A                                   l3788 31F8  
                                 l3964 21D8                                   l3884 1D0E  
                                 l3876 1CD2                                   l3868 1C94  
                                 l3898 1D5E                                   l3996 2CA8  
                      ?_USART_HW_write 0001                                   u4050 2A3E  
                                 u4060 2A7C                                   u4055 2A32  
                                 u4080 2B06                                   u4065 2A70  
                                 u4090 2B44                                   u4085 2AFA  
                                 u4095 2B38                                   u4415 2F1E  
                                 u2770 3D9E                                   u4700 13F0  
                                 u5157 3E8C                                   u5167 3EB0  
                                 u4705 13E4                                   u3595 37D0  
                                 u3925 30CE                                   u3935 3180  
                                 u4735 1596                                   u3971 3628  
           __end_of_SD_readSingleBlock 3B08                           _SD_card_type 3ED2  
                     _sectorPerCluster 003F                                   _err1 10D1  
                                 _err2 105B                                   _err3 10EA  
                                 _err4 1099               SD_writeSingleBlock@retry 0070  
                                 _main 261C                                   _msg1 1001  
                                 _msg2 107A                                   _msg3 102E  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                                 fsr0l 000FE9                                   fsr2h 000FDA  
                                 indf1 000FE7                                   fsr1l 000FE1  
                                 indf2 000FDF                                   fsr2l 000FD9  
                                 pclat 000FFA                        __end_of_SD_init 361A  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 03A2           __size_of_SD_writeSingleBlock 00F4  
                                ?_main 0001                       ?_USART_HW_putstr 0021  
                __size_of_Delay100TCYx 0010                        __end_of___lldiv 3A58  
                      __end_of___llmod 3BA6                                  _RCREG 000FAE  
                                _RCSTA 000FAB                                  _SPBRG 000FAF  
                                _TXREG 000FAD                  __size_of_Delay10KTCYx 0016  
                                _TXSTA 000FAC                          _totalClusters 002F  
                  ___lmul@multiplicand 0064                            ?_SPI2_write 0001  
                   __size_of_SPI2_init 0052                     __size_of_SPI2_read 0012  
                                main@i 00EC                        __end_of_low_isr 03A2  
                      F32_readFile@dir 00DD                                  tablat 000FF5  
                                status 000FD8                F32_writeFile@dataString 00E1  
                      __initialization 3D14                           _Delay100TCYx 3EAC  
                         __end_of_err1 10EA                           __end_of_err2 107A  
                         __end_of_err3 10FD                           __end_of_err4 10B5  
                      ??_F32_writeFile 00E3                           __end_of_main 29DC  
                         __end_of_msg1 102E                           __end_of_msg2 1099  
                         __end_of_msg3 105B                           _Delay10KTCYx 3E84  
                      ??_USART_HW_init 0020                     _F32_getFirstSector 3C2C  
               ?_F32_getSetFreeCluster 0075                                 ??_main 0023  
                        __activetblptr 000002                F32_writeFile@appendFile 01D3  
                _F32_getSetNextCluster 30AE                    ?_F32_getFirstSector 006C  
              ??_F32_getBootSectorData 0081                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                                 _ADCON2 000FC0  
                     ___llmod@dividend 0060                                 _ANSELA 000F38  
                               _ANSELB 000F39                                 _ANSELC 000F3A  
                               _ANSELD 000F3B                                 _ANSELE 000F3C  
                            ??_SD_init 0022                          main@mySD_type 00EB  
                               _SPBRGH 000FB0                   ??_F32_getFirstSector 0070  
          ??_F32_searchNextFreeCluster 007D                      __end_of_SPI2_init 3DC4  
                    __end_of_SPI2_read 3EAC                       __end_of_high_isr 3D14  
                               ___lmul 3BA6                    __size_of_SPI2_write 0018  
                            ??___lldiv 0020                              ??___llmod 0020  
                               clear_0 3D1C                                 clear_1 3D2E  
                               clear_2 3D42                  F32_displayMemory@flag 0099  
                  F32_findFiles@sector 00B0     F32_getSetNextCluster@FATEntryValue 0095  
                     F32_readFile@flag 00D5                  __end_of_blinkErrorLED 3ED2  
                         __mediumconst 0000                              ??_low_isr 0001  
               SD_sendCommand@response 006A                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
       F32_getSetFreeCluster@totOrNext 007E               __size_of_getDateTime_FAT 0004  
                           __accesstop 0060                __end_of__initialization 3D68  
              __size_of_SD_sendCommand 0124  F32_searchNextFreeCluster@startCluster 0079  
                       __pcstackCOMRAM 0001                           __pidataBANK1 3DC4  
               ?_F32_getSetNextCluster 0079                          _SD_startBlock 0023  
                     ??_USART_HW_write 0020              _F32_searchNextFreeCluster 2EAA  
                        _unusedSectors 0033       F32_getBootSectorData@dataSectors 0090  
                  _SD_writeSingleBlock 3890                             __pbssBANK0 00EE  
                           __pbssBANK1 0100                        _firstDataSector 0110  
         __end_of_F32_freeMemoryUpdate 2C5A                             _dataString 0114  
                         SD_init@retry 006F                     _F32_writeFile$2117 01C6  
                       F32_writeFile@i 01E5                         F32_writeFile@j 01E7  
                       F32_writeFile@k 01DE                       F32_writeFile@dir 01E8  
                              ?___lmul 0060                     _SD_readSingleBlock 3A58  
                 ?_SD_writeSingleBlock 006C                                _CM1CON0 000F79  
                              _CM2CON0 000F78                                _CM2CON1 000F77  
                       ___lmul@product 0068                     F32_writeFile@error 01D4  
            F32_writeFile@clusterCount 01CA                     F32_writeFile@start 01D5  
                  ?_SD_readSingleBlock 006C                           ??_SPI2_write 0020  
            F32_findFiles@firstCluster 00B4                                _SSP2BUF 000F6F  
          SD_writeSingleBlock@response 0074                              ?_high_isr 0001  
                     SPI2_read@TempVar 0020             SD_readSingleBlock@response 0072  
                              _SD_init 345C                _freeClusterCountUpdated 00F0  
                __end_of_F32_findFiles 21F4               F32_writeFile@firstSector 01DA  
                   _appendStartCluster 010C                   ??_SD_readSingleBlock 0022  
                    ??_getDateTime_FAT 0020                                __Hparam 0000  
                              __Lparam 0000                   F32_writeFile@cluster 01EA  
                  SD_sendCommand@retry 0068                ??_F32_getSetFreeCluster 007A  
                      __size_of___lmul 0086                  ??_SD_writeSingleBlock 0022  
                              ___lldiv 3984                     __end_of_SPI2_write 3E84  
                              ___llmod 3B08                 F32_displayMemory@F8237 01A2  
                         __psmallconst 1000                                _dateFAT 0037  
         F32_writeFile@fileCreatedFlag 01D2                                __pcinit 3D14  
                              __ramtop 1000                                __ptext0 261C  
                              __ptext1 3EC8                                __ptext2 3E84  
                              __ptext3 3E46                                __ptext4 3EBC  
                              __ptext5 3E0E                                __ptext6 3D72  
                              __ptext7 345C                                __ptext8 3ED2  
                              __ptext9 10FE                   F32_findFiles@cluster 00B8  
                              _timeFAT 003B                                _low_isr 0318  
             __size_of_USART_HW_putstr 0026                             ??_high_isr 0012  
                       __pintcode_body 3CAE         __size_of_F32_getBootSectorData 0428  
                 end_of_initialization 3D68          __end_of_F32_getBootSectorData 261C  
                        __Lmediumconst 0000                                int_func 3CAE  
                       _SD_sendCommand 376C                        ___lldiv@divisor 0070  
                            _SDHC_flag 003D                        ___lldiv@counter 0078  
                            _RCSTAbits 000FAB        F32_searchNextFreeCluster@sector 0089  
                        ?_F32_readFile 00BF                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc1 000FE6                                postinc2 000FDE  
                __end_of_F32_writeFile 1C00               F32_writeFile@extraMemory 01C2  
             F32_writeFile@nextCluster 01D6                              _SPI2_init 3D72  
                            _SPI2_read 3E9A                   _F32_freeMemoryUpdate 29DC  
                __end_of_USART_HW_init 3E46                             _test_start 10B5  
                     USART_HW_putstr@c 0060                       USART_HW_putstr@s 0021  
                            _TRISAbits 000F92                              _TRISBbits 000F93  
                            _TRISCbits 000F94                              _TRISDbits 000F95  
           F32_searchNextFreeCluster@i 0093                              _SD_buffer 01EE  
               __end_of_SD_sendCommand 3890       F32_searchNextFreeCluster@cluster 008F  
                            _TXSTAbits 000FAC                SD_readSingleBlock@retry 0070  
     F32_freeMemoryUpdate@freeClusters 008A            __size_of_F32_getFirstSector 0082  
                       ??_F32_readFile 00C1                       Delay100TCYx@unit 0020  
              ??_F32_getSetNextCluster 0082                         __end_of___lmul 3C2C  
                          _BAUDCONbits 000FB8                             ?_SPI2_init 0020  
                           ?_SPI2_read 0001                  ?_F32_freeMemoryUpdate 0081  
             F32_writeFile@prevCluster 01E1                      F32_findFiles@flag 00AD  
                  start_initialization 3D14     F32_getSetNextCluster@clusterNumber 0079  
                      SD_init@response 006E                         _bytesPerSector 00EE  
                      ?_SD_sendCommand 0060                          ?_SD_card_type 0001  
                   SPI2_init@smp_phase 0021                        ___llmod@divisor 0064  
                    ??_USART_HW_putstr 0023                        ___llmod@counter 0020  
         F32_getSetFreeCluster@FSEntry 0076                         _SD_totalBlocks 0100  
                    SD_sendCommand@cmd 006B                      SD_sendCommand@arg 0060  
               __size_of_blinkErrorLED 000A                   F32_readFile@fileName 00BF  
                             ??___lmul 0020                   F32_readFile@fileSize 00CD  
                          __pdataBANK1 0178          F32_writeFile@firstClusterHigh 01CE  
                          __pbssBIGRAM 01EE                            __pbssCOMRAM 0023  
                        __pcstackBANK0 0060                          __pcstackBANK1 01C2  
                      _getDateTime_FAT 3ED6               F32_freeMemoryUpdate@flag 0089  
             F32_freeMemoryUpdate@size 0081         F32_getBootSectorData@partition 0096  
                             ?_SD_init 0001                         ??_SD_card_type 0020  
         F32_getSetFreeCluster@get_set 0075                      __size_of_high_isr 3A0C  
                  SD_readSingleBlock@i 0073                          ?_Delay100TCYx 0001  
                            __pintcode 0308                      F32_writeFile@data 01DF  
                             ?___lldiv 006C                               ?___llmod 0060  
                        ?_Delay10KTCYx 0001                 ??_F32_freeMemoryUpdate 0085  
       __size_of_F32_getSetFreeCluster 01C4                            __pintcodelo 0318  
                          ??_SPI2_init 0022                            ??_SPI2_read 0020  
        __end_of_F32_getSetFreeCluster 345C                       _appendFileSector 0108  
                          __smallconst 1000                               ?_low_isr 0001  
                        _blinkErrorLED 3EC8                    F32_writeFile@sector 01E0  
                 __end_of_F32_readFile 2EAA                 USART_HW_init@usart_div 0060  
             F32_getBootSectorData@bpb 0098               F32_getBootSectorData@mbr 0094  
                             SD_init@i 006D        SD_readSingleBlock@SD_startBlock 006C  
     SD_writeSingleBlock@SD_startBlock 006C                __size_of_USART_HW_write 000C  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             _PIE1bits 000F9D            __end_of_SD_writeSingleBlock 3984  
          __size_of_SD_readSingleBlock 00B0                         ??_Delay100TCYx 0020  
                             _PIR1bits 000F9E                               _PIR3bits 000FA4  
       F32_searchNextFreeCluster@value 008D                    _reservedSectorCount 0039  
                       ??_Delay10KTCYx 0020                               _SSP2CON1 000F6C  
                             _SSP2STAT 000F6D                F32_getSetFreeCluster@FS 007F  
               __size_of_F32_findFiles 05F4                     _appendFileLocation 0104  
              __end_of_getDateTime_FAT 3EDA                              main@error 00ED  
                       ?_blinkErrorLED 0001                       Delay10KTCYx@unit 0021  
                    SPI2_init@bus_mode 0020        F32_getFirstSector@clusterNumber 006C  
                    ___lmul@multiplier 0060                              copy_data0 3D5C  
                     F32_findFiles@dir 00BD                       __size_of_SD_init 01BE  
    F32_getSetNextCluster@clusterEntry 007E                  _F32_getBootSectorData 21F4  
                F32_writeFile@fileName 00DF                      SPI2_init@spi_rate 0022  
                             __Hrparam 0000                               __Lrparam 0000  
                  F32_readFile@cluster 00D9           F32_writeFile@firstClusterLow 01D0  
                 SD_sendCommand@status 0069                       __size_of___lldiv 00D4  
                     __size_of___llmod 009E                      _F32_displayMemory 361A  
                 __end_of_SD_card_type 3ED6                   SD_writeSingleBlock@i 0072  
       __size_of_F32_getSetNextCluster 01EA          __end_of_F32_getSetNextCluster 3298  
                   SPI2_write@data_out 0021                     ?_F32_displayMemory 0079  
                     ??_SD_sendCommand 0064                        _USART_HW_putstr 3E46  
                             _fileName 01B6                       __size_of_low_isr 008A  
                             __ptext10 3ED6                               __ptext11 2EAA  
                             __ptext20 3BA6                               __ptext12 2C5A  
                             __ptext21 3984                               __ptext13 1C00  
                             __ptext22 3298                               __ptext14 30AE  
                             __ptext23 3890                               __ptext15 3C2C  
                             __ptext24 3A58                               __ptext16 29DC  
                             __ptext25 376C                               __ptext17 361A  
                             __ptext26 3E6C                               __ptext18 3B08  
                             __ptext27 3E9A                               __ptext19 21F4  
                             __ptext28 3EAC          F32_displayMemory@memoryString 0085  
                             _fileSize 0027                    ??_F32_displayMemory 007D  
                             _high_isr 0308                           _SSP2CON1bits 000F6C  
               __size_of_F32_writeFile 0B02                  F32_findFiles@fileName 009B  
                    SD_init@SD_version 006C                          _F32_findFiles 1C00  
                        __size_of_main 03C0           F32_getSetNextCluster@get_set 007D  
           __end_of_F32_getFirstSector 3CAE                 __size_of_USART_HW_init 0038  
              F32_displayMemory@memory 0079              __end_of_F32_displayMemory 376C  
                         _SSP2STATbits 000F6D                        ??_blinkErrorLED 0022  
                     ?_getDateTime_FAT 0001                  __size_of_F32_readFile 0250  
             F32_findFiles@firstSector 00A9                      SPI2_write@TempVar 0020  
                 __end_of_Delay100TCYx 3EBC                     F32_displayMemory@i 009A  
                 __end_of_Delay10KTCYx 3E9A                               intlevel1 0000  
                             intlevel2 0000                 ?_F32_getBootSectorData 0001  
                       ?_F32_findFiles 009B                         _USART_HW_write 3EBC  
                     ___lldiv@dividend 006C                F32_readFile@firstSector 00D1  
   __size_of_F32_searchNextFreeCluster 0204             ?_F32_searchNextFreeCluster 0079  
                   __end_of_test_start 10D1                F32_readFile@byteCounter 00C9  
                         _F32_readFile 2C5A                            _temp_buffer 0178  
                       F32_findFiles@i 00AE                         F32_findFiles@j 00BC  
                        _F32_writeFile 10FE                __end_of_USART_HW_putstr 3E6C  
                        _USART_HW_init 3E0E                       ___lldiv@quotient 0074  
                           _SPI2_write 3E6C             F32_getSetNextCluster@retry 0090  
               __end_of_USART_HW_write 3EC8                            _rootCluster 002B  
             F32_findFiles@nextCluster 00A5                     USART_HW_write@data 0020  
                __size_of_SD_card_type 0004  
